<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 1.5 $ -->
 <chapter xml:id="tutorial" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Basit bir eğitmen</title>

  <para>
  Bu bölümde PHP ile ilgili en temel bilgileri kısa ve basit bir eğitmen
  üzerinde anlatmak istiyoruz. Bu metin yalnızca PHP ile dinamik web sayfası
  geliştirmeyi ele alır, ancak PHP yalnızca web sayfası yaratmakla
  sınırlı değildir. Daha fazla bilgi için <link linkend="intro-whatcando">PHP
  neler yapabilir</link> bölümünü inceleyebilirsiniz.
  </para>
  <para>
  PHP-etkin web sayfaları normal HTML sayfaları gibidir ve bu sayfaları
  normal HTML sayfaları için kullandığınız yöntemlerle yaratabilir ve
  düzenleyebilirsiniz.
  </para>

  <sect1 xml:id="tutorial.requirements">
   <title>Neye ihtiyacım var?</title>
   <para>
   Bu eğitmen süresince web sunucunuzun PHP desteğinin etkinleştirilmiş
   olduğunu ve tüm <filename>.php</filename> uzantılı dosyaların
   PHP tarafından kontrol ediliyor olduğunu öngöreceğiz. Birçok sunucuda,
   bu uzantı PHP dosyaları için öntanımlı dosya uzantısıdır, ancak emin
   olmak için sunucunuzun yöneticisinden doğru bilgiyi edinebilirsiniz.
   Sunucunuz PHP&apos;yi destekliyorsa, hiçbir şey yapmanıza gerek
   yoktur. Yalnızca <filename>.php</filename> uzantılı dosyalarınızı
   yaratmanız ve web klasörünüze koymanız, sunucunuzun bu dosyayı
   sizin için otomatik olarak işleme koyması için yeterli olacaktır.
   Herhangi bir şeyi derlemeniz ya da ekstra bir araç kurulumu yapmanız
   gerekmemektedir. PHP-etkin dosyaları yeni bir tür HTML dosyası olarak
   kafanızda canlandırabilirsiniz. Düşünün ki, artık HTML dosyasının içine
   sihirli birtakım etiketler koyabiliyor ve bu etiketler sayesinde istediğiniz
   her tür işlemi gerçekleştirebiliyorsunuz. Birçok web barındırma sitesi
   PHP desteği sunmaktadır, ancak sizinki sunmuyorsa,
   <link xlink:href="&url.php.links;">PHP Bağlantıları</link> bölümünden PHP hizmeti sunan web barındırma
   sitelerinin adreslerine ulaşabilirsiniz.
      </para>
   <para>
   Diyelim ki çok değerli olan band genişliğinizi boşa harcamamak ve kendi
   sisteminizde yerel olarak geliştirme yapmak istiyorsunuz. Bu durumda, 
   <link xlink:href="&url.apache;">Apache</link> gibi bir web sunucusunu ve elbette
   <link xlink:href="&url.php.downloads;">PHP</link>&apos;yi
   indirmeniz ve kurmanız gerekmektedir. Bu ikilinin yanında, <link xlink:href="&url.mysql.docs;">MySQL</link>
   gibi bir veritabanını da indirip kurmanız iyi olacaktır.
   </para>
   <para>
   Bu üçlüyü kendi başınıza kurabilir ya da daha basit bir yol izleyebilirsiniz. Kılavuzumuz
   <link linkend="install">PHP için kurulum bilgileri</link> (web sunucunuzun
   halihazırda kurulu olduğunu öngörür) bölümüne sahiptir. PHP&apos;yi kendiniz
   kurmakta sorun yaşıyorsanız, sorularınızın çözümü için <link xlink:href="&url.php.mailing-lists;">kurulum
    posta listesi</link>&apos;ne başvurabilirsiniz. Daha basit bir yoldan gitmek istiyorsanız,
    işletim sisteminize uygun olan <link xlink:href="&url.installkits;">ön yapılandırılmış paket</link>i
    seçebilir ve tüm bu araçları birkaç fare tıklamasıyla otomatik olarak yükleyebilirsiniz.
    MacOSX, Linux ve Windows dahil olmak üzere birçok işletim sistemine PHP destekli bir web
    sunucusu kurmak oldukça kolaydır. Linux üzerinde, <link xlink:href="&url.rpmfind;">rpmfind</link>
    ve <link xlink:href="&url.rpmfind.pbone;">PBone</link> araçları RPM dosyalarını bulmanızda
    size yardımcı olacaklardır. Debian için ise <link xlink:href="&url.apt-get;">apt-get</link>
    bölümünü ziyaret edebilirsiniz.
      </para>
  </sect1>

  <sect1 xml:id="tutorial.firstpage">
   <title>İlk PHP-etkin sayfanız</title>
   <para>
   <filename>hello.php</filename> isimli bir dosya yaratın ve web sunucunuzun
   kök klasörüne (<varname>DOCUMENT_ROOT</varname>) aşağıdaki içerikle
   beraber kaydedin:
   </para>
   <para>
    <example>
     <title>İlk PHP betiğimiz: <filename>hello.php</filename></title>
     <programlisting role="php">
<![CDATA[
<html>
 <head>
  <title>PHP Test</title>
 </head>
 <body>
 <?php echo '<p>Merhaba Dünya</p>'; ?>
 </body>
</html>
]]>
     </programlisting>
     <simpara>
     Tarayıcınızı kullanarak web sunucunuzun URL adresine erişebilirsiniz, adres
     bölümünün sonuna "/hello.php" eklemeniz yeterli olacaktır. Yerel olarak geliştirme
     yaparken bu URL <literal>http://localhost/hello.php</literal> ya da
     <literal>http://127.0.0.1/hello.php</literal> gibi bir şey olacaktır, ancak
     bu web sunucusunun yapılandırma ayarlarına bağlıdır. Eğer her şey düzgün
     yapılandırılmışsa, bu dosya PHP tarafından işlenecek ve aşağıdaki çıktı
     tarayıcınıza gönderilecektir:
     </simpara>
     <screen role="html">
<![CDATA[
<html>
 <head>
  <title>PHP Test</title>
 </head>
 <body>
 <p>Merhaba Dünya</p>
 </body>
</html>
]]>
     </screen>
    </example>
   </para>
   <para>
   Bu program gördüğünüz gibi son derece basit ve esasında böyle bir sayfa yaratmanız için
   PHP&apos;ye gereksiniminiz yoktur. Görüntülenen: PHP&apos;nin 
   <function>echo</function> komutu kullanılarak elde edilen <literal>Merhaba Dünya</literal>
   cümlesidir. Bu dosyanın hiçbir şekilde <emphasis>çalıştırılabilir ya da özel türde olmasına ihtiyaç duyulmadığına</emphasis>
   dikkat edin. Sunucu dosyanın PHP tarafından işlenmesi gerektiğini bilir çünkü dosyaya ".php" uzantısını
   tanımladınız. Sunucu bu uzantıya sahip dosyaları PHP üzerinden geçirecek biçimde yapılandırılmıştır.
   Bunu size birtakım özel etiketlerle birçok ilginç işlem yapabilmenizi sağlayan bir tür HTML dosyası
   olarak düşünebilirsiniz.
   </para>
   <para>
   Bu örneği denediyseniz ve hiçbir çıktı alamadıysanız, sizden dosyayı indirmenizi
   istediyse ya da dosyanın tüm içeriğini metin olarak ekranda gördüyseniz, büyük ihtimalle
   sunucunuzun PHP desteği etkinleştirilmemiştir ya da sunucunuz doğru yapılandırılmamıştır.
   Yönetinizden kılavuzdaki <link linkend="install">Kurulum</link> bölümünü
   kullanarak PHP&apos;yi etkinleştirmesini rica edebilirsiniz. Yerel olarak geliştirme yapıyorsanız,
   kurulum bölümünü okuyarak herşeyin doğru yapılandırıldığından emin olun. Size çıktıyı
   sağlayan sunucudaki dosyaya http üzerinden erişmeye çalışıp çalışmadığınızı kontrol edin.
   Dosyayı direk olarak kendi dosya sisteminizden çağırıyorsanız, PHP tarafından işlenmeyecektir.
   Sorun her şeye rağmen devam ediyorsa, <link xlink:href="&url.php.support;">PHP desteği alma</link>
   yöntemlerini kullanmakta tereddüt etmeyin.
   </para>
   <para>
   Bu örneğin amacı özel PHP etiketi formatını göstermektir. Örnekte
   <literal>&lt;?php</literal> ile PHP etiketinin başlangıcını belirledik.
   Sonra PHP komutunu yazdık ve kapanış etiketi <literal>?&gt;</literal>
   kullanarak PHP kipinden çıktık. Bir HTML dosyasında bu yöntemi kullanarak
   istediğiniz yerde PHP kipine girip çıkabilirsiniz. Daha fazla bilgi için, kılavuzun
   <link linkend="language.basic-syntax">temel PHP sözdimi</link> bölümünü
   okuyabilirsiniz.
   </para>
   
   <note>
    <title>Metin Düzenleyiciler Hakkında</title>
    <para>
    PHP dosyalarını yaratabileceğiniz, düzenleyebileceğiniz ve yönetebileceğiniz
    birçok metin düzenleyici ve Bütünleşik Geliştirme Ortamı (IDE) bulunmaktadır.
    Bu araçların bir kısmı <link xlink:href="&url.phpeditorlist;">PHP Düzenleyicileri
     Listesi</link> bölümünde listelenmiştir. Sizin önermek istediğiniz bir düzenleyici
     varsa, lütfen yukardaki sayfayı ziyaret edin ve sayfa idarecisinden önermek istediğiniz
     düzenleyiciyi bu listeye eklemesini rica edin. Söz dizimi aydınlatması olan bir düzenleyici
     size yardımcı olabilir.
    </para>
   </note>
   
   <note>
    <title>Kelime İşlemciler Hakkında</title>
    <para>
    StarOffice Writer, Microsoft Word ve Abiword gibi kelime işlemciler PHP dosyalarını
    düzenlemek için uygun değillerdir. Eğer bu test betiği için bunlardan birini kullanmak
    istiyorsanız, dosyanın <emphasis>salt metin</emphasis> olarak kaydedildiğinden
    emin olun, aksi takdirde PHP&apos;nin betiği okuması ve çalıştırması mümkün olmayacaktır.
    </para>
   </note>
   
   <note>
    <title>Windows Not Defteri Hakkında</title>
    <para>
    PHP betiklerinizi Windows Not Defteri ile yazıyorsanız, dosyalarınızın .php uzantısı
    ile kaydedildiğinden emin olmalısınız (Notepad birazdan bahsedeceğimiz önlemleri
    almadığınız takdirde dosyaların sonuna otomatik olarak .txt uzantısı ekler).
    Dosyayı kaydetmek istediğinizde, sizden dosyanız için bir isim belirtmeniz istenecektir.
    Dosya ismi olarak tırnak içinde (örn. "<filename>hello.php</filename>") yazın.
    Alternatif olarak, 'Kaydet' iletişim kutusunun içindeki &apos;Metin Belgeleri&apos; açılır menüsüne
    tıkladıktan sonra buradaki değeri "Tüm Dosyalar" olarak değiştirin. Artık dosya isminizi
    tırnak işareti kullanmadan yazabilirsiniz.
    </para>
   </note>
  
  <para>
   Artık çalışır bir PHP betiğini başarıyla yarattığınıza göre, PHP betiklerinin
   en ünlüsünü yaratma zamanı geldi demektir! <function>Phpinfo</function>
   fonksiyonunu çalıştıracağız ve sisteminizle ve yapılandırmanızla ilgili
   <link linkend="language.variables.predefined">öntanımlı değişkenler</link>,
   yüklü PHP modülleri ve <link linkend="configuration">yapılandırma</link>
   ayarları gibi konularda faydalı birçok bilgiye ulaşacağız. Bu önemli bilgiler için
   biraz vakit ayırmanızı ve bunları incelemenizi öneririz.
   </para>
   <para>
    <example>
     <title>PHP ile sistem bilgisine ulaşmak</title>
     <programlisting role="php">
<![CDATA[
<?php phpinfo(); ?>
]]>
     </programlisting>
    </example>
   </para>
  </sect1>

  <sect1 xml:id="tutorial.useful">
   <title>İşe yarar bir şey</title>
   <para>
   Þimdi daha işe yarar bir şey yapalım. Kullanıcınızın hangi tarayıcıyı
   kullandığını tespit edelim. Bunun için, HHTP isteği ile birlikte kullanıcınızın
   tarayıcı tarafından gönderilen karakter dizisi (string) değerini inceleyeceğiz.
   Bu değer bir <link linkend="language.variables">değişken</link> içinde
   depolanmıştır. Değişkenler PHP&apos;de her zaman dolar işareti ile başlar.
   Bizim şu an için ilgilendiğimiz değişken <varname>$_SERVER[&apos;HTTP_USER_AGENT&apos;]</varname>
   değişkenidir.
   </para>
   <note>
    <para>
     <link linkend="reserved.variables.server">$_SERVER</link> özel saklanmış
     bir PHP değişkenidir. Bu değişken tüm web sunucusu bilgilerini içerir. Autoglobal
     (ya da superglobal - süper evrensel) olarak da bilinir. Kılavuzdaki 
     <link linkend="language.variables.superglobals">Superglobals</link>
     bölümünden bu konu ile ilgili daha fazla bilgiye ulaşabilirsiniz. Bu özel değişkenler
     PHP <link xlink:href="&url.php.release4.1.0;">4.1.0</link> sürümü ile birlikte
     kullanılmaya başlanmıştır. Daha öncesinde, <varname>$HTTP_SERVER_VARS</varname>
     gibi eski <varname>$HTTP_*_VARS</varname> dizileri (array) kullanılmaktaydı.
     Ömrünü doldurmuş olsa da, bu eski tip değişkenler hala mevcuttur. (<link linkend="tutorial.oldcode">Eski kod</link>
     bölümüne de bakınız.)
    </para>
   </note>
   <para>
   Bu değişkeni görüntülemek için yapmanız gereken basitçe:
   </para>
   <para>
    <example>
    <title>Bir değişkeni yazdırmak (Dizi öğesi)</title>
    <programlisting role="php">
<![CDATA[
<?php echo $_SERVER['HTTP_USER_AGENT']; ?>
]]>
    </programlisting>
    <para>
    Bu betikten alınabilecek kısa sonuç:
    </para>
    <screen role="html">
	Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)
    </screen>
   </example>
   </para>
   <para>
   PHP&apos; birçok farklı değişken <link linkend="language.types">tipi</link>
   mevcuttur. Yukardaki örnekte bir <link linkend="language.types.array">dizi</link>ye
   ait bir öğeyi yazdırdık. Diziler çok kullanışlı olabilirler.
   </para>
   <para>
    <varname>$_SERVER</varname> size PHP tarafından otomatik olarak sağlanan
    bir değişkendir. Kullanım kılavuzunun 
    <link linkend="reserved.variables">Rezerve Değişkenler</link> bölümünden
    tümünün bir listesine ulaşabilirsiniz ya da önceki örnekte kullandığımız
    <function>phpinfo</function> fonksiyonu ile üretilen çıktıya bakarak bütün
    listeye ulaşabilirsiniz.
   </para>
   <para>
   PHP etiketinin içine birden çok PHP komutu koyabilir ve tek bir echo komutundan
   daha fazlasını yapan küçük kod blokları yaratabilirsiniz. Örneğin, Internet Explorer için
   bir kontrol yapmak istiyorsanız şunu yapabilirsiniz:
   </para>
   <para>
    <example>
     <title><link linkend="language.control-structures">Kontrol yapıları 
     </link>nın ve <link linkend="language.functions">fonksiyonlar</link>ın kullanımına örnek</title>
     <programlisting role="php">
<![CDATA[
<?php
if (strpos($_SERVER['HTTP_USER_AGENT'], 'MSIE') !== FALSE) {
    echo 'Internet Explorer kullanmaktasınız.<br />';
}
?>
]]>
     </programlisting>
     <para>
     Bu betikten alınabilecek örnek sonuç:
     </para>
     <screen role="html">
<![CDATA[
Internet Explorer kullanıyorsunuz.<br />
]]>
     </screen>
    </example>
   </para>
   <para>
   Nurada birkaç yeni kavramı devreye soktuk. Bir <link linkend="control-structures.if">if</link>
   komutumuz var. Eğer C dilinde kullanılan temel sözdizimine aşinalığınız varsa, bu kullanım
   size tanıdık gelecektir. Aksi takdirde, giriş düzeyinde bir PHP kitabı almanız ve ilk birkaç bölümünü
   okumanız ya da kılavuzun <link linkend="langref">Dil Başvuru Kaynağı</link> bölümünü
   okumanız faydalı olacaktır. PHP kitaplarının bir listesine <link xlink:href="&url.php.books;">&url.php.books;</link>
   adresinden ulaşabilirsiniz.
   </para>
   <para>
   İkinci devreye aldığımız kavram <function>strpos</function> fonksiyonu ile yaptığımız çağrı oldu.
   <function>Strpos</function> fonksiyonu PHP içine yerleşik olan, bir karakter dizisini diğer karakter dizisinin
   içinde aramayı sağlayan bir fonksiyondur. Kendi durumumuzda biz <varname>$_SERVER[&apos;HTTP_USER_AGENT&apos;]</varname>
   (haystack - aramaya konu olan parça olarak da adlandırılır) değişkeni içersinde <literal>&apos;MSIE&apos;</literal> (needle - aranan parça olarak da adlandırılır)
   parçasını aratmaktayız. Aranan parça, aramaya konu olan parça içinde bulunursa, fonksiyon aramaya konu olan parçanın başlangıç noktasına
   göreceli olarak aranan parçanın bulunduğu noktanın yerini döndürür. Aksi durumda, &false; döndürür. &false; döndürmezse, 
   <link linkend="control-structures.if">if</link> komutunun sonucu &true; olarak değerlendirilir ve {köşeli parantezler} içindeki kod çalıştırılır.
   Aksi durumda kod çalıştırılmaz. <link linkend="control-structures.if">If</link>, <link linkend="control-structures.else">else</link> gibi
   kontrol yapılarının ve <function>strtoupper</function> ve <function>strlen</function> gibi fonksiyonların kullanarak siz kendiniz de benzer
   örnekler yaratabilirsiniz. İlgili her kılavuz sayfası aynı zamanda örnekler de içermektedir. Bu fonksiyonları nasıl kullanmanız gerektiğinden
   emin değilseniz, kılavuzdaki <link linkend="about.prototypes">bir fonksiyon tanımı nasıl okunur</link> ve <link linkend="language.functions">PHP fonksiyonları</link>
   bölümlerini okuyabilirsiniz.
   </para>
   <para>
   Bunu bir adım öteye taşıyabilir ve bir PHP bloğunun tam ortasındayken bile PHP kipine nasıl girip çıkabileceğimize bakabiliriz:
   </para>
   <para>
    <example>
     <title>HTML ve PHP kiplerini karıştırmak</title>
     <programlisting role="php">
<![CDATA[
<?php
if (strpos($_SERVER['HTTP_USER_AGENT'], 'MSIE') !== FALSE) {
?>
<h3>strpos() false olmayan bir değer döndürmelidir</h3>
<p>Internet Explorer kullanmaktasınız</p>
<?php
} else {
?>
<h3>strpos() false döndürmelidir</h3>
<p>Internet Explorer kullanmıyorsunuz</p>
<?php
}
?>
]]>
     </programlisting>
     <para>
     Bu betikten elde edilebilecek örnek sonuç:
     </para>
     <screen role="html">
<![CDATA[
<h3>strpos() false olmayan bir değer döndürmelidir</h3>
<p>Internet Explorer kullanıyorsunuz</p>
]]>
     </screen>
    </example>
   </para>
   <para>
   Bir çıktı üretmek için PHP echo komutunu kullanmak yerine, PHP kipinden
   çıktık ve sadece düz HTML gönderdik. Burada dikkat edilmesi gereken önemli
   nokta, betiğin mantıksal akışının değişmiyor olmasıdır. <function>Strpos</function>
   fonksiyonundan edinilen sonuca göre HTML bloklarından yalnızca biri görüntüleyiciye
   gönderilmektedir. Başka bir deyişle, bu işleyiş <literal>MSIE</literal> değişkeninin
   bulunup bulunmamasına bağlıdır.
   </para>
  </sect1>
   
  <sect1 xml:id="tutorial.forms">
   <title>Form Kullanımı</title>
   <para>
   PHP&apos;nin en güçlü özelliklerinden biri HTML formlarına yaklaşım biçimidir.
   Bilinmesi gereken ilk önemli durum, form içindeki tüm elemanlar PHP tarafından
   otomatik olarak kullanılabilir olacaktır. Bu konu ile ilgili kılavuzdaki
   <link linkend="language.variables.external">PHP&apos;nin dışından gelen
   değişkenler</link> bölümünü okuyabilirsiniz. Örnek bir HTML formu:
   </para>
   <para>
    <example>
     <title>Örnek bir HTML formu</title>
     <programlisting role="html">
<![CDATA[
<form action="action.php" method="post">
 <p>İsminiz: <input type="text" name="isim" /></p>
 <p>Yaşınız: <input type="text" name="yas" /></p>
 <p><input type="submit" /></p>
</form>
]]>
     </programlisting>
    </example>
   </para>
   <para>
   Bu form ile ilgili özel hiçbir şey yoktur. Hiçbir özel etiket içermeyen düz bir
   HTML formudur. Kullanıcı formu doldurup gönder tuşuna bastığında, 
   <filename>action.php</filename> sayfası çağrılır. Bu dosyaya aşağıdakileri
   yazabiliriz:
   </para>
   <para>
    <example>
     <title>Formdan veri yazdırmak</title>
     <programlisting role="php">
<![CDATA[
Merhaba <?php echo $_POST['isim']; ?>.
Siz <?php echo $_POST['yas']; ?> yaşındasınız.
]]>
     </programlisting>
     <para>
     Bu betikten elde edilecek örnek çıktı:
     </para>
     <screen role="html">
<![CDATA[
Merhaba Ahmet. Siz 22 yaşındasınız.
]]>
     </screen>
    </example>
   </para>
   <para>
   Yapılan iş oldukça açık. <varname>$_POST[&apos;isim&apos;]</varname> değişkeni
   ve <varname>$_POST[&apos;yas&apos;]</varname> değişkeni PHP tarafından otomatik
   olarak yaratıldı. Daha önce <varname>$_SERVER</varname> autoglobal
   değişkenini kullanmıştık, yukarıda <link linkend="reserved.variables.post">$_POST</link>
   autoglobal değişkenini tanımış olduk. Bu değişken POST yöntemi ile gönderilen tüm
   veriyi içermektedir. Formumuz için tanımlı <emphasis>yöntem (method)</emphasis>in
   POST olduğuna dikkat edin. <emphasis>GET</emphasis> yöntemini kullanmış olsaydık,
   form bilgilerimiz <link linkend="reserved.variables.get">$_GET</link> autoglobal
   değişkenine tanımlanmış olacaktı. Bunların haricinde, istemciden gelen verinin hangi kaynaktan
   geldiği sizin için önemli değilse <link linkend="reserved.variables.request">$_REQUEST</link>
   autoglobal değişkenini de kullanabilirsiniz. Bu değişken GET, POST ve COOKIE verilerinin
   birleşiminden oluşur. Daha fazla bilgi için <function>import_request_variables</function>
   fonksiyonunu inceleyebilirsiniz.
   </para>
   <para>
   PHP içinde XForms öğelerini de kullanabilirsiniz, ancak başlangıç aşamasında
   çok iyi desteklenen HTML formları sizin işinizi görecektir. XForms ile çalışmak yeni başlayanlar
   için uygun olmasa da, ilginizi çekebilir. <link linkend="features.xforms">XForms ile elde edilen
   verilerin işlenmesi</link> ile ilgili metinden bu konu ile ilgili daha fazla bilgiye ulaşabilirsiniz.
   </para>
  </sect1>

  <sect1 xml:id="tutorial.oldcode">
   <title>PHP&apos;nin yeni sürümleri ile eski kod yapısını kullanmak</title>
   <para>
   PHP&apos; popüler bir betik dili olmasıyla birlikte, hazır kullanabileceğiniz
   kodlar üreten birçok kamuya açık depo ve kütüphane oluşturuldu. PHP geliştiricileri
   geriye dönük uyumluluğu mümkün olduğunca korumaya çalıştılar, dolayısıyla
   eski bir PHP sürümü ile birlikte yazılmış bir PHP kodu hiçbir değişiklik yapılmasına
   gerek duyulmadan (ideal olarak) yeni PHP sürümleri ile çalışabilir halde kaldı.
   Ancak pratikte, bazı değişikliklerin yapılması gerekebilir.
    usually be needed.
   </para>
   <para>
   Eski kodları etkileyen yakın geçmişe ait iki önemli değişiklik aşağıdaki gibidir:
    <itemizedlist>
     <listitem>
      <simpara>
      Eski <varname>$HTTP_*_VARS</varname> tipi değişkenler ömürlerini
      doldurdular (bu değişkenler bir fonksiyon ya da metod içersinde kullanılmadan
      önce tanımlanmalıydılar). Takip eden 
       <link linkend="language.variables.superglobals">autoglobal dizileri</link>
       PHP&apos;nin <link xlink:href="&url.php.release4.1.0;">4.1.0</link> sürümü ile
       birlikte kullanıma açılmıştır. 
       Bunlar: <varname>$_GET</varname>, <varname>$_POST</varname>, 
       <varname>$_COOKIE</varname>, <varname>$_SERVER</varname>, 
       <varname>$_FILES</varname>, <varname>$_ENV</varname>,
       <varname>$_REQUEST</varname> ve <varname>$_SESSION</varname>
       dizileridir. Daha eski, <varname>$HTTP_POST_VARS</varname> gibi
       <varname>$HTTP_*_VARS</varname> dizileri, PHP 3&apos;teki aynı kullanım
       biçimi ile mevcutturlar.
       &avail.register-long-arrays;
      </simpara>
     </listitem>
     <listitem>
      <simpara>
      Dış değişkenler artık global kapsamda öntanımlı olarak yaratılmamaktadırlar.
      Başka bir deyişle, PHP
       <link xlink:href="&url.php.release4.2.0;">4.2.0</link> sürümü ile birlikte &php.ini;
       içersindeki bir PHP direktifi olan
       <link linkend="ini.register-globals">register_globals</link>, öntanımlı olarak
       <emphasis>off (kapalı)</emphasis>hale getirildi. Bu değerlere erişim için
       tercih edilen autoglobal dizi kullanımı yönteminden yukarıda bahsettik. Eski
       betikler, kitaplar ve eğitmenler bu direktifin açık olduğu kabul edilerek yazılmış olabilir.
       Bu direktif açık olduğunda, örneğin <literal>http://www.example.com/foo.php?id=42</literal>
       URL&apos;sinden gelen bir istek ile otomatik olarak <varname>$id</varname>
       değişkeni oluşturulur. Bu direktifin açık ya da kapalı olduğuna bakılmazsızın,
       <varname>$_GET[&apos;id&apos;]</varname> değişkeni yaratılır.
       </simpara>
     </listitem>
    </itemizedlist>
    Bu değişiklikler ile ilgili daha fazla bilgi için,
    <link linkend="language.variables.predefined">öntanımlı değişkenler</link> bölümünden
    ve buradaki diğer bağlantılardan faydalanabilirsiniz.
   </para>
  </sect1>
  
  <sect1 xml:id="tutorial.whatsnext">
   <title>Sonraki adım nedir?</title>
   <para>
   Sahip olduğunuz yeni bilgilerle kılavuzun birçok bölümünü anlayabilir
   ve örnek arşivinde bulunan birçok betiği okuyabilir hale gelmiş olmalısınız.
   <link xlink:href="&url.php.links;">&url.php.links;</link> bağlantısından
   inceleyebileceğiniz başka örneklere ulaşabilirsiniz.
   </para>
   <para>
   PHP ile neler yapabileceğiniz ile ilgili başka sunumlara ulaşmak isterseniz,
   <link xlink:href="&url.php.conf;">&url.php.conf;</link> ve
   <link xlink:href="&url.php.talks;">&url.php.talks;</link>
   adreslerindeki PHP Konferans Materyalleri Siteleri&apos;ni ziyaret edebilirsiniz.
   </para>
  </sect1>
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
