<!-- $Revision: 1.2 $ -->
 <reference id="ref.var">
  <title>De&gbreve;i&scedil;ken Fonksiyonlar&inodot;</title>
  <titleabbrev>De&gbreve;i&scedil;kenler</titleabbrev>

  <refentry id="function.doubleval">
   <refnamediv>
    <refname>doubleval</refname>
    <refpurpose>De&gbreve;i&scedil;kenin say&inodot;(numerik) de&gbreve;erini döndürür.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Tan&inodot;m</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>double <function>doubleval</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
   <parameter>var</parameter>  
   de&gbreve;i&scedil;kenin say&inodot;(numerik) de&gbreve;erini(ondal&inodot;k k&inodot;sm&inodot;da dahil) döndürür.     
    </simpara>
    <para>
     <parameter>Var</parameter>
     de&gbreve;i&scedil;keni herhangi bir skaler için kullan&inodot;labilir fakat dizi ve nesneler 
    <function>doubleval</function> fonksiyonu kulan&inodot;lamaz.  
    <informalexample>
      <programlisting role="php">
$var = '122.34343The';
$double_value_of_var = doubleval ($var);
print $double_value_of_var; // prints 122.34343
      </programlisting>
     </informalexample>
    </para>
    <simpara>
     Ayr&inodot;ca bak : <function>intval</function>,
     <function>strval</function>, <function>settype</function> ve
     <link linkend="language.types.type-juggling">Type
     juggling</link>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.empty">
   <refnamediv>
    <refname>empty</refname>
    <refpurpose>Bir de&gbreve;i&scedil;kene de&gbreve;er atan&inodot;p atanmad&inodot;&gbreve;&inodot;n&inodot; söyler.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Tan&inodot;m</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>boolean <function>empty</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <note>
     <para>
      <function>empty</function> fonksiyonu dilin yap&inodot;s&inodot;nda vard&inodot;r.
     </para>
    </note>
    <para>
     De&gbreve;i&scedil;kene de&gbreve;er atanmad&inodot;&gbreve;&inodot; zaman uyar&inodot; mesaj&inodot; üretmemesi d&inodot;&scedil;&inodot;nda   
    <literal>(boolean) <parameter>var</parameter></literal> i&scedil;leminin kar&scedil;&inodot;t&inodot;d&inodot;r.
     Daha fazla bilgi için :<link linkend="language.types.boolean.casting">converting
     to boolean</link>.
    </para>

    <!-- <parameter>Var</parameter>  de&gbreve;i&scedil;keni 0 dan farkl&inodot; veya bo&scedil; de&gbreve;ilse &false; de&gbreve;erini, 
   aksi takdirde &true; de&gbreve;erini döndürür. -->

     <informalexample>
      <programlisting role="php">
$var = 0;

if (empty($var)) {  // true de&gbreve;erini döndürür.
    echo '$var de&gbreve;i&scedil;keni 0 veya de&gbreve;er atanmam&inodot;&scedil;.';
}

if (!isset($var)) { // false de&gbreve;erini döndürür.
    echo '$var de&gbreve;i&scedil;kenine de&gbreve;er atanmam&inodot;&scedil;.';
}
      </programlisting>
     </informalexample>

    <simpara>
     Bu komuta parametre olarak de&gbreve;i&scedil;ken olmayan (funct&inodot;on) bir &scedil;ey gönderilirse 
    hata mesaj&inodot; ile kar&scedil;&inodot;la&scedil;&inodot;l&inodot;r. örn :<command>empty (addslashes ($name))</command> 
   i&scedil;lemi sonucunda hata ile kar&scedil;&inodot;la&scedil;&inodot;l&inodot;r.
     <!-- will even result in parse error (at least in PHP 4) -->
    </simpara>
    <simpara>
     Ayr&inodot;ca bak :<function>isset</function> ve
     <function>unset</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.gettype">
   <refnamediv>
    <refname>gettype</refname>
    <refpurpose>De&gbreve;i&scedil;kenin tipini döndürür.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Tan&inodot;m</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>gettype</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
    <parameter>Var</parameter> PHP de&gbreve;i&scedil;keninin tipini döndürür.
    </para>
    <warning>
     <simpara>
   <function>gettype</function>  fonksiyonunu kesin de&gbreve;i&scedil;ken tipleri için asla kullanma.
      Çünkü gelecek sürümlerde bu fonksiyonun döndürece&gbreve;i karakter katarlar&inodot; de&gbreve;i&scedil;mi&scedil; olabilir.
 Art&inodot; olarak gettype fonksiyonundan sonra karakter kar&scedil;&inodot;la&scedil;t&inodot;rmalar&inodot; da yap&inodot;laca&gbreve;&inodot; için yava&scedil;l&inodot;&gbreve;a yol açar.
<!--
      Sözlü&gbreve;üm neredeee? -->.
     </simpara>
     <simpara>
      Bunun yerine  <literal>is_*</literal> fonksiyonlar&inodot;n&inodot; kullan.
     </simpara>
    </warning>
    <para>
     Gettype fonksiyonu sonucu elde edilebilecek muhtemel stringler &scedil;unlard&inodot;r: 
     <itemizedlist>
      <listitem>
       <simpara>"<type>boolean</type>" (since PHP 4)</simpara>
      </listitem>
      <listitem>
       <simpara>"<type>integer</type>"</simpara>
      </listitem>
      <listitem>
       <simpara>"<type>double</type>"</simpara>
      </listitem>
      <listitem>
       <simpara>"<type>string</type>"</simpara>
      </listitem>
      <listitem>
       <simpara>"<type>array</type>"</simpara>
      </listitem>
      <listitem>
       <simpara>"<type>object</type>"</simpara>
      </listitem>
      <listitem>
       <simpara>"<type>resource</type>" (since PHP 4)</simpara>
      </listitem>
      <listitem>
       <simpara>"<type>null</type>" (since PHP 4)</simpara>
      </listitem>
      <listitem>
       <simpara>"user function" (PHP3 için sadece)</simpara>
      </listitem>
      <listitem>
       <simpara>"unknown type"<!-- someone's joking? --></simpara>
      </listitem>
     </itemizedlist>
    </para>
    <para>
    <function>gettype</function> ile bir fonksiyon kontrol edece&gbreve;ine, php 4 için  <function>function_exists</function> ve <function>method_exists</function> komutlar&inodot;n&inodot; kullanabilirsin.  
    </para>
    <para>
     Ayr&inodot;ca bak :
     <function>settype</function>,
     <function>is_array</function>,
     <function>is_bool</function>,
     <function>is_double</function>,
     <function>is_integer</function>,
     <function>is_null</function>,
     <function>is_numeric</function>,
     <function>is_object</function>,
     <function>is_resource</function>,
     <function>is_scalar</function> ve
     <function>is_string</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.get-defined-vars">
   <refnamediv>
    <refname>get_defined_vars</refname>
    <refpurpose>
    Bütün tan&inodot;ml&inodot; de&gbreve;i&scedil;kenleri dizi halinde döndürür.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Tan&inodot;m</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>get_defined_vars</function></funcdef>
      <void/>
     </funcprototype>
    </funcsynopsis>
    <para>
   Bu fonksiyon bütün tan&inodot;ml&inodot; de&gbreve;i&scedil;kenlerin (ki bu de&gbreve;i&scedil;kenler çevresel de&gbreve;i&scedil;kenler,
  server de&gbreve;i&scedil;kenleri,kullan&inodot;c&inodot; taraf&inodot;ndan tan&inodot;mlanm&inodot;&scedil; de&gbreve;i&scedil;kenler olabilir.) listesini içeren çok boyutlu bir dizi döndürür. 
     <informalexample>
      <programlisting role="php">
$b = array(1,1,2,3,5,8);

$arr = get_defined_vars();

// print $b
print_r($arr["b"]);
// Ekrana yaz&inodot;lan :
// Array ( [0] => 1 [1] => 1 [2] => 2 [3] => 3 [4] => 5 [5] => 8 ) 


// PHP yorumlay&inodot;c&inodot;s&inodot;n&inodot;n path ini ekrana basar(tabii e&gbreve;er CG&Idot; olarak çal&inodot;&scedil;&inodot;yorsa)
// örn :  /usr/local/bin/php
echo $arr["_"];

// E&gbreve;er varsa komut sat&inodot;r&inodot;ndan aktar&inodot;lan parametreyi ekrana basar.
print_r($arr["argv"]);

// Bütün server de&gbreve;i&scedil;kenlerini ekrana basar.
print_r($arr["HTTP_SERVER_VARS"]);

// de&gbreve;i&scedil;kenlerden olu&scedil;an dizinin bütün anahtar(key) lar&inodot;n&inodot; ekrana basar.
print_r(array_keys(get_defined_vars()));
      </programlisting>
     </informalexample>
    </para>
    <para>
     Ayr&inodot;ca bak :<function>get_defined_functions</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.get-resource-type">
   <refnamediv>
    <refname>get_resource_type</refname>
    <refpurpose>
    De&gbreve;i&scedil;kenin kaynak tipini döndürür.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Tan&inodot;m</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>get_resource_type</function></funcdef>
      <paramdef>resource <parameter>$handle</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
    Bu fonksiyon parametre olarak kendisine verilen de&gbreve;i&scedil;kenin kaynak(<type>resource</type>) 
    tipini döndürür.E&gbreve;er kendisine     verilen parametre de&gbreve;i&scedil;keninin bir kaynak tipi yoksa hata mesaj&inodot; verir.    
  
     <informalexample>
      <programlisting role="php">
$c = mysql_connect();
echo get_resource_type($c)."\n";
// Ekrana yaz&inodot;lan : mysql link

$fp = fopen("foo","w");
echo get_resource_type($fp)."\n";
// Ekrana yaz&inodot;lan : file

$doc = new_xmldoc("1.0");
echo get_resource_type($doc->doc)."\n";
// Ekrana yaz&inodot;lan : domxml document
      </programlisting>
     </informalexample>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.intval">
   <refnamediv>
    <refname>intval</refname>
    <refpurpose>Bir de&gbreve;i&scedil;kenin tamsay&inodot; de&gbreve;erini  döndürür.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Tan&inodot;m</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>intval</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
      <paramdef>int
       <parameter><optional>base</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
    Belirtilen tabana göre(normal olarak 10)  <parameter>var</parameter> 
   de&gbreve;i&scedil;keninin de&gbreve;erinin tamsay&inodot; k&inodot;sm&inodot;n&inodot; döndürür.
    </simpara>
    <simpara>
     <parameter>var</parameter> de&gbreve;i&scedil;keni herhangi bir skaler tipte olabilir. 
    <function>intval</function>     fonksiyonunu diziler ve nesneler üzerinde kullanamazs&inodot;n.
    </simpara>
<note>
    <para>
      Bu fonksiyon ile sisteminizde tamsay&inodot; için ayr&inodot;lan büyüklüklerin üzerinde bir say&inodot; ile çal&inodot;&scedil;&inodot;rsan&inodot;z           
   <function>intval</function> fonksiyonu tamsay&inodot; için ayr&inodot;lan en yüksek de&gbreve;eri döndürür.
    </para>
</note>   

 <note>
     <para>
      <function>intval</function> fonksiyonu için <parameter>base</parameter> parametresi,          
    <parameter>var</parameter> de&gbreve;i&scedil;keni bir string(karakter katar&inodot;) olmad&inodot;kça, herhangi bir i&scedil;leve sahip de&gbreve;ildir.
     </para>
    </note>
    <simpara>
     Ayr&inodot;ca bak :<function>doubleval</function>,
     <function>strval</function>, <function>settype</function> ve
     <link linkend="language.types.type-juggling">Type
     juggling</link>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.is-array">
   <refnamediv>
    <refname>is_array</refname>
    <refpurpose>Bir de&gbreve;i&scedil;kenin dizi olup olmad&inodot;&gbreve;&inodot;na karar verir.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Tan&inodot;m</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>is_array</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     E&gbreve;er  <parameter>var</parameter> de&gbreve;i&scedil;keni bir dizi(array) ise &true; de&gbreve;erini de&gbreve;ilse  &false;
     de&gbreve;erini döndürür.
    </para>
    <para>
     Ayr&inodot;ca bak :<function>is_double</function>,
     <function>is_float</function>,
     <function>is_int</function>,
     <function>is_integer</function>,
     <function>is_real</function>,
     <function>is_string</function>,
     <function>is_long</function>, ve
     <function>is_object</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-bool">
   <refnamediv>
    <refname>is_bool</refname>
     <refpurpose>
     Bir de&gbreve;i&scedil;kenin boolean(mant&inodot;ksal de&gbreve;er) olup olmad&inodot;&gbreve;&inodot;na karar verir. 
     </refpurpose>
    </refnamediv>
    <refsect1>
     <title>Tan&inodot;m</title>
     <funcsynopsis>
     <funcprototype>
       <funcdef>bool
        <function>is_bool</function>
       </funcdef>
       <paramdef>mixed
        <parameter>var</parameter>
       </paramdef>
     </funcprototype>
     </funcsynopsis>
     <para>
      E&gbreve;er  <parameter>var</parameter> de&gbreve;i&scedil;keni  <type>boolean</type> bir de&gbreve;ere sahipse &true; . de&gbreve;ilse &false; de&gbreve;erini döndürür.
     </para>
     <para>
     Ayr&inodot;ca bak : <function>is_array</function>,
     <function>is_double</function>,
     <function>is_float</function>,
     <function>is_int</function>,
     <function>is_integer</function>,
     <function>is_real</function>,
     <function>is_string</function>,
     <function>is_long</function>, ve
     <function>is_object</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-double">
   <refnamediv>
    <refname>is_double</refname>
    <refpurpose>Bir de&gbreve;i&scedil;kenin reel say&inodot; olup olmad&inodot;&gbreve;&inodot;n&inodot; bulur. </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Tan&inodot;m</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>is_double</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
   <parameter>Var</parameter> parametresi reel say&inodot;(<type>double</type>) ise &true; , de&gbreve;ilse &false; de&gbreve;erini döndürür. 
    </para>
    <para>
     Ayr&inodot;ca bak : <function>is_array</function>,
     <function>is_bool</function>,
     <function>is_float</function>,
     <function>is_int</function>,
     <function>is_integer</function>,
     <function>is_real</function>,
     <function>is_string</function>,
     <function>is_long</function>, ve
     <function>is_object</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-float">
   <refnamediv>
    <refname>is_float</refname>
    <refpurpose>De&gbreve;i&scedil;kenin ondal&inodot;k say&inodot; içerip içermedi&gbreve;ini bulur</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Tan&inodot;m</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>is_float</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Bu fonksiyon  <function>is_double</function> fonksiyonu ile benzer i&scedil;leve sahiptir.
    </simpara>
    <simpara>
    Ayr&inodot;ca bak :<function>is_double</function>,
     <function>is_bool</function>,
     <function>is_real</function>,
     <function>is_int</function>,
     <function>is_integer</function>,
     <function>is_string</function>,
     <function>is_object</function>,
     <function>is_array</function>, ve
     <function>is_long</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.is-int">
   <refnamediv>
    <refname>is_int</refname>
    <refpurpose>De&gbreve;i&scedil;kenin tamsay&inodot; olup olmad&inodot;&gbreve;&inodot;n&inodot; bulur. </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Tan&inodot;m</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>is_int</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Bu fonksiyon  <function>is_long</function> fonksiyonu ile benzer i&scedil;leve sahiptir.
    </simpara>
    <simpara>
     Ayr&inodot;ca bak :<function>is_bool</function>,
     <function>is_double</function>,
     <function>is_float</function>,
     <function>is_integer</function>,
     <function>is_string</function>,
     <function>is_real</function>,
     <function>is_object</function>,
     <function>is_array</function>, ve
     <function>is_long</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.is-integer">
   <refnamediv>
    <refname>is_integer</refname>
    <refpurpose>De&gbreve;i&scedil;kenin tamsay&inodot; olup olmad&inodot;&gbreve;&inodot;n&inodot; bulur</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Tan&inodot;m</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>is_integer</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
      Bu fonksiyon  <function>is_long</function> fonksiyonu ile benzer i&scedil;leve sahiptir.
    </simpara>
    <simpara>
     Ayr&inodot;ca bak : <function>is_bool</function>,
     <function>is_double</function>,
     <function>is_float</function>,
     <function>is_int</function>,
     <function>is_string</function>,
     <function>is_real</function>,
     <function>is_object</function>,
     <function>is_array</function>, ve
     <function>is_long</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.is-long">
   <refnamediv>
    <refname>is_long</refname>
    <refpurpose>De&gbreve;i&scedil;kenin tamsay&inodot; olup olmad&inodot;&gbreve;&inodot;n&inodot; bulur</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Tan&inodot;m</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>is_long</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <parameter>var</parameter> de&gbreve;i&scedil;keni tamsay&inodot; ise &true; , de&gbreve;ilse &false; de&gbreve;erini döndürür.
    </para>
    <para>
     Ayr&inodot;ca bak :<function>is_bool</function>,
     <function>is_double</function>,
     <function>is_float</function>,
     <function>is_int</function>,
     <function>is_real</function>,
     <function>is_string</function>,
     <function>is_object</function>,
     <function>is_array</function>, ve
     <function>is_integer</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-null">
   <refnamediv>
    <refname>is_null</refname>
    <refpurpose>
     Bir de&gbreve;i&scedil;kenin de&gbreve;erinin bo&scedil;(&null;) olup olmad&inodot;&gbreve;&inodot;na bakar. 	
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Tan&inodot;m</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>is_null</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <parameter>var</parameter> de&gbreve;i&scedil;keninin de&gbreve;eri <type>null</type> ise &true; de&gbreve;ilse &false; 
      de&gbreve;erini döndürür.
    </para>
    <para>
     Ayr&inodot;ca bak : <function>is_bool</function>,
     <function>is_double</function>,
     <function>is_numeric</function>,
     <function>is_float</function>,
     <function>is_int</function>,
     <function>is_real</function>,
     <function>is_string</function>,
     <function>is_object</function>,
     <function>is_array</function>, ve
     <function>is_integer</function>.
    </para>
   </refsect1>
  </refentry>


  <refentry id="function.is-numeric">
   <refnamediv>
    <refname>is_numeric</refname>
    <refpurpose>
     De&gbreve;i&scedil;kenin numerik veya numeric string olup olmad&inodot;&gbreve;&inodot;na karar verir
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Tan&inodot;m</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>is_numeric</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
      <parameter>var</parameter> de&gbreve;i&scedil;keni numerik veya  numerik bir string (karakter katar&inodot;) ise &true;
de&gbreve;ilse &false; de&gbreve;erini döndürür.
    </para>
    <para>
     Ayr&inodot;ca bak : <function>is_bool</function>,
     <function>is_double</function>,
     <function>is_float</function>,
     <function>is_int</function>,
     <function>is_real</function>,
     <function>is_string</function>,
     <function>is_object</function>,
     <function>is_array</function>, ve
     <function>is_integer</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-object">
   <refnamediv>
    <refname>is_object</refname>
    <refpurpose>Verilen de&gbreve;i&scedil;kenin bir nesne(object) olup olmad&inodot;&gbreve;&inodot;n&inodot; bulur.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Tan&inodot;m</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>is_object</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <parameter>var</parameter> de&gbreve;i&scedil;keni bir nesne( <type>object</type>) ise &true; de&gbreve;ilse &false;      de&gbreve;erini döndürür.
   </para>
    <para>
     Ayr&inodot;ca bak : <function>is_bool</function>,
     <function>is_long</function>,
     <function>is_int</function>,
     <function>is_integer</function>,
     <function>is_float</function>,
     <function>is_double</function>,
     <function>is_real</function>,
     <function>is_string</function>, ve
     <function>is_array</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-real">
   <refnamediv>
    <refname>is_real</refname>
    <refpurpose>Verilen de&gbreve;i&scedil;kenin reel say&inodot; olup olmad&inodot;&gbreve;&inodot;n&inodot; bulur.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Tan&inodot;m</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>is_real</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Bu fonksiyon  <function>is_double</function> fonksiyonu ile benzer bir i&scedil;leve sahiptir.
    </simpara>
    <simpara>
     Ayr&inodot;ca bak :<function>is_bool</function>,
     <function>is_long</function>,
     <function>is_int</function>,
     <function>is_integer</function>,
     <function>is_float</function>,
     <function>is_double</function>,
     <function>is_object</function>,
     <function>is_string</function>, ve
     <function>is_array</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.is-resource">
   <refnamediv>
    <refname>is_resource</refname>
    <refpurpose>
     Verilen de&gbreve;i&scedil;kenin bir göstergeç olup olmad&inodot;&gbreve;&inodot;n&inodot; bulur. 
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Tan&inodot;m</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool
       <function>is_resource</function>
      </funcdef>
      <paramdef>mixed
       <parameter>var</parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>is_resource</function> fonksiyonu e&gbreve;er verilen <parameter>var</parameter> parametresi bir göstergeç(<type>resource</type>) ise &true; de&gbreve;ilse &false; de&gbreve;erini döndürür.
    </para>
<para>
Daha fazla bilgi için <type>resource</type>-type doküman&inodot;na bak&inodot;n&inodot;z.
</para>
   </refsect1>
  </refentry>

  <refentry id="function.is-scalar">
   <refnamediv>
    <refname>is_scalar</refname>
    <refpurpose>
     Verilen de&gbreve;i&scedil;kenin skaler olup olmad&inodot;&gbreve;&inodot;n&inodot; bulur.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Tan&inodot;m</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool
       <function>is_scalar</function>
      </funcdef>
      <paramdef>mixed
       <parameter>var</parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>is_scalar</function> fonksiyonu verilen <parameter>var</parameter> parametresi bir skaler ise &true; de&gbreve;ilse &false; de&gbreve;erini döndürür.
    </para>
    <para>
     Scalar de&gbreve;i&scedil;kenler  <type>integer</type>, <type>float</type>, <type>string</type> veya  
    <type>boolean</type> tipte olabilirler.Diziler(array)  skaler de&gbreve;ildir.  
	 For example:
     <informalexample>
      <programlisting role="php">
<!-- TODO: better example, this one can be quite misleading for unexperienced
           programmers -->
function show_var($var) {
    if (is_scalar($var))
        echo $var;
    else
        var_dump($var);
}

$pi = 3.1416;
$proteins = array("hemoglobin", "cytochrome c oxidase", "ferredoxin");

show_var($pi);
// prints: 3.1416

show_var($proteins)
// prints:
// array(3) {
//   [0]=>
//   string(10) "hemoglobin"
//   [1]=>
//   string(20) "cytochrome c oxidase"
//   [2]=>
//   string(10) "ferredoxin"
// }
      </programlisting>
     </informalexample>
    </para>
    <note>
     <para>
      <function>is_scalar</function> does not consider <type>resource</type>
      type values to be scalar values. This behavior is intentional:
      Resources are abstract datatypes which are currently based on
      integers. This implementation detail should not be relied upon,
      as it may change.
     </para>
    </note>
    <note>
     <para>
	  Since 4.0.5
     </para>
    </note>
    <para>
     Ayr&inodot;ca bak : <function>is_bool</function>,
     <function>is_double</function>,
     <function>is_numeric</function>,
     <function>is_float</function>,
     <function>is_int</function>,
     <function>is_real</function>,
     <function>is_string</function>,
     <function>is_object</function>,
     <function>is_array</function>, ve
     <function>is_integer</function>.
    </para>
   </refsect1>
  </refentry>


  <refentry id="function.is-string">
   <refnamediv>
    <refname>is_string</refname>
    <refpurpose>Verilen de&gbreve;i&scedil;kenin string olup olmad&inodot;&gbreve;&inodot;n&inodot; bulur. </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Tan&inodot;m</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>is_string</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
    <parameter>var</parameter> de&gbreve;i&scedil;keni bir karakter katar&inodot;(<type>string</type>) ise &true; de&gbreve;erini      
     de&gbreve;ilse &false; de&gbreve;erini döndürür.
    </para>
    <para>
     Ayr&inodot;ca bak : <function>is_bool</function>,
     <function>is_long</function>,
     <function>is_int</function>,
     <function>is_integer</function>,
     <function>is_float</function>,
     <function>is_double</function>,
     <function>is_real</function>,
     <function>is_object</function>, ve
     <function>is_array</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.isset">
   <refnamediv>
    <refname>isset</refname>
    <refpurpose>De&gbreve;i&scedil;kene bir de&gbreve;er atan&inodot;p atanmad&inodot;&gbreve;&inodot;n&inodot; kontrol eder.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Tan&inodot;m</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>boolean <function>isset</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     <parameter>var</parameter> de&gbreve;i&scedil;keni mevcut ise &true; de&gbreve;ilse &false; de&gbreve;erini döndürür.
   </simpara>
    <para>
   <function>unset</function> fonksiyonu ile bir de&gbreve;i&scedil;ken içeri&gbreve;i silinirse,
  <function>isset</function> fonksiyonu false de&gbreve;eri üretir.. 
     <informalexample>
      <programlisting role="php">
$a = "test";
echo isset ($a); // TRUE

unset ($a);
echo isset ($a); // FALSE

$foo = NULL;
print isset ($foo); // FALSE
      </programlisting>
     </informalexample>
    </para>
    <simpara>
     Ayr&inodot;ca bak  : <function>empty</function> and
     <function>unset</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.print-r">
   <refnamediv>
    <refname>print_r</refname>
    <refpurpose>
     Bir de&gbreve;i&scedil;keni ekrana kolay anla&scedil;&inodot;l&inodot;r halde basar.(Dizi ve Nesneler için) 
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Tan&inodot;m</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>print_r</function></funcdef>
      <paramdef>mixed <parameter>expression</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Bu fonksiyon de&gbreve;i&scedil;kenlerin de&gbreve;erleri hakk&inodot;nda ekrana bilgi basar.Bu bilgiyi kolay okunur 
    bir &scedil;ekilde ekrana basar.E&gbreve;er verilen de&gbreve;i&scedil;ken bir <type>string</type>,<type>integer</type>,
   <type>double</type>ise de&gbreve;i&scedil;kenin de&gbreve;eri aynen ekrana bas&inodot;lacakt&inodot;r.
   E&gbreve;er verilen de&gbreve;i&scedil;ken bir dizi(<type>array</type> ) ise , bu dizi ekrana anahtar - de&gbreve;er  format&inodot;nda bas&inodot;lacakt&inodot;r.
   Benzer bir notasyon nesneler(<type>objects</type>) ler içinde geçerlidir
    </simpara>
    <simpara>
      <function>print_r</function> fonksiyonu dizi(array) pointerini sona ta&scedil;&inodot;r.
      Bu pointer i tekrar ba&scedil;a almak için  <function>reset</function> fonksiyonu kullan&inodot;l&inodot;r.
      </simpara>
	&tip.ob-capture;
    <simpara>
     <function>print_r</function> fonksiyonunu 
     <function>var_dump</function> fonksiyonu ile kar&scedil;&inodot;la&scedil;t&inodot;r..
    </simpara>
    <para>
     <informalexample>
      <programlisting role="php">
&lt;?php
$a = array (1, 2, array ("a", "b", "c"));
print_r ($a);
?>
      </programlisting>
     </informalexample>
    </para>
    <warning>
     <para>
      Bu fonksiyon parametre olarak verilen array veya object direk veya dolayl&inodot; olarak kendisini gösteriyorsa daima çal&inodot;&scedil;&inodot;r.
     </para>
    </warning>
   </refsect1>
  </refentry>

  <refentry id="function.serialize">
   <refnamediv>
    <refname>serialize</refname>
    <refpurpose>
     De&gbreve;i&scedil;kenin türü,uzunlu&gbreve;uve de&gbreve;erini içeren bir string döndürür.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Tan&inodot;m</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>serialize</function></funcdef>
      <paramdef>mixed <parameter>value</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     <function>serialize</function> fonksiyonu de&gbreve;i&scedil;kenin türü,uzunlu&gbreve;u ve de&gbreve;erini 
    içeren ve istenilen yerde saklanabilecek bir string döndürür.
    </simpara>
    <simpara>
    Bu fonksiyon ile de&gbreve;i&scedil;kenler depolan&inodot;rken veya sayfalardan döndürülürken yap&inodot;lar&inodot;n&inodot; ve tiplerini
    kaybetmezler.
    </simpara>
   <simpara>
    <function>serialize</function> fonksiyonu ile elde edilen stringden tekrar 
     eski de&gbreve;i&scedil;keni olu&scedil;turmak için <function>unserialize</function> fonksiyonu kullan&inodot;l&inodot;r. 
    <function>serialize</function> fonksiyonu <type>resource</type>-tip hariç bütün tipler 
   üzerinde çal&inodot;&scedil;&inodot;r. <function>serialize</function> fonksiyonunu kendini referans olarak gösteren dizi ve nesneler içinde    kullanabilirsin.<function>serialize</function> etti&gbreve;in dizi ve nesnelerin içindeki referanslar saklanacakt&inodot;r.
   </simpara>
			<!-- TODO
								in 4.0.4pl1 this didn't work properly, however, there
								been some fixes. &Idot; don't know whether this all
								works correctly now, and if so, whether it is since 405
								or 406
			<note>
				<simpara>
					This didn't work correctly until 4.0.?
				</simpara>
			</note>
   </simpara>
			-->
   <note>
    <para>
     PHP 3 te  nesne özellikleri(object properties) serialize edilebiliyordu fakat metodlar kayboluyordu.
     PHP 4 bu s&inodot;n&inodot;rlamay&inodot; kald&inodot;rd&inodot; ve hem nesne özellikleri hemde metodlar&inodot; korunabiliyor. 
     Lütfen daha fazla bilgi için : <link linkend="language.oop.serialization">Serializing Objects</link>
     section of <link linkend="language.oop">Classes and
     Objects</link> 
    </para>
   </note>
    <para>
     <example>
      <title><function>serialize</function> örne&gbreve;i</title>
      <programlisting role="php">
// $session_data , Oturumdaki kullan&inodot;c&inodot; için session bilgisinin 
// içinde bulundu&gbreve;u çok boyutlu bir dizi içerir. Web sunucusundan 
// yap&inodot;lan iste&gbreve;in sonunda veritaban&inodot;nda onu saklamak için serialize()  kullan&inodot;l&inodot;r.

$conn = odbc_connect ("veritaban&inodot;", "phptr", "potpass");
$stmt = odbc_prepare ($conn,
      "UPDATE sessions SET data = ? WHERE id = ?");
$sqldata = array (serialize($session_data), $PHP_AUTH_USER);
if (!odbc_execute ($stmt, &amp;$sqldata)) {
    $stmt = odbc_prepare($conn,
     "&Idot;NSERT &Idot;NTO sessions (id, data) VALUES(?, ?)");
    if (!odbc_execute($stmt, &amp;$sqldata)) {
    /* Bir&scedil;eyler yanl&inodot;&scedil; gitti. S&inodot;zlan bakal&inodot;m. */
    }
}
      </programlisting>
     </example>
    </para>
   <para>
    Ayr&inodot;ca bak : <function>unserialize</function>.
   </para>
   </refsect1>
  </refentry>

  <refentry id="function.settype">
   <refnamediv>
    <refname>settype</refname>
    <refpurpose>De&gbreve;i&scedil;ken tipini verilen tipe çevirir</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Tan&inodot;m</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>boolean <function>settype</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
      <paramdef>string <parameter>type</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <parameter>var</parameter> de&gbreve;i&scedil;keninin tipini verilen <parameter>tipe</parameter> çevirir.
    </para>
    <para>
      <parameter>type</parameter> parametresinin olas&inodot; de&gbreve;erleri :
     <itemizedlist>
      <listitem><simpara>"boolean"</simpara></listitem>
      <listitem><simpara>"integer"</simpara></listitem>
      <listitem><simpara>"double"</simpara></listitem>
      <listitem><simpara>"string"</simpara></listitem>
      <listitem><simpara>"array"</simpara></listitem>
      <listitem><simpara>"object"</simpara></listitem>
     </itemizedlist>
    </para>
    <para>
     Ba&scedil;ar&inodot; durumunda  &true; hata durumunda &false; döndürür.
    </para>
    <para>
     <example>
      <title><function>settype</function> örne&gbreve;i</title>
      <programlisting role="php">
$foo = "5bar"; // string
$bar = true;   // boolean

settype($foo, "integer"); // $foo &scedil;imdi 5   (tamsay&inodot;(integer))
settype($bar, "string");  // $bar &scedil;imdi "1" (string)
      </programlisting>
     </example>
    </para>
    <para>
     Ayr&inodot;ca bak <function>gettype</function>,
     <link linkend="language.types.typecasting">type-casting</link> ve
     <link linkend="language.types.type-juggling">type-juggling</link>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.strval">
   <refnamediv>
    <refname>strval</refname>
    <refpurpose>Bir de&gbreve;i&scedil;kenin string de&gbreve;erini döndürür.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Tan&inodot;m</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>strval</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
    <parameter>var</parameter> parametresinin <type>string</type> de&gbreve;erini döndürür.
   <type>string</type> e çevirme hakk&inodot;nda daha fazla bilgiye ula&scedil;mak için dokümantasyona bak.     
</simpara>
    <simpara>
     <parameter>var</parameter> parametresi herhangi bir skaler tipte olabilir. 
    <function>strval</function> fonksiyonunu diziler ve nesneler üzerinde kullanamazs&inodot;n.
    </simpara>
    <simpara>
     Ayr&inodot;ca bak <function>doubleval</function>,
     <function>intval</function>, <function>settype</function> ve
     <link linkend="language.types.type-juggling">Type
     juggling</link>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.unserialize">
   <refnamediv>
    <refname>unserialize</refname>
    <refpurpose>
     Saklanmak amaçl&inodot; serialize() fonksiyonu ile elde edilen stringi eski de&gbreve;erine çevirmek için kullan&inodot;l&inodot;r.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Tan&inodot;m</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>unserialize</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
   
  <function>unserialize</function> serialize edilmi&scedil; tek bir de&gbreve;i&scedil;keni al&inodot;r 
(<function>serialize</function> a bak) ve onu eski de&gbreve;erine çevirir.  Çevrilen 
de&gbreve;er döndürülür; bu de&gbreve;er  
  <type>integer</type>, <type>double</type>,
     <type>string</type>, <type>array</type> veya <type>object</type> tiplerinden 
biri olabilir. E&gbreve;er bir nesne serialize fonksiyonuna tabi tutulmu&scedil;sa döndürülen 
de&gbreve;erde nesnenin özellikleri yer almaz. 
    </simpara>
   <note>
    <para>
    PHP 3'te bir nesne serialize edilmi&scedil;se bunu unserialize etti&gbreve;imizde nesnenin 
    metodlar&inodot; korunmaz. PHP 4 bu s&inodot;n&inodot;rlamay&inodot; kald&inodot;r&inodot;r ve nesnenin hem metodlar&inodot;n&inodot; hem de özelliklerini korur. 

    Daha fazla bilgi için  <link linkend="language.oop">Classes and
     Objects</link> k&inodot;sm&inodot;ndaki <link
     linkend="language.oop.serialization">Serializing Objects</link>
     ba&scedil;l&inodot;&gbreve;&inodot;na bak&inodot;n&inodot;z. 
    </para>
   </note>
    <para>
     <example>
      <title><function>unserialize</function> örne&gbreve;i</title>
      <programlisting role="php">
// Burada, $session_data de&gbreve;i&scedil;keninin içine, bir veritaban&inodot;ndan 
// al&inodot;nan session bilgisini yüklemek için unserialize() fonksiyonunu kullan&inodot;r&inodot;z.
// Bu örnek, <function>serialize</function> k&inodot;sm&inodot;ndaki örne&gbreve;in tamamlay&inodot;c&inodot;s&inodot;d&inodot;r. 


$conn = odbc_connect ("veritaban&inodot;", "phptr", "potpass");
$stmt = odbc_prepare ($conn, "SELECT data FROM sessions WHERE id = ?");
$sqldata = array ($PHP_AUTH_USER);
if (!odbc_execute ($stmt, &amp;$sqldata) || !odbc_fetch_into ($stmt, &amp;$tmp)) {
    // i&scedil;lem ba&scedil;ar&inodot;s&inodot;z olursa, bo&scedil; bir dizi ba&scedil;lat&inodot;l&inodot;r. 

    $session_data = array();
} else {
    // &Scedil;imdi $tmp[0] de&gbreve;i&scedil;keninde serialize edilmi&scedil; veri var.
    $session_data = unserialize ($tmp[0]);
    if (!is_array ($session_data)) {
    // hata oldu, bo&scedil; bir dizi ba&scedil;lat
    $session_data = array();
    }
}
      </programlisting>
     </example>
    </para>
   <para>
    Ayr&inodot;ca bak <function>serialize</function>.
   </para>
   </refsect1>
  </refentry>

  <refentry id="function.unset">
   <refnamediv>
    <refname>unset</refname>
    <refpurpose>De&gbreve;i&scedil;kenin içindeki de&gbreve;eri yok eder</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Tan&inodot;m</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>unset</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
      <paramdef>mixed <parameter><optional>var</optional></parameter></paramdef>
      <paramdef><parameter><optional>...</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>unset</function>
   <function>unset</function> belirtilen de&gbreve;i&scedil;kenin içeri&gbreve;ini yok eder. PHP 3 te, 
   unset() fonksiyonu daima &true; de&gbreve;erini (asl&inodot;nda tam olarak 1 tamsay&inodot;s&inodot;n&inodot;) 
   döndürürken,.PHP 4 de unset() art&inodot;k bir true fonksiyonu de&gbreve;il bir ifade(statement) dir. 
   Dönen bir de&gbreve;er olmazsa ve <function>unset</function> fonksiyonu sonucundaki 
   de&gbreve;er al&inodot;nmak istenirse -parse error- hatas&inodot; olu&scedil;ur. 

    </para>
    <para>
     <example>
      <title><function>unset</function> örne&gbreve;i</title>
      <programlisting role="php">
// tek bir de&gbreve;eri yok eder.
unset ($foo);

// bir dizinin tek bir eleman&inodot;n&inodot; yok eder.
unset ($bar['quux']);

// birden fazla de&gbreve;i&scedil;kenin de&gbreve;erini yok eder. 
unset ($foo1, $foo2, $foo3);
      </programlisting>
     </example>
    </para>
    <para>
<function>unset</function> fonksiyonunun ba&scedil;ka bir fonksiyon içindeki davran&inodot;&scedil;&inodot;, 
yok etmek istedi&gbreve;imiz de&gbreve;i&scedil;kenin türüne de ba&gbreve;l&inodot;d&inodot;r. 
    </para>
    <para>
  Global olarak tan&inodot;mlanm&inodot;&scedil; bir de&gbreve;i&scedil;keni unset() fonksiyonuyla yok etmek istedi&gbreve;imizde 
  bu de&gbreve;i&scedil;kenin içindeki de&gbreve;er kaybolmaz.Çünkü unset()   fonksiyonuyla sadece lokal de&gbreve;i&scedil;kenler 
  yok edilebilir. Global de&gbreve;i&scedil;kenin de&gbreve;eri <function>unset</function> fonksiyonu 
  ça&gbreve;&inodot;r&inodot;lmadan önceki de&gbreve;erini koruyacakt&inodot;r. 
     <informalexample>
      <programlisting role="php">
function destroy_foo() {
    global $foo;
    unset($foo);
}

$foo = 'bar';
destroy_foo();
echo $foo;
      </programlisting>
     </informalexample>
     Yukar&inodot;daki örne&gbreve;in ç&inodot;kt&inodot;s&inodot; &scedil;öyle olur:
     <informalexample>
      <programlisting>
bar
      </programlisting>
     </informalexample>
    </para>
    <para>

     Bir de&gbreve;i&scedil;ken referans ile aktar&inodot;lm&inodot;&scedil;sa bir fonksiyonun içinde <function>unset</function>
     i&scedil;lemine tabi tutulmu&scedil;sa yaln&inodot;zca lokal de&gbreve;i&scedil;kenlerin de&gbreve;eri yok edilir. 
     Referans olan de&gbreve;i&scedil;kenin de&gbreve;eri ayn&inodot; kal&inodot;r. 
     <informalexample>
      <programlisting role="php">
function foo(&amp;$bar) {
    unset($bar);
    $bar = "falan";
}

$bar = 'pot';
echo "$bar\n";

foo($bar);
echo "$bar\n";
      </programlisting>
     </informalexample>
     Yukar&inodot;daki örne&gbreve;in ç&inodot;kt&inodot;s&inodot; &scedil;öyle olur:
     <informalexample>
      <programlisting>
pot
pot
      </programlisting>
     </informalexample>
    </para>
    <para>
     Statik bir de&gbreve;i&scedil;ken, bir fonksiyonun içerisinde <function>unset</function> edilirse, 
    <function>unset</function> fonksiyonu statik de&gbreve;i&scedil;kenin kendisini de&gbreve;il de statik de&gbreve;i&scedil;kenin 
    referans&inodot;n&inodot; <function>unset</function> eder.

     <informalexample>
      <programlisting role="php">
function foo() {
    static $a;
    $a++;
       echo "$a\n";

    unset($a);
}

foo();
foo();
foo();
      </programlisting>
     </informalexample>
     Yukar&inodot;daki örne&gbreve;in ç&inodot;kt&inodot;s&inodot; &scedil;öyle olur:
     <informalexample>
      <programlisting>
1
2
3
      </programlisting>
     </informalexample>
    </para>
    <para>
     Bir fonksiyonun içinde global bir de&gbreve;i&scedil;ken <function>unset</function> edilecekse 
   <parameter>$GLOBALS</parameter> dizisi kullan&inodot;l&inodot;r: 
     <informalexample>
      <programlisting role="php">
function foo() {
    unset($GLOBALS['bar']);
}

$bar = "galileo";
foo();
      </programlisting>
     </informalexample>
    </para>
    <note>
     <para>
      <function>unset</function> bir dil yap&inodot;s&inodot;d&inodot;r. 
     </para>
    </note>
    <para>
     Ayr&inodot;ca bak <function>isset</function> ve
     <function>empty</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.var-dump">
   <refnamediv>
    <refname>var_dump</refname>
    <refpurpose>Bir de&gbreve;i&scedil;ken hakk&inodot;ndaki bilgiyi ekrana basar</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Tan&inodot;m</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>var_dump</function></funcdef>
      <paramdef>mixed <parameter>expression</parameter></paramdef>
      <paramdef>mixed <parameter><optional>expression</optional></parameter></paramdef>
      <paramdef><parameter><optional>...</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Bu fonksiyon bir veya daha fazla ifade hakk&inodot;nda onun tipi ve de&gbreve;erini içeren yap&inodot; bilgisi döndürür. 
    Yap&inodot;y&inodot; göstermek için diziler iç içe ayr&inodot;l&inodot;p her birinin tip ve de&gbreve;eri iç içe ekrana bas&inodot;l&inodot;r. 

    </simpara>
	&tip.ob-capture;
    <simpara>
     <function>var_dump</function> ile 
     <function>print_r</function> fonksiyonlar&inodot;n&inodot; kar&scedil;&inodot;la&scedil;t&inodot;r.
    </simpara>
    <para>
     <informalexample>
      <programlisting role="php">
&lt;pre&gt;
&lt;?php
$a = array (1, 2, array ("a", "b", "c"));
var_dump ($a);

/* ç&inodot;kt&inodot;:
array(3) {
  [0]=>
  int(1)
  [1]=>
  int(2)
  [2]=>
  array(3) {
    [0]=>
    string(1) "a"
    [1]=>
    string(1) "b"
    [2]=>
    string(1) "c"
  }
}

*/

$b = 3.1; $c = TRUE;
var_dump($b,$c);

/* ç&inodot;kt&inodot;:
float(3.1)
bool(true)

*/
?&gt;
&lt;/pre&gt;
      </programlisting>
     </informalexample>
    </para>
   </refsect1>
  </refentry>

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
