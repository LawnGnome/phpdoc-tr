<?xml version='1.0' encoding='utf-8'?>
<!-- $Revision$ -->
<!-- EN-Revision: 288721 Maintainer: nilgun Status: ready -->
<refentry xml:id="function.pdo-sqlitecreatefunction" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDO::sqliteCreateFunction</refname>
  <refpurpose>SQL deyimlerinde kullanmak üzere bir kullanıcı tanımlı işlevi
  kayda geçirir</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <classsynopsis>
   <ooclass><classname>PDO</classname></ooclass>
   <methodsynopsis>
    <type>bool</type><methodname>sqliteCreateFunction</methodname>
    <methodparam><type>string</type><parameter>işlev_adı</parameter></methodparam>
    <methodparam><type>callback</type><parameter>geriçağırım</parameter></methodparam>
    <methodparam choice="opt"><type>int</type><parameter>değ_sayısı</parameter></methodparam>
   </methodsynopsis>
  </classsynopsis>
  &warn.experimental.func;

  <para>
   SQL deyimlerinde kullanmak üzere bir kullanıcı tanımlı işlevi kayda
   geçirir.
  </para>
  <para>
   Kullanıcı tanımlı işlevler, işlev çağırabilen SQL deyimlerinde kulllanılır.
   SELECT ve UPDATE deyimlerinden başka tetikleyiciler de işlev
   çağırabilmektedir.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>işlev_adı</parameter></term>
     <listitem>
      <para>
       SQL deyiminde kullanılacak işlevin adı.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>geriçağırım</parameter></term>
     <listitem>
      <para>
       Tanımlanan SQL işlevini elde edecek geriçağırım işlevi.
      </para>
      <note>
       <simpara>
        Geriçağırım işlevlerinin SQLite'ın tanıdığı veri türlerini döndürmesi
        gerekir (bir <link linkend="language.types.intro">sayıl tür</link>
        gibi).
       </simpara>
      </note>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>değ_sayısı</parameter></term>
     <listitem>
      <para>
       Geriçağırım işlevi belli sayıda değiştirge gerektiriyorsa SQLite
       çözümleyiciye bir ipucu vermek için kullanılır.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>- <function>PDO::sqliteCreateFunction</function> örneği</title>
    <programlisting role="php">
<![CDATA[
<?php
function md5_and_reverse($string)
{
    return strrev(md5($string));
}

$db = new PDO('sqlite:sqlitedb');
$db->sqliteCreateFunction('md5rev', 'md5_and_reverse', 1);
$rows = $db->query('SELECT md5rev(filename) FROM files')->fetchAll();
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   Bu örnekte, bir dizgenin MD5 toplamını hesaplayıp bunu ters çeviren bir
   işlev tanımlanmaktadır. SQL deyimi çalıştırıldığında işlevimiz dosya
   isminin dönüştürülmüş değerini döndürmektedir. <parameter>$rows</parameter>
   sonucu içerecektir.
  </para>
  <para>
   Bu tekniğin güzel tarafı veriyi sorguladıktan sonra sonucu işlemek için bir &foreach; döngüsü kullanımını gerektirmemesidir.
  </para>
  <!-- not for PDO it doesn't, at least not yet
  <para>
   PHP registers a special function named <literal>php</literal> when the
   database is first opened.  The php function can be used to call any PHP
   function without having to register it first.
  </para>
  <para>
   <example>
    <title>Example of using the PHP function</title>
    <programlisting role="php">
<![CDATA[
<?php
$rows = $db->query("SELECT php('md5', filename) from files")->fetchAll();
?>
]]>
    </programlisting>
    <para>
     This example will call the <function>md5</function> on each
     <literal>filename</literal> column in the database and return the result
     into <parameter>$rows</parameter>
    </para>
   </example>
  </para>

  -->
  <tip>
   <para>
    <function>PDO::sqliteCreateFunction</function> ve
    <function>PDO::sqliteCreateAggregate</function>  işlevlerini
    yerleşik SQLite SQL işlevlerini geçersiz kılmak için kullanabilirsiniz.
   </para>
  </tip>
  <note>
   <para>
    Bu yöntem, SQLite2 sürücüsü ile kullanılamaz; eski tarz SQLite arayüzünü
    kullanmalısınız.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>PDO::sqliteCreateAggregate</function></member>
    <member><function>sqlite_create_function</function></member>
    <member><function>sqlite_create_aggregate</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
