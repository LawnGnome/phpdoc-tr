<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 288721 Maintainer: aydin Status: ready -->
<refentry xml:id="class.variant" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>VARIANT</refname>
  <refpurpose>VARIANT sınıfı</refpurpose>
 </refnamediv>
 <refsynopsisdiv>
 <synopsis>$vVar = new <classname>VARIANT</classname>($deger)</synopsis>
 </refsynopsisdiv>
 <refsect1 xml:id="class.variant.class">
  <title>Tanım</title>
  <simpara>
   VARIANT, PHP zval&apos;ın COM karşılığıdır; bir aralıktaki olası farklı
   türlerden değer içerebilen bir yapıdır. COM eklentisi tarafından
   sağlanan VARIANT sınıfı, PHP vasıtası ile COM&apos;a geçirilen ve
   COM&apos;dan gelen değerler üzerine çalışma şeklinden daha fazla denetim
   sağlar.
  </simpara>
 </refsect1>
 <refsect1 xml:id="class.variant.constructor">
  <title>Yöntemler</title>
  <methodsynopsis>
   <type>object</type><methodname>VARIANT::VARIANT</methodname>
   <methodparam choice="opt"><type>mixed</type><parameter>deger</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>tur</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>kodsayfasi</parameter></methodparam>
  </methodsynopsis>
  <para>
   VARIANT sınıf yapılandırıcısı. Değiştirgeler:
   <variablelist>
   <varlistentry><term>deger</term>
   <listitem>
    <simpara>
     Başlangıç değeri, eğer ihmal edilirse veya &null; olarak ayarlanırsa
     VT_EMPTY nesnesi oluşturulur.
    </simpara>
   </listitem>
   </varlistentry>
   <varlistentry><term>tur</term>
   <listitem>
    <simpara>
     VARIANT nesnesinin içerik türünü belirtir. Olası değerler
     <constant>VT_XXX</constant> <xref linkend="com.constants"/> sabitlerinden
     biridir.
    </simpara>
    <simpara>
     PHP 5 sürümünden öncekilerde, varyant bir nesne geçirmek için gönderimle
     <constant>VT_BYREF</constant> sabiti ile <parameter>tur</parameter>
     değiştirgesini VEYA işlemine tutarak PHP&apos;yi zorlayabilirsiniz. Bu
     işlem PHP 5&apos;de desteklenmemektedir, bunun yerine PHP 5 gönderim ile
     geçen değiştirgeleri otomatik olarak tanıyabilir; VARIANT nesne olarak
     geçirilmesine dahi ihtiyaç duymaz.
    </simpara>
    <simpara>
     VARIANT türü üzerine ek bilgi için <acronym>MSDN</acronym>
     kütüphanelerine bakın.
    </simpara>
   </listitem>
   </varlistentry>
   <varlistentry><term>kodsayfasi</term>
   <listitem>
    <simpara>
     Evrensel kod sayfasına yapılacak dizge dönüşümlerinde kullanılacak kod
     sayfasını belirtir. Daha fazla bilgi için <xref linkend="class.com"/>
     sıfındaki aynı isimli değiştirgeye bakın.
    </simpara>
   </listitem>
   </varlistentry>
   </variablelist>
  </para>
  <para>
   PHP 5&apos;den önceki sürümler, VARIANT sınıfının nesneleri için bir dizi
   belgelenmemiş sanal özellik tanımlar. Bu özellikler, PHP 5&apos;in
   daha doğal sözdizimi lehine kaldırılmıştır; bu farklılar en iyi örnekle
   anlatılabilir:
  </para>
  <para>
   <example xml:id="com.variant.example.php4">
    <title>Varyant örneği, PHP 4.x tarzı</title>
    <programlisting role="php">
<![CDATA[
<?php
$v = new VARIANT(42);
print "Tür: " . $v->type . "<br/>";
print "Değer: " . $v->value . "<br/>";
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example xml:id="com.variant.example.php5">
    <title>Varyant örneği, PHP 5 tarzı</title>
    <programlisting role="php">
<![CDATA[
<?php
$v = new VARIANT(42);
print "Tür: " . variant_get_type($v) . "<br/>";
print "Değer: " . $v . "<br/>";
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   Bu değişikliğin nedeni, COM eklentisinin içsel olarak, VARIANT, COM,
   DOTNET sınıflarını aynı şey olarak görmesi olup, bu sınıflar için tasarım
   felsefesi, bütün özellikler ve üye erişimlerinin herhangi bir girişim olmadan
   COM&apos;a geçirilmesi gerekliliğidir. Yeni sözdizimi daha doğal ve kolaydır
   ve sanal özelliklerin çoğunun çıkartılmış olmasının PHP bağlamında herhangi
   bir sakıncası yoktur.
  </para>
  <note>
   <para>
    PHP 5 VARIANT&apos;ları işlemek için daha basit bir yaklaşım kullanır;
    bir variant özelliği çekilirken veya değer geri dönerken, varyant türler
    arasındaki doğrudan eşlemenin bilgi kaybına neden olmadığı durumlarda bir
    PHP değerine dönüştürülür, diğer tüm durumlarda dönen sonuç VARIANT
    sınıfı örneğidir. Bu örneği, tür çarpıtma işleçleri ile açık bir
    şekilde veya <function>print</function> işlevini kullanarak dolaylı
    yoldan, doğal PHP türüne çevirebilirsiniz. Geniş bir yelpazeye yayılan
    varyant işlevlerini kullanarak, dönüşüm zorlamalarına veya veri kaybetme
    riskine girmeden, aritmetik işlemler yapabilirsiniz.
   </para>
  </note>
  <para>
   Ayrıca <function>variant_get_type</function> işlevine bakınız.
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
