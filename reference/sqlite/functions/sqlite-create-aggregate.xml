<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 288721 Maintainer: nilgun Status: ready -->
<refentry xml:id="function.sqlite-create-aggregate" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>sqlite_create_aggregate</refname>
  <refname>SQLiteDatabase->createAggregate</refname>
  <refpurpose>SQL deyimlerinde kullanmak üzere toparlayıcı bir kullanıcı
  tanımlı işlevi kayda geçirir</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>void</type><methodname>sqlite_create_aggregate</methodname>
   <methodparam><type>resource</type><parameter>db</parameter></methodparam>
   <methodparam><type>string</type><parameter>işlev_ismi</parameter></methodparam>
   <methodparam><type>callback</type><parameter>sekme_işlevi</parameter></methodparam>
   <methodparam><type>callback</type><parameter>sonuncu_işlev</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>değ_sayısı</parameter><initializer>-1</initializer></methodparam>
  </methodsynopsis>
  <para>&style.oop;</para>
  <classsynopsis>
   <ooclass><classname>SQLiteDatabase</classname></ooclass>
   <methodsynopsis>
    <type>void</type><methodname>createAggregate</methodname>
    <methodparam><type>string</type><parameter>işlev_ismi</parameter></methodparam>
    <methodparam><type>callback</type><parameter>sekme_işlevi</parameter></methodparam>
    <methodparam><type>callback</type><parameter>sonuncu_işlev</parameter></methodparam>
    <methodparam choice="opt"><type>int</type><parameter>değ_sayısı</parameter><initializer>-1</initializer></methodparam>
   </methodsynopsis>
  </classsynopsis>
  <para>
   Bir sorgudaki tüm satırlardan toparlanan bir sonucu hesaplayacak bir işlevi
   kayda geçirmesi dışında <function>sqlite_create_function</function> işlevi
   gibidir.
  </para>
  <para>
   Bu işlevin <function>sqlite_create_function</function> işlevinden farkı bir
   değil üç işlevi kayda geçirmesidir. Betiğiniz gerekli sonuç kümesini sağlar.
   Sonuç kümesindeki her satır için <parameter>sekme_işlevi</parameter>
   çağrılarak elde edilen sonuçlarla toparlama bağlamı oluşturulur. Toparlama
   bağlamından veriyi alıp sonucu döndürmek için ise
   <parameter>sonuncu_işlev</parameter> çağrılır. Bu geriçağırım işlevlerinin
   SQLite'ın tanıdığı veri türlerini döndürmesi gerekir (bir <link
   linkend="language.types.intro">sayıl tür</link> gibi).
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>db</parameter></term>
     <listitem>
      <para>
       SQLite Veritabanı özkaynağı. Yordamsal kullanımda
       <function>sqlite_open</function> işlevi tarafından döndürülür. Nesne
       yönelimli kullanımda bu değiştirgeye gerek yoktur.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>işlev_ismi</parameter></term>
     <listitem>
      <para>
       SQL deyimlerinde kullanılacak işlev ismi.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>sekme_işlevi</parameter></term>
     <listitem>
      <para>
       Sonuç kümesindeki her satır için çağrılacak geriçağırım işlevi.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>sonuncu_işlev</parameter></term>
     <listitem>
      <para>
       Satırlardan adım adım toplanan veriden sonucu hesaplayacak geriçağırım
       işlevi.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>değ_sayısı</parameter></term>
     <listitem>
      <para>
       Geriçağırım işlevi belli sayıda değiştirge gerektiriyorsa SQLite
       çözümleyiciye bir ipucu vermek için kullanılır.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.void;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>- azami_uzunluk işlevi örneği</title>
    <programlisting role="php">
<![CDATA[
<?php
$data = array(
   'one',
   'two',
   'three',
   'four',
   'five',
   'six',
   'seven',
   'eight',
   'nine',
   'ten',
   );
$db = sqlite_open(':memory:');
sqlite_query($db, "CREATE TABLE strings(a)");
foreach ($data as $str) {
    $str = sqlite_escape_string($str);
    sqlite_query($db, "INSERT INTO strings VALUES ('$str')");
}

function azami_uzunluk_sek(&$baglam, $dizge)
{
    if (strlen($dizge) > $baglam) {
        $baglam = strlen($dizge);
    }
}

function azami_uzunluk_bitir(&$baglam)
{
    return $baglam;
}

sqlite_create_aggregate($db, 'azami_uzunluk', 'azami_uzunluk_sek',
                          'azami_uzunluk_bitir');

var_dump(sqlite_array_query($db, 'SELECT azami_uzunluk(a) from strings'));

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   Bu örnekte, bir tablonun sütunlarında bulunan dizgelerin en uzununun boyunu
   hesaplayan bir veri toparlama işlevi oluşturulmaktadır. Her satır için
   <literal>azami_uzunluk_sek</literal> işlevi çağrılmakta ve önceki
   <varname>$baglam</varname> değiştirgesindekinden daha uzun olan dizge daima
   <varname>$baglam</varname> değiştirgesindekiyle değiştirilmektedir.
   <varname>$baglam</varname> değiştirgesi herhangi bir PHP değişkeni gibi bir
   dizi veya nesne tutabilmelidir.
  </para>
  <para>
   Bütün satırlar işlemden geçirildikten sonra SQLite, sonucu döndürmek için
   <literal>azami_uzunluk_bitir</literal> işlevini çağırır. Burada
   <varname>$baglam</varname> değiştirgesindeki veriye dayalı her çeşit
   hesaplama yapabilirdik. Örneğimiz basit olsun çalıştırılan sorgudan elde
   edilen sonucu basit bir işleme sokup elde ettiğimiz bağlamı döndürmekle
   yetindik.
  </para>
  <note>
   <para>
    Yukarıdaki örnek, ikil veri içeren sütunlar varsa gerektiği gibi çalışmaz.
    Bunun sebebini ve ikil kodlamayla nasıl çalışıldığını öğrenmek için
    <function>sqlite_udf_decode_binary</function> işlevinin açıklamasına
    bakınız.
   </para>
  </note>
  <tip>
   <para>
    Değerlerin kopyalarını bağlamda saklayıp sonra bunlar üzerinde işlem
    yapmanız önerilmez. Yoksa SQLite'ın sorguyu işlemek için çok fazla bellek
    kullanmasına sebep olursunuz. Her biri 32 baytlık bir dizge içeren bir
    milyon satır için ne kadar bellek gerektiğini bir düşünün.
   </para>
  </tip>
  <tip>
   <para>
    SQLite'ın dahili SQL işlevlerini geçersiz kılmak için
    <function>sqlite_create_function</function> ve
    <function>sqlite_create_aggregate</function> işlevlerini kullanabilirsiniz.
   </para>
  </tip>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>sqlite_create_function</function></member>
    <member><function>sqlite_udf_encode_binary</function></member>
    <member><function>sqlite_udf_decode_binary</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 sgml-parent-document:nil
 sgml-default-dtd-file:"~/.phpdoc/manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
 vim600: syn=xml fen fdm=syntax fdl=2 si
 vim: et tw=78 syn=sgml
 vi: ts=1 sw=1
 -->
