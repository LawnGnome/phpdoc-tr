<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 317663 Maintainer: Oğuz Çelikdemir Status: ready -->

 <chapter xml:id="faq.passwords" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Güvenli Parola Karıştırma</title>
  <titleabbrev>Parola Karıştırma</titleabbrev>

  <para>
   Bu bölümde, parolaları güvenlik altına alma da kullanılan
   karıştırma (hashing) işlevinin arka planını ve etkin
   bir şekilde nasıl uygulayabileceğimizi ele alacağız.
  </para>

  <qandaset>
   <qandaentry xml:id="faq.passwords.hashing">
    <question>
     <para>
      Kullanıcıların girmiş olduğu parolaları neden karıştırmalıyım?
     </para>
    </question>
    <answer>
     <para>
      Parola karıştırma, kullanıcıların parola girerek kullandıkları bir
      uygulamanın tasarımında, mutlaka göz önüne alınması gereken en
      temel güvenlik faktörlerinden birisidir. Parola karıştırma tekniği
      kullanılmadığı takdirde, uygulamanızın veri tabanında saklanan
      her türlü parola veritabanınızı ele geçirenler tarafından çalınabilir
      ve ardından sadece uygulamanız değil uygulamanızı kullanan kullanıcılar
      aynı parolayı başka servisler için de kullanıyorlarsa risk altında
      kalırlar.
     </para>
     <para>
      Kullanıcılarınızın parolalarını veri tabanına kaydetmeden önce,
      uygulayacağınız karıştırma algoritması ile saldırganın özgün parolayı
      tahminini imkansız kılarken, ilerleyen süreçte de özgün parolayı
      bulma çabalarını da (kaba kuvvet saldırısı tekniğiyle) zorlaştırmış
      olursunuz.
     </para>
     <para>
      Ancak, dikkat edilmesi gereken önemli nokta, parola karıştırma sadece
      veri kaynağınızın ele geçirilmesine karşı koruma sağlarken, uygulamanıza
      isteminiz dışında yerleştirilmiş zararlı kodlar aracılığıyla şifreleri ele geçirmede koruma sağlamaz.
     </para>
    </answer>
   </qandaentry>
   <qandaentry xml:id="faq.passwords.fasthash">
    <question>
     <para>
      <function>MD5</function> ve <function>SHA1</function> gibi genel
      karıştırma işlevlerini parolalar için kullanmak neden uygun değildir?
     </para>
    </question>
    <answer>
     <para>
      MD5, SHA1 ve SHA256 gibi karıştırma algoritmaları verimli ve çok hızlı
      olmaları için tasarlanmıştır. Modern teknikler ve bilgisayar
      ekipmanları ile, Kaba kuvvet (brute force) atak tekniği kullanarak özgün
      değere ulaşma sıradan bir hale gelmiştir.
     </para>
     <para>
      Çünkü, modern bir bilgisayar, oldukça hızlı olarak bu karıştırma
      tekniklerini tersine çevirir, çoğu güvenlik uzmanı da bunların parola
      karıştırma da kullanımına  karşı aleyhte tavsiye de bulunur.
     </para>
    </answer>
   </qandaentry>
   <qandaentry xml:id="faq.passwords.bestpractice">
    <question>
     <para>
      Genel karıştırma teknikleri kullanışlı olmadıklarına göre,
      parolalarımı nasıl karıştırmalıyım?
     </para>
    </question>
    <answer>
     <para>
      Parolaları karıştırmada, dikkate alınması gereken iki husus vardır;
      hesaplamanın maliyeti ve tuzlama.

      Karıştırma algoritmasında daha fazla hesaplama maliyeti demek
      kaba kuvvet ataklarının daha fazla zaman gerektirmesi demektir.
     </para>
     <para>
      PHP ile birlikte sunulan ve belirtilen algoritmayı kullanarak karıştırma
      işlemini yerine getiren 2 adet işlev vardır.
     </para>
     <para>
      Karıştırma işlevlerinin ilki <function>crypt</function>
      işlevidir ve bir kaç tane karıştırma algoritmasını destekler.
      Bu işlevi kullanırken, PHP, desteklenen her bir algoritmayı
      kendi bünyesinde barındırdığı için, algoritmalardan bir veya
      bir kaçı sisteminizde bulunmasa da seçtiğiniz algoritmanın
      varlığını ve kullanımını garanti eder.
     </para>
     <para>
      Diğer karıştırma işlevi ise <function>crypt</function> işlevinden daha
      fazla algoritmayı ve seçeneği destekleyen fakat
      <function>crypt</function> işlevinin desteklediği bazı algoritmaları
      desteklemeyen <function>hash</function> işlevidir. Hash eklentisi PHP ile
      birlikte gelir fakat derleme anında kullanıcı dilerse gözardı edebilir
      dolayısıyla <function>crypt</function> işlevinde olduğu gibi
      algoritmaların varlığını garanti etmez.
     </para>
     <para>
      Parola karıştırma da tavsiyemiz Blowfish algoritmasını kullanmanızdır,
      bu haliyle MD5 veya SHA1 den daha fazla hesaplama performansı
      gerektirmesine rağmen hala ölçeklenebilir durumdadır.
     </para>
    </answer>
   </qandaentry>
   <qandaentry xml:id="faq.passwords.salt">
    <question>
     <para>
      Tuzlama nedir?
     </para>
    </question>
    <answer>
     <para>
      Bir şifreleme tuzu, gökkuşağı tablosu olarak bilinen, daha önceden
      hesaplanarak oluşturulmuş karıştırma listesinden karşılaştırma yaparak
      eşleştirme ihtimalini ortadan kaldırmak için, karıştırma işlemi esnasında
      uygulanan bir değerdir.
     </para>
     <para>
      Basit anlamda tuz, karıştırılmış değerinizi kırma teşebbüslerini
      zorlaştırmada kullanılan ek bir veridir. İnternet üzerinde, daha önceden
      hesaplanmış kapsamlı karıştırma değerlerinin yanı sıra özgün değerleri de
      barındıran bizi dizi servis vardır. Tuz kullanmak bu listelerden
      karıştırma değerini bulmayı mantıksız veya imkansız kılar.
     </para>
    </answer>
   </qandaentry>
  </qandaset>

 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
