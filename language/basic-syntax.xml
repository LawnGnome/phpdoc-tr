<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 310698 Maintainer: nilgun Status: ready -->
<!-- CREDITS: tpug, sezer -->
 <chapter xml:id="language.basic-syntax" xmlns="http://docbook.org/ns/docbook">
  <title>Temel Sözdizimi</title>
  <sect1 xml:id="language.basic-syntax.phpmode">
   <title>HTML&apos;den Kaçmak</title>
   <para>
    PHP bir dosyayı çözümlerken, hangi bölümü yorumlayıp hangi bölümü
    yorumlamadan geçeceğine açılış ve kapanış etiketlerine bakarak
    karar verir. PHP&apos;nin bu şekilde çalışıyor olması, PHP&apos;nin
    çesitli türde birçok belgenin içine gömülebilmesini sağlar, çünkü PHP
    başlangıç ve bitiş etiketlerinin dışında kalan her şey PHP çözümleyicisi
    tarafından gözardı edilir. Çoğu zaman, bu örnekte olduğu gibi PHP&apos;nin
    HTML içine gömülmüş olduğunu göreceksiniz.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<p>Bu bölüm gözardı edilecektir.</p>
<?php echo 'Bu bölüm PHP tarafından çözümlenecektir.'; ?>
<p>Bu bölüm de gözardı edilecektir.</p>
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    Daha gelişmiş yapılar da kullanmanız mümkündür:
    <example>
     <title>- Gelişmiş önceleme</title>
     <programlisting role="php">
<![CDATA[
<?php
if ($ifade) {
    ?>
    <strong>Bu önerme doğrudur.</strong>
    <?php
} else {
    ?>
    <strong>Bu önerme yanlıştır.</strong>
    <?php
}
?>
]]>
     </programlisting>
    </example>
      Bu beklendiği gibi çalışacaktır, çünkü PHP, ?&gt; kapanış
      etiketi ile karşılaştığında, tekrar bir açılış etiketi ile karşılaşana
      kadar bulduğu herşeyi (kapanış etiketinden sonraki satırsonu karakteri
      hariç - bkz, <link
      linkend="language.basic-syntax.instruction-separation">deyim
      ayırma</link>) çıktılayacaktır. Buradaki örnek oldukça basit, ancak
      büyük metin bloklarını görüntülemek istediğimizde PHP&apos;yi çözümleme
      kipinden çıkartmak çoğu zaman tüm metni <function>echo</function> ya da
      <function>print</function> ile görüntülemekten daha verimlidir.
   </para>
   <para>
    PHP ile kullanılabilecek dört farklı açılış ve kapanış etiketi çifti
    vardır. Bunlardan ikisi, &lt;?php ?&gt; ve &lt;script language="php"&gt;
    &lt;/script&gt; her zaman kullanılabilir durumdadır. Diğer ikisi, kısa
    etiketler ve <productname>ASP</productname> tarzı etiketler olup
    &php.ini; yapılandırma dosyası içersinden açılıp kapatılabilirler. Bazı
    kişiler kısa etiketleri ve <productname>ASP</productname> tarzı
    etiketleri daha kullanışlı bulmaktadır, ancak bu ikisi daha az
    taşınabilir olduklarından genellikle tavsiye edilmemektedir.
    <note>
     <para>
      Bir diğer önemli nokta, PHP'yi XML ya da XHTML içine gömmek istiyorsanız
      standartlarla uyumlu kalabilmek için &lt;?php ?&gt; etiketlerini
      kullanmanız gerektiğidir.
     </para>
    </note>
   </para>
   <para>
    <example>
     <title>- PHP Açılış ve Kapanış Etiketleri</title>
     <programlisting role="php">
<![CDATA[
1.  <?php echo 'XHTML ya da XML belgeleri sunacaksanız, böyle yapın'; ?>

2.  <script language="php">
        echo 'bazı düzenleyiciler (FrontPage gibi) işlem
	            yönergelerini sevmezler';
    </script>

3.  <? echo 'Bu en basit, SGML işlem yönergesidir'; ?>
    <?= ifade ?> Bu "<? echo ifade ?>" için bir kısayoldur.

4.  <% echo 'İsterseniz ASP tarzı etiketler kullanabilirsiniz'; %>
    <%= $degisken; # Bu "<% echo . . ." %> için bir kısayoldur.
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Bir ve iki numaralı örneklerde gözüken etiketler her zaman
    kullanılabilirler. Bu ikisinden birincisi en geniş kullanıma sahip olanı
    ve en çok tercih edilenidir.
   </para>
   <para>
    Kısa etiketler (üçüncü gibi) yalnızca &php.ini; içersinde <link
    linkend="ini.short-open-tag">short_open_tag</link> yapılandırma
    yönergesiyle etkinleştirilmişlerse ya da PHP,
    <code>--enable-short-tags</code> derleme seçeneği ile
    yapılandırılmışsa kullanılabilirler.
   </para>
   <para>
    <productname>ASP</productname> tarzı etiketler (dördüncü örnek) &php.ini;
    dosyasında <link linkend="ini.asp-tags">asp_tags</link> yapılandırma
    yönergesiyle etkinleştirilmişlerse kullanılabilirler.
   </para>
   <para>
    <note>
     <para>
      Geliştirdiğiniz uygulamaları ya da kütüphaneleri başkalarına
      dağıtacaksanız ya da bu uygulamaları denetiminizde olmayan PHP
      sunucularına kuracaksanız kısa etiketleri kullanmaktan kaçınmalısınız,
      çünkü hedef sunucu kısa etiketleri desteklemiyor olabilir. Kodlarınızın
      taşınabilir ve yeniden dağıtılabilir olması için, alışkanlıkla kısa
      etiketleri kullanmadığınızdan emin olun.
     </para>
    </note>
    <note>
     <para>
      PHP 5.2 ve öncesinde, çözümleyici, bir dosya içindeki tek şey olarak
      <literal>&lt;?php</literal> başlangıç etiketine izin vermezdi.
      PHP 5.3'ten itibaren izin verilmektedir.
     </para>
    </note>
   </para>
  </sect1>
  <sect1 xml:id="language.basic-syntax.instruction-separation">
   <title>Deyim Ayrımı</title>
   <para>
    C ya da Perl'de olduğu gibi, PHP de deyimlerin birbirlerinden her bir
    deyimin sonuna konulacak noktalı virgülle ayrılmasını gerektirir. Bir PHP
    kod bloğunun sonunda yer alan kapanış etiketi kendinden önceki deyim için
    noktalı virgül işlevi görür; yani, bir PHP bloğunun son satırının sonuna
    noktalı virgül koymak zorunda değilsiniz. Kapanış etiketi aynı zamanda
    satırsonu karakterini de kendisi ekleyecektir.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
    echo 'Bu bir denemedir';
?>

<?php echo 'Bu bir denemedir' ?>

<?php echo 'Son kapanış etiketini koymadık';
]]>
     </programlisting>
    </informalexample>
    <note>
     <para>
      Dosya sonunda PHP kapanış etiketini kullanmak isteğe bağlıdır, hatta
      dosya sonlarında istemdışı boş satırlar oluşması gibi durumlarda
      <function>include</function>, <function>require</function> gibi
      işlevlerin kullanımında yararlı bile olabilir, dahası sonradan yanıta
      başlık eklemeye devam edebilirsiniz. Bu özellik ayrıca, çıktı
      tamponlama kullanıyorsanız ve betiğe <function>include</function> ile
      eklediğiniz dosyalar tarafından üretilen kısımların sonunda gereksiz
      boş satırların oluşmasını istemediğinizde de işe yarar.
     </para>
    </note>
   </para>
  </sect1>
  <sect1 xml:id="language.basic-syntax.comments">
   <title>Açıklamalar</title>
   <para>
    PHP, 'C', 'C++' ve Unix kabuk tarzı (Perl tarzı) açıklamaların hepsini destekler. Örnegin:

    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
    echo 'Bu bir denemedir'; // Bu tek satırlık c++ tarzı açıklamadır
    /* Bu, C tarzı çok satırlı
       bir açıklamadır */
    echo 'Bir deneme daha';
    echo 'Bu da sonuncusu'; # Bu tek satırlık kabuk tarzı açıklamadır
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    "Tek satırlık" bir açıklamanın etki alanı yalnızca satır sonuna ya da PHP
    kod bloğunun sonuna kadardır.  Yani, <literal>// ... ?&gt;</literal> ya da
    <literal># ...  ?&gt;</literal> kullanımından sonra gelecek HTML kodu
    YAZDIRILACAKTIR: <code>?&gt;</code> etiketi PHP kipinden çıkılmasına ve
    HTML kipine dönülmesini sağlar, <literal>//</literal> ya da
    <literal>#</literal> kullanımı bunu etkileyemez <link
    linkend="ini.asp-tags">asp_tags</link> yapılandırma yönergesi etkinse,
    asp tarzı <literal>// %&gt;</literal> ve <literal># %&gt;</literal>
    kullanımı da böyle çalışır. Bununla birlikte,
    <literal>&lt;/script&gt;</literal> etiketi tek satırlık açıklama için
    böyle duruma yol açmaz.
   </simpara>
   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<h1>Bu <?php # echo 'basit';?> bir örnektir.</h1>
<p>Yukarıdaki başlık 'Bu bir örnektir' diye gösterilecektir.</p>
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    Bir 'C' tarzı açıklama ilk <literal>*/</literal> ile karşılaşıldığı
    noktada sona erer. 'C' tarzı açıklamaları iç içe kullanmamalısınız. Büyük
    miktarda kod bloğunu açıklama haline getirirken bu yanlış genellikle
    yapılır.
   </simpara>
   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
 /*
    echo 'Bu bir denemedir'; /* Bu açıklama sorun çıkaracak. */
 */
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect1>
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
