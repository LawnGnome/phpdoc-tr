<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.5 $ -->
<!-- $Header: /home/svn/phpsvn_tmp/cvsrepo/phpdoc/tr/language/basic-syntax.xml,v 1.5 2008-01-11 08:02:21 sezer Exp $ -->
 <chapter xml:id="language.basic-syntax" xmlns="http://docbook.org/ns/docbook">
  <title>Temel sözdizimi</title>
  <sect1 xml:id="language.basic-syntax.phpmode">
   <title>HTML&apos;den Kaçmak</title>
   <para>
   PHP bir dosyayi okurken, hangi bölümü yorumlayip hangi bölümü
   yorumlamadan geçecegine açilis ve kapanis etiketlerine bakarak
   karar verir. PHP&apos;nin bu sekilde çalisiyor olmasi, çesitli türde
   birçok belgenin içine gömülebilmesini saglar, çünkü PHP baslangiç
   ve bitis etiketlerinin disinda kalan her sey PHP okuyucusu tarafindan
   gözardi edilecektir. Çogu zaman, bu örnekte oldugu gibi PHP&apos;nin
   HTML içine gömülmüs oldugunu göreceksiniz.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<p>Bu bölüm gözardi edilecektir.</p>
<?php echo 'Bu bölüm PHP tarafindan okunacaktir.'; ?>
<p>Bu bölüm de gözardi edilecektir.</p>
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
   Daha gelismis yapilar da kullanmaniz mümkündür:
    <example>
     <title>Gelismis kaçis</title>
     <programlisting role="php">
<![CDATA[
<?php
if ($expression) { 
    ?>
    <strong>Bu dogru bir önermedir.</strong>
    <?php 
} else { 
    ?>
    <strong>Bu yanlis bir önermedir.</strong>
    <?php 
}
?>
]]>
     </programlisting>
    </example>
    Bu bekledigimiz gibi çalisacaktir, çünkü PHP ?&gt; kapanis
    etiketi ile karsilastiginda, tekrar bir açilis etiketi ile karsilasana
    kadar gördügü herseyin oldugu gibi çiktisini verecektir. Buradaki
    örnek oldukça basit, ancak büyük metin bloklarini görüntülemek
    istedigimizde PHP&apos;yi yorumlama kipinden çikartmak çogu
    zaman tüm metni <function>echo</function> ya da
    <function>print</function> ile görüntülemekten daha verimlidir.
   </para>
   <para>
   PHP ile kullanilabilecek dört açilis ve kapanis etiketi çifti vardir.
   Bunlardan ikisi, &lt;?php ?&gt; ve &lt;script language="php"&gt; &lt;/script&gt;
   her zaman kullanilabilir durumdadir. Diger iki kisa kullanim biçimi ve
   <productname>ASP</productname> stili etiketler, &php.ini; yapilandirma
   dosyayi içersinden açilip kapatilabilir. Bazi kisiler kisa kullanimi ve 
   <productname>ASP</productname> stili etiketleri daha kullanisli
   bulmaktadirlar, ancak bu iki kullanim sekli daha az tasinabilir olduklarindan
   ötürü genellikle tavsiye edilmemektedir.
    <note>
     <para>
     Bir diger önemli nokta, PHP'yi XML ya da XHTML içine gömmek istiyorsaniz
     standartlarla uyumlu kalabilmek için &lt;?php ?&gt; kullanimini uygulamalisiniz.
     </para>
    </note> 
   </para>
   <para>
    <example>
     <title>PHP Açilis ve Kapanis Etiketleri</title>
     <programlisting role="php">
<![CDATA[
1.  <?php echo 'XHTML ya da XML belgeleri sunacaksaniz, bu yöntemi izleyin'; ?>

2.  <script language="php">
        echo 'bazi metin düzenleyiciler (FrontPage gibi) isleme
	        komutlarini sevmezler';
    </script>

3.  <? echo 'Bu en basit, SGML isleme yöntemidir'; ?>
    <?= ifade ?> Bu "<? echo expression ?>" kullanimi için kisayoldur.

4.  <% echo 'Seçime bagli olarak ASP tipi etiketleri kullanabilirsiniz'; %>
    <%= $degisken; # Bu "<% echo . . ." %> kullanimi için kisayoldur.
]]>
     </programlisting>
    </example>
   </para>
   <para>
   Bir ve iki numarali örneklerde gözüken etiketler her zaman kullanilabilirler,
   birinci örnek en genis kullanima sahiptir ve ikisi arasinda en çok tercih edilendir.
   </para>
   <para>
   Kisa etiketler (örnek üç) yalnizca &php.ini; içersindeki
   <link linkend="ini.short-open-tag">short_open_tag</link> yapilandirma
   direktifi etkinlestirildiginde ya da PHP <option>--enable-short-tags</option>
   seçenegi ile yapilandirildiginda kullanilabilirler.
    <note>
     <para>
     PHP 3 kullaniyorsaniz, kisa etiketleri <function>short_tags</function>
     fonksiyonu ile etkinlestirebilirsiniz. <emphasis>Bu
      yalnizca PHP 3 için geçerlidir!</emphasis>
     </para>
    </note>
   </para>    
   <para>
    <productname>ASP</productname> tipi etiketler (örnek dört)
    &php.ini; dosyasindaki <link linkend="ini.asp-tags">asp_tags</link>
    yapilandirma direktifi etkinlestirildiginde kullanilabilirler.
    <note>
     <para>
      <productname>ASP</productname> etiketleri için destek
      3.0.4 sürümü ile eklenmistir.
     </para>
    </note>
   </para>
   <para>
    <note>
     <para>
     Gelistirdiginiz uygulamalari ya da kütüphaneleri baskalarina dagitacaksaniz
     ya da bu uygulamalari sizin kontrolünüz altinda olmayan PHP sunucularina
     kuracaksaniz kisa etiketleri kullanmaktan kaçinmalisiniz, çünkü hedef sunucu
     kisa etiketleri desteklemiyor olabilir. Tasinabilir, yeniden dagitilabilir kod için,
     kisa etiketleri kullanmadiginizdan emin olun.
     </para>
    </note>
   </para>
  </sect1>
  <sect1 xml:id="language.basic-syntax.instruction-separation">
   <title>Komut ayrimi</title>
   <para>
   C ya da Perl'de oldugu gibi, PHP komutlarin her bir deyimin sonuna konulacak
   noktali virgülle ayrilmasini ister. Bir PHP kod blogunun sonunda yer alan
   kapanis etiketi otomatik olarak bir noktali virgül islevi görür; bir PHP blogunun
   son satirinin sonuna noktali virgül koymaniza gerek yoktur. Kapanis etiketi
   ayni zamanda yeni satir karakterini de kendisi ekleyecektir.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
    echo 'Bu bir testtir';
?>

<?php echo 'Bu bir testtir' ?>

<?php echo 'Son kapanis etiketini atladik';
]]>
     </programlisting>
    </informalexample>
    <note>
     <para>
     Dosya sonunda PHP kapanis etiketi kullanmak seçime baglidir ve
     <function>include</function> ya da <function>require</function>
     gibi fonksiyonlarin kullaniminda yardimci olabilir, böylelikle dosya sonlarinda
     istemdisi olusabilen bos satirlar meydana gelmez ve sonrasinda cevap ile
     birlikte yeni baslik bilgileri ekleme sansiniz sürer. Bu özellik çikti tamponlama (output
     buffering) kullanip da eklenti (include) yaptiginiz dosyalarin son kisminda olusan istenmeyen
     bos satirlari görmek istemediginizde de kullanislidir.
     </para>
    </note>
   </para> 
  </sect1>
  <sect1 xml:id="language.basic-syntax.comments">
   <title>Yorumlar</title>   
   <para>
   PHP 'C', 'C++' ve Unix kabuk-tipi (Perl tipi) yorumlari destekler. Örnegin:

    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
    echo 'Bu bir testtir'; // Bu tek satirlik c++ tipi yorumdur
    /* Bu çoklu satir yorumudur
       diger bir yorum satiri */
    echo 'Bu bir diger testtir';
    echo 'Son Bir Test'; # Bu tek satirlik kabuk-tipi yorumdur
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
   "Tek satirlik" yorum tipi yalnizca satir sonuna ya da PHP kod blogunun sonuna
   kadar yorumlama yapar. Bu demektir ki <literal>// ... ?&gt;</literal>  ya da
   <literal># ...  ?&gt;</literal> kullanimindan sonra gelecek HTML kodu YAZDIRILACAKTIR:
   ?&gt; PHP kipinden çikilmasina sebep olup ve HTML kipine dönüsü saglar,
   <literal>//</literal> ya da <literal>#</literal>bu alani etkileyemez.
   <link linkend="ini.asp-tags">Asp_tags</link> yapilandirma direktifi etkinlestirilmisse,
   <literal>// %&gt;</literal> ve <literal># %&gt;</literal> gibi çalisir.
   </simpara>
   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<h1>Bu bir <?php # echo 'örnek';?> örnektir.</h1>
<p>Yukaridaki baslik 'Bu bir örnektir' diyecektir.</p>
]]>
     </programlisting>
    </informalexample> 
   </para>
   <simpara>
   'C' tipi yorumlar ilk <literal>*/</literal> ile karsilasildiginda sona erer.
   'C' tipi yorumlari iç içe kullanmamalisiniz. Büyük kod bloklarini yorum kapsamina
   alirken bu hatayi yapmaniz daha kolaylasir.
   </simpara>
   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
 /* 
    echo 'Bu bir testtir'; /* Bu yorum probleme sebep olacaktir */
 */
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect1>
 </chapter>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
