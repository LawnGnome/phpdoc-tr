<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.3 $ -->
<!-- EN-Revision: 1.4 Maintainer: nilgun Status: ready -->
<sect1 xml:id="language.pseudo-types">
 <title>Bu belgede kullanılan sözde türler ve değişkenler</title>

 <sect2 xml:id="language.types.mixed">
  <title><code>mixed</code></title>

  <para>
   <literal>mixed</literal> anahtar sözcüğü, bir değiştirgenin çok sayıda tür
   (ama hepsini değil) kabul edebileceğini belirtir.
  </para>

  <para>
   Örneğin, <function>str_replace</function> işlevi sadece
   <type>string</type> veya  <type>array</type> türünde değer kabul ederken,
   <function>gettype</function> işlevi tüm PHP türlerini kabul eder.
  </para>

 </sect2>

 <sect2 xml:id="language.types.number">
  <title><code>number</code></title>

  <para>
   <literal>number</literal> anahtar sözcüğü, bir değiştirgenin
   <type>integer</type> veya <type>float</type> türünde değer kabul edeceğini
   belirtir.
  </para>

 </sect2>

 <sect2 xml:id="language.types.callback">
  <title><code>callback</code></title>

  <para>
   <function>call_user_func</function>, <function>usort</function> gibi
   işlevler değiştirge olarak kullanıcı tanımlı geriçağırım işlevlerini kabul
   ederler. Geriçağırım işlevleri her zaman basit işlevler olmayabilir, nesne
   yöntemleri ve hatta duruk sınıf yöntemleri bile olabilirler.
  </para>

  <para>
   Bir PHP işlevi, <type>string</type> türündeki ismiyle aktarılır. Şu dil
   oluşumları dışında herhangi bir yerleşik veya kullanıcı tanımlı işlev
   kullanılabilir:
   <function>array</function>, <function>echo</function>,
   <function>empty</function>, <function>eval</function>,
   <function>exit</function>, <function>isset</function>,
   <function>list</function>, <function>print</function> veya
   <function>unset</function>.
  </para>

  <para>
    Örneklenmiş bir nesnenin bir yöntemi, nesnenin ismi 0. indiste, yöntem
    ismi 1. indiste yer alan bir dizi olarak aktarılır.
  </para>

  <para>
   Duruk sınıf yöntemleri de sınıf ismi 0. indiste içerilerek, sınıf bir
   nesne olarak örneklenmeksizin aktarılabilir.
  </para>

  <para>
   <function>create_function</function> işlevi bildik kullanıcı tanımlı
   işlevlerden başka, bir anonim geriçağırım işlevi oluşturmak için de
   kullanılabilir. PHP 5.3.0'dan itibaren işleve değiştirge olarak bir anonim
   işlev aktarmak mümkün oldu.
  </para>

  <para><example>
   <title>- Geriçağırım işlevi örnekleri</title>
   <programlisting role="php">
<![CDATA[
<?php

// Bir geriçağırım işlevi örneği
function geriçağırım_işlevim() {
    echo 'merhaba dünya!';
}

// Bir geriçağırım yöntemi örneği
class Sınıfım {
    static function geriçağırımYöntemim() {
        echo 'Merhaba Dünya!';
    }
}

// 1. tür: Basit geriçağırım
call_user_func('geriçağırım_işlevim');

// 2. tür: Duruk sınıf yöntemi çağrısı
call_user_func(array('Sınıfım', 'geriçağırımYöntemim'));

// 3. tür: Nesne yöntemi çağrısı
$nesne = new Sınıfım();
call_user_func(array($nesne, 'geriçağırımYöntemim'));

// 4. tür: Duruk sınıf yöntemi çağrısı (PHP 5.2.3 ve sonrası)
call_user_func('Sınıfım::geriçağırımYöntemim');

// 5. tür: Göreli duruk sınıf yöntemi çağrısı (PHP 5.2.3 ve sonrası)
class A {
    public static function kimsin() {
        echo "A\n";
    }
}

class B extends A {
    public static function kimsin() {
        echo "B\n";
    }
}

call_user_func(array('B', 'parent::kimsin')); // A
?>
]]>
   </programlisting>
  </example></para>

  <para>
   <example>
    <title>- Anonim işlev kullanan bir geriçağırım işlevi örneği</title>
   <programlisting role="php">
<![CDATA[
<?php
// Anonim işlevimiz
$double = function($a) {
    return $a * 2;
};

// Sayı aralığımız
$numbers = range(1, 5);

// Aralık içindeki her elemanın boyutunu
// ikiye katlamak için geriçağırım işlevi
// olarak burada anonim bir işlev kullanalım
$new_numbers = array_map($double, $numbers);

print implode(' ', $new_numbers);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
2 4 6 8 10
]]>
    </screen>
   </example>
  </para>

  <note>
   <simpara>
    PHP4'te, kopyayı değil de asıl nesneyi işaret eden bir geriçağırım
    oluşturmak için gönderim kullanmak gerekir. Daha fazla bilgi için
    <link linkend="language.references">Gönderimler Hakkında</link> bölümüne
    bakınız.
   </simpara>
  </note>

 </sect2>

 <sect2 xml:id="language.types.void">
  <title><code>void</code></title>

  <para>
   <literal>void</literal> bir dönüş türü olarak dönüş değerinin yararsız
   olduğu anlamına gelir. <literal>void</literal> bir değiştirge listesinde
   kullanıldığında işlevin değiştirge kabul etmediği anlamına gelir.
  </para>

 </sect2>

 <sect2 xml:id="language.types.dotdotdot">
  <title>... (üçlü nokta)</title>

  <para>
   <parameter>$...</parameter> değiştirgesi  işlev bildirimlerinde
   "<literal>ve benzerleri</literal>" anlamına gelir. Bu değişken ismi bir
   işlevde kullanıldığında işlev sonsuz sayıda değiştirge alabilir.
  </para>

 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
