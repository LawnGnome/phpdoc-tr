<?xml version="1.0" encoding="iso-8859-9"?>
<!-- $Revision: 1.3 $ -->
 <chapter id="language.expressions">
   <title>Ýfadeler (Expressions)</title>
   <simpara>
   Ýfadeler, PHP'nin en önemli yapýtaþlarýdýr. PHP'de, hemen hemen yazdýðýnýz
   her þey bir ifadedir. Bir ifadenin en basit ama en etkili tanýmý þudur:
   "Deðeri olan her þey".
   </simpara>
   <simpara>
   Ýfadelerin en basit þekli deðiþmezler ve deðiþkenlerdir. "$a = 5" yazdýðýnýzda,
   '5' deðerini $a deðiþkenine atamýþ olursunuz. '5', açýk bir þekilde, 5 deðerine
   sahiptir, ya da baþka bir deyiþle '5', 5 deðerini taþýyan bir ifadedir (bu durumda,
   '5' tamsayý bir deðiþmezdir).
   </simpara>
   <simpara>
   Bu atamadan sonra, $a'nýn deðerinin 5 olmasýný beklersiniz, dolayýsýyla $b = $a yazdýðýnýzda,
   bunun $b = 5 yazmýþsýnýz gibi davranmasýný beklersiniz. Baþka bir deyiþle, $a da 5 deðerini
   taþýyan bir ifadedir. Her þey doðru çalýþtýysa, olmasý gereken tam olarak budur.
   </simpara>
   <para>
   Fonksiyonlar, ifadelerin biraz daha karmaþýk örnekleri olarak gösterilebilir. Örneðin, aþaðýdaki
   fonksiyona bakalým:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
function foo ()
{
    return 5;
}
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
   Fonksiyon kavramýna aþina iseniz (aþina deðilseniz,
   <link linkend="language.functions">fonksiyonlar</link> bölümünü
   inceleyebilirsiniz), <literal>$c = foo()</literal> yazmak ile
   <literal>$c = 5</literal> yazmak arasýnda bir fark olmadýðýný bilirsiniz.
   Fonksiyonlar, kendilerinden dönen deðeri taþýyan ifadelerdir. foo() 5 döndürdüðünden,
   'foo()' ifadesinin deðeri 5'tir. Genellikle fonksiyonlar duraðan bir deðer taþýmazlar,
   bir hesaplamanýn sonucunu taþýrlar.
   </simpara>
   <simpara>
   Elbette, PHP'deki deðerlerin tamsayý olmasý gerekmez, ve çoðunlukla deðildirler.
   PHP 4 tip sayýl deðeri destekler: <type>integer (tamsayý)</type> deðerler,
   kayan noktalý (<type>float</type>) deðerler, <type>string (karakter dizisi)</type>
   deðerler ve <type>boolean</type> deðerler (sayýl deðerler, diziler gibi yapýlarýn aksine daha küçük parçalara
   bölemeyeceðiniz deðerlerdir). PHP ayrýca iki karma (sayýl olmayan) tipi destekler: diziler (arrays) ve
   nesneler (objects). Bu tiplerden her biri bir deðiþkene atanabilir ya da bir fonksiyondan döndürülebilir.
   </simpara>
   <simpara>
   PHP, birçok baþka dilin yaptýðý gibi ifadeleri çok ileriye götürmüþtür.
   PHP ifade-yönelimli bir dildir, bunun sebebi hemen hemen her þeyin bir ifade olmasýdýr.
   Az önce üzerinde çalýþtýðýmýz '$a = 5' örneðini ele alalým. Burada iki deðiþkenin
   kullanýmý sözkonusudur, tamsayý deðiþmez olan '5' ve 5 olarak güncellenmiþ $a'nýn deðeri.
   Ancak gerçek þu ki, burada bu ikiliye ek olarak baþka bir deðer daha vardýr, o da atamanýn
   kendi deðeridir. Atamanýn kendisi de atanan deðeri iþletir, bu örnekte bu 5'tir.
   Pratikte, ne yaptýðýndan baðýmsýz olarak '$a = 5', 5 deðerini taþýyan bir ifadedir.
   Böylece, '$b = ($a = 5)' yazmak, '$a = 5; $b = 5;' yazmak gibi olur (noktalý virgül deyimin
   sonlandýrýldýðýný gösterir). Atamalar saðdan sola doðru iþlendiðinden, '$b = $a = 5' de yazabilirsiniz.
   </simpara>
   <simpara>
   Ýfade yönelimi ile ilgili diðer güzel bir örnek ön ve son arttýrma ve eksiltme iþlemleridir.
   PHP ve diðer birçok dilin kullanýcýlarý, deðiþken++ ve deðiþken-- kullanýmý ile az çok aþinadýr.
   Bunlar <link linkend="language.operators.increment">arttýrma ve eksiltme operatörleri</link>dir.
   PHP/FI 2'de, '$a++' iþleminin bir deðeri yoktur (bir ifade deðildir), bu yüzden bu iþlemi
   atayamaz ya da hiçbir þekilde kullanamazsýnýz. PHP, arttýrma/eksiltme ifadelerinin kalitesini,
   bu ifadeleri C dilindekine benzer þekilde iyileþtirerek yükseltmiþtir. PHP'de, C'de olduðu gibi
   iki tür arttýrma vardýr - ön arttýrma ve son arttýrma. Bunlarýn her ikisi de deðiþkenin deðerini
   arttýrýr ve deðiþken üzerindeki etkileri aynýdýr. Fark, arttýrma ifadesinin deðerindedir.
   Ön arttýrma, '++$variable' olarak yazýlýr, arttýrýlan deðere doðru çalýþýr (PHP deðiþkenin deðerini,
   mevcut deðerini okumadan önce arttýrýr, bu sebeple ön arttýrma ismi verilmiþtir). Son arttýrma,
   '$variable++' olarak yazýlýr, deðer arttýrýlmadan önceki özgün deðerle çalýþýr (PHP deðiþkenin deðerini,
   mevcut deðeri okuduktan sonra arttýrýr, bu sebeple son arttýrma ismi verilmiþtir).
   </simpara>
   <simpara>
   Çok geniþ bir kullanýma sahip olan ifade tiplerinden birisi <link
    linkend= "language.operators.comparison">karþýlaþtýrma</link> ifadeleridir.
    Bu ifadeler &false; ya da &true; deðerlerinden birini alýrlar. PHP
    &gt; (büyüktür), &gt;= (büyüktür ya da eþittir), == (eþittir),
    != (eþit deðildir), &lt; (küçüktür) ve &lt;= (küçüktür ya da eþittir) kullanýmlarýný
    destekler. Dil ayný zamanda katý eþitlik operatörlerini de destekler:
    === (eþittir ve ayný tiptedir) ve !== (eþit deðildir ya da ayný tipte deðildir).
    Bu ifadeler çoðunlukla <literal>if</literal> deyimleri gibi koþula baðlý iþlemlerde
    kullanýlmaktadýrlar.
   </simpara>
   <simpara>
   Vereceðimiz son ifade örneði operatör-atama ifadeleri ile birleþiktir.
   $a'nýn deðerini 1 arttýrmak istediðinizde, basitçe '$a++' ya da '++$a'
   yazmanýzýn yeterli olduðunu zaten biliyorsunuz. Ama ya birden
   fazla bir deðer eklemek istiyorsanýz, mesela 3? '$a++' ifadesini
   birkaç kez yazabilirsiniz, ama bunun en verimli ya da kullanýþlý yöntem
   olmadýðý oldukça açýk. '$a = $a + 3' çok daha yaygýn bir kullanýmdýr.
   '$a + 3' $a'nýn deðerini 3 arttýrýr ve bu deðeri $a'ya geri atar,
   böylece $a'nýn deðeri 3 arttýrýlmýþ olur. PHP'de, C benzeri birkaç
   dilde olduðu gibi, bunu daha temiz gözükecek ve daha kýsa biçimde
   yazabileceðiniz bir kullaným daha vardýr. $a'nýn mevcut deðerine
   3 ekleme iþlemi '$a += 3' biçiminde yazýlabilir. Bunun anlamý tam olarak
   "$a'nýn deðerini al, 3 ekle, ve yeni deðeri $a'ya geri ata" olacaktýr.
   Daha kýsa ve temiz olmasýnýn yanýnda, bu kod daha hýzlý çalýþtýrýlacaktýr.
   '$a += 3' iþleminin deðeri, normal bir atama iþleminde olduðu gibi,
   atanan deðerdir. Bu deðerin 3 OLMADIÐINA dikkat edin, bu deðer
   $a artý 3'ün deðerlerinin birleþimidir (bu $a'ya atanan deðerdir).
   Bu operatör-atama modunda herhangi bir iki kademeli operatör kullanýlabilir,
   '$a -= 5' gibi ($a'nýn deðerinden 5 çýkar) ya da '$b *= 7 gibi ($b'nin deðerini
   7 ile çarp).
   </simpara>
   <para>
   Baþka bir dilde görmediyseniz size farklý gözükebilecek bir ifade daha vardýr,
   o da üçlü koþul operatörüdür:
   </para>
   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$birinci ? $ikinci : $ucuncu
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
   Ýlk altifadenin deðeri &true; (sýfýrdan farklý) ise, ikinci altifade
   çalýþtýrýlýr ve bu koþullu ifadenin sonucu olur. Aksi takdirde,
   üçüncü altifade çalýþtýrýlýr ve koþullu ifadenin sonucu bu olur.
   </para>
   <para>
   Aþaðýdaki örnek ön ve son arttýrma iþlemleri ve ifadelerin geneli
   hakkýnda anlayýþýnýzý geliþtirmenizi saðlamanýza biraz daha
   katký saðlayacaktýr:
   </para>
   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
function double($i)
{
    return $i*2;
}
$b = $a = 5;        /* beþ deðerini $a ve $b deðiþkenlerine atar */
$c = $a++;          /* son-arttýrma, $a'nýn özgün deðerini (5) $c'ye atar */
$e = $d = ++$b;     /* ön-arttýrma, $b'nin arttýrýlmýþ deðerini (6) $d ve $e'ye atar */

/* bu noktada, $d ve $e 6 deðerine sahiptir */

$f = double($d++);  /* $d'nin deðerini arttýrmadan önce $d'nin deðerinin iki katýný $f'ye atar,
                       2*6 = 12 */
$g = double(++$e);  /* $e'nin deðerini arttýrdýktan sonra iki katýný alýp $g'ye atar,
                       2*7 = 14 */
$h = $g += 10;      /* önce, $g 10 arttýrýlýr ve 24 deðerine sahip olur.
                       Atama deðeri olan (24) $h'ye atanýr ve $h de 24 deðerine sahip olur. */
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
   Bazý ifadeler deyim olarak kabul edilebilir. Bu durumda, deyim
   'ifade' ';' þeklinde, noktalý virgülle sonlandýrýlmýþ bir ifade þeklinde
   olacaktýr. '$=$a=5' olduðunda, $a=5 geçerli bir ifadedir, ancak kendi baþýna
   bir deyim deðildir. '$b=$a=5' ise geçerli bir deyimdir.
   </simpara>
   <simpara>
   Son olarak dile getirmemiz gereken bir konu da ifadelerin gerçek deðeridir.
   Birçok olayda, çoðunlukla da koþula baðlý çalýþmalarda ve döngülerde, ifadenin
   kendi deðeri ile deðil, &true; ya da &false; olmasý ile ilgileniyor olacaksýnýz.
    
    <!-- (PHP doesn't have a
    dedicated boolean type) : WRONG, PHP does. -->
    
    &true; ve &false; deðiþmezleri (büyük-küçük harf duyarsýz) iki olasý boolean
    deðerdir. Mümkün olduðunda, bir ifade otomatik olarak boolean'a çevrilir.
    <link linkend="language.types.typecasting">tip-çevrimi</link> bölümünden
    bunun nasýl gerçekleþtiði ile ilgili detaylara ulaþabilirsiniz.
   </simpara>
   <simpara>
   PHP ifadeleri tümüyle ve çok güçlü bir biçimde uygulamaya geçirmiþtir,
   ve bunlarýn tümünü belgelemek bu kýlavuzun kapsamýnýn dýþýnda yer
   almaktadýr. Yukarýdaki örnekler size ifadelerin ne olduðu ve nasýl kullanýþlý
   ifadeler yaratabileceðiniz hakkýnda yeterli fikri verecektir. Bu kýlavuzun
   geri kalanýnda, geçerli herhangi bir PHP ifadesini belirtmek için
   <varname>expr</varname> sözcüðünü kullanacaðýz.
   </simpara>
  </chapter>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
