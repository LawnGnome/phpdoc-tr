<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.6 $ -->
<!-- $Header: /home/svn/phpsvn_tmp/cvsrepo/phpdoc/tr/language/constants.xml,v 1.6 2008-01-11 08:53:45 sezer Exp $ -->
 <chapter xml:id="language.constants" xmlns="http://docbook.org/ns/docbook">
  <title>Değişmezler</title>

  <simpara>
  Bir değeri saklamak için kullanılan tanımlayıcıya (isme) değişmez denir.
  Ýsimden anlaşılacağı gibi, betiğin çalışması sırasında bu değer
  değiştirilemez (<link linkend="language.constants.predefined">
   sihirli değişmezler</link> haricinde, bunlar gerçekte değişmez
   değillerdir). Değişmezler öntanımlı olarak büyük-küçük harf duyarlıdır.
   Geleneksel olarak, değişmez isimleri her zaman büyük harfle yazılır.
  </simpara>
  <para>
  Bir değişmeze verilen isim PHP'de varolan diğer tüm isimlerle aynı
  kurallara tabidir. Geçerli bir değişmez ismi bir harfle ya da alttan çizgi
  ile başlar, herhangi bir sayıda harf, rakkam ya da alttan çizgi ile devam
  eder. Bir düzenli ifade olarak, şu şekilde ifade edilebilir:
   <literal>[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*</literal>
  </para>
  <para>
   <example>
    <title>Geçerli ve geçersiz değişmez isimleri</title>
    <programlisting role="php">
<![CDATA[
<?php

// Geçerli değişmez isimleri
define("FOO",     "bir şey");
define("FOO2",    "başka bir şey");
define("FOO_BAR", "daha başka bir şey");

// Geçersiz değişmez isimleri
define("2FOO",    "bir şey");

// Bu geçerli olmasına rağmen kullanmaktan kaçınılmalıdır:
// PHP bir gün betiğinizin çalışmasını bozacak bir sihirli değişmez
// kullanmaya başlayabilir
define("__FOO__", "bir şey"); 

?>
]]>
    </programlisting>
   </example>
  </para>
  <note>
   <simpara>
   Burada harf olarak kullandığımız kavram, a-Z, A-Z ve
   127 ile 255 (0x7f-0xff) arasında kalan ASCII karakterlerdir.
   </simpara>
  </note>

  <simpara>
  &link.superglobals; için olduğu gibi, değişmezler global kapsamda (global scope)
  yer alırlar. Değişmezlere, uygulamanız içinde hangi kapsamda olduklarını
  önemsemeden erişebilirsiniz. Kapsam kavramı hakkında daha fazla bilgi
  için, kılavuzun <link linkend="language.variables.scope">değişken kapsamı</link>
  bölümünü okuyun.
  </simpara>

  <sect1 xml:id="language.constants.syntax">
   <title>Söz dizimi</title>
   <simpara>
   Bir değişmezi 
    <function>define</function> fonksiyonunu kullanarak tanımlayabilirsiniz.
    Bir değişmez tanımlandıktan sonra, değiştirilemez ya da tanımlama geri alınamaz.
   </simpara>
   <simpara>
   Yalnızca tek boyutlu veri (<type>boolean</type>, <type>integer</type>, 
    <type>float</type> and <type>string</type>) değişmez içinde depolanabilir.
   </simpara>
   <simpara>
   Bir değişmezin taşıdığı değeri basitçe ismini kullanarak alabilirsiniz.
   Diğer değişkenlerin aksine, değişmezlerin önüne <literal>$</literal>
   işareti eklemeniz gerekmez. Bunun yanında, değişmezin ismini dinamik olarak
   elde etmek istiyorsanız <function>constant</function> fonksiyonunu da
   kullanabilirsiniz. Tanımlı tüm değişmezlerin bir listesini edinmek için,
   <function>get_defined_constants</function> fonksiyonunu kullanabilirsiniz.
   </simpara>
   <note>
    <simpara>
    Değişmezler ve (global) değişkenler farklı isimalanlarında bulunurlar.
    Bu, örneğin &true; ile <varname>$TRUE</varname> değerlerinin
    genellikle farklı oldukları anlamına gelir.
    </simpara>
   </note>
   <simpara>
   Tanımlanmamış bir değişmez kullanıyorsanız, PHP değişmezin kendi ismini
   kullanmak istediğinizi düşünür ve değişmezi bir <type>karakter dizisi (string)</type>
   olarak çağırmışsınız gibi davranır. Bu durumda <link linkend="ref.errorfunc">E_NOTICE</link>
   seviyesinde bir hata mesajı üretilir. Ayrıca <link linkend="language.types.array.foo-bar">$foo[bar]</link>
   kullanımının neden yanlış olduğu (<literal>bar</literal> değerini <function>define</function> ile
   bir değişmez olarak tanımlamadığınız sürece) ile ilgili kılavuzun ilgili bölümünü okumanızı öneririz.
   Bir değişmezin tanımlanıp tanımlanmadığını kontrol etmek için, <function>defined</function>
   fonksiyonunu kullanabilirsiniz.
   </simpara>
   <para>
    Değişmezler ve değişkenler arasındaki farklar:
    <itemizedlist>
     <listitem>
      <simpara>
      Değişmezler kendilerinden önce dolar işareti (<literal>$</literal>) içermezler;
      </simpara>
     </listitem>
     <listitem>
      <simpara>
      Değişmezler yalnızca <function>define</function> fonksiyonu kullanılarak
      tanımlanabilirler, basit bir değer ataması ile tanımlanamazlar;
      </simpara>
     </listitem>
     <listitem>
      <simpara>
      Değişmezler, değişkenlerin tab&#208; olduğu kapsam kurallarından bağımsız
      olarak tanımlanabilir ve erişilebilirler;
      </simpara>
     </listitem>
     <listitem>
      <simpara>
      Değişmezler bir defa tanımlandıktan sonra yeniden tanımlanamaz ya da
      bu tanımlama ortadan kaldırılamaz;
      </simpara>
     </listitem>
     <listitem>
      <simpara>
      Değişmezlere yalnızca tek boyutlu değerler atanabilir.
       </simpara>
     </listitem>
    </itemizedlist>
   </para>

   <para>
    <example>
     <title>Değişmezlerin Tanımlanması</title>
     <programlisting role="php">
<![CDATA[
<?php
define("CONSTANT", "Merhaba dünya.");
echo CONSTANT; // "Merhaba dünya" çıktısını verir.
echo Constant; // "Constant" çıktısını görüntüler ve bir uyarı mesajı üretir.
?>
]]>
     </programlisting>
    </example>

   </para>

   <simpara>
    <link linkend="language.oop5.constants">Sınıf Değişmezleri</link>ni de inceleyin.
   </simpara>
  </sect1>
  
  <sect1 xml:id="language.constants.predefined">
   <title>Sihirli değişmezler</title>

   <simpara>
   PHP, geniş bir <link
    linkend="reserved.constants">öntanımlı değişmezler</link> grubunu
    çalışan tüm betiklerin kullanımına sunar. Öte yandan, bu değişmezlerin çoğu
    çeşitli uzantılar tarafından yaratılır ve yalnızca bu uzantılar mevcut olduklarında
    vardırlar. Uzantı dinamik olarak yüklendiğinde ya da PHP ile birlikte derlendiğinde
    bu değişmezler de kullanılabilir durumda olacaklardır.
   </simpara>
   
   <para>
   Kullanıldıkları yere göre değişen beş sihirli değişmez vardır. Örneğin,
    <constant>__LINE__</constant> değişmezinin değeri uygulamada kullanıldığı
    yere göre değişir. Bu özel değişmezler büyük-küçük harf duyarsızdır ve aşağıdaki listede
    belirtilmiştir
   </para>
   <para>
    <table>
     <title>Birkaç "sihirli" PHP değişmezi</title>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>Ýsim</entry>
        <entry>Açıklama</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry><constant>__LINE__</constant></entry>
        <entry>
         Dosyadaki mevcut satır numarası.
        </entry>
       </row>
       <row>
        <entry><constant>__FILE__</constant></entry>
        <entry>
	Dosyanın tüm dosya yolu ve dosya ismi. Include komutu içinde kullanıldığında,
	eklenti yapılan dosyanın ismi döndürülür. PHP 4.0.2'den itibaren, 
	<constant>__FILE__</constant> değeri her zaman mutlak dosya yolunu (absolute path)
	içerirken, daha eski sürümler bazı durumlarda göreceli dosya yolunu (relative path)
	içerebilir.
        </entry>
       </row>
       <row>
        <entry><constant>__FUNCTION__</constant></entry>
        <entry>
	Fonksiyon ismi (PHP 4.3.0 ile eklenmiştir). PHP 5 itibariyle bu değişmez
	fonksiyon ismini tanımlandığı gibi döndürür (büyük-küçük harf duyarlı).
	PHP 4 sürümünde bu değer her zaman küçük harflerden oluşur.
        </entry>
       </row>
       <row>
        <entry><constant>__CLASS__</constant></entry>
        <entry>
	Sınıf ismi (PHP 4.3.0 ile eklenmiştir). PHP 5 itibariyle bu değişmez
	sınıf ismini tanımlandığı gibi döndürür (büyük-küçük harf duyarlı). PHP 4
	sürümünde bu değer her zaman küçük harflerden oluşur.
        </entry>
       </row>
       <row>
        <entry><constant>__METHOD__</constant></entry>
        <entry>
	Sınıf metod ismi (PHP 5.0.0 ile eklenmiştir). Metod ismi tanımlandığı
	gibi döndürülür (büyük-küçük harf duyarlı).
        </entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </para>
   <para>
    Ayrıca bakın
    <function>get_class</function>,
    <function>get_object_vars</function>,
    <function>file_exists</function>&listendand;
    <function>function_exists</function>.
   </para>
  </sect1>
 </chapter>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
