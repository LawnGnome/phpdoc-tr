<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.1 $ -->
<!-- EN-Revision: 1.1 Maintainer: nilgun Status: ready -->
<sect1 xml:id="function.include" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title><function>include</function></title>
 <simpara>
  <function>include</function> deyimi belirtilen dosyayı betiğe ekler ve
  içeriğini değerlendirir.
 </simpara>
 <simpara>
  Aşağıdaki belgeleme aynı zamanda <function>require</function> için de
  geçerlidir. <function>include</function> ile
  <function>require</function> arasındaki fark, okunacak ve işlenecek
  dosya bulunamadığında, <function>include</function> tarafından <link
  linkend="errorfunc.constants.errorlevels.e-warning">Uyarı</link>,
  <function>require</function> tarafından <link
  linkend="errorfunc.constants.errorlevels.e-warning">Ölümcül Hata</link>
  üretilmesidir. Başka bir deyişle, okunup işlenmek istenen dosya
  bulunamıyorsa, betiğin durdurulması için <function>require</function>
  kullanmanız gerekmektedir. <function>include</function> bu şekilde
  davranmaz ve betiğin çalışmaya devam etmesine izin verir. Bu deyimi
  kullanmadan önce <link linkend="ini.include-path">include_path</link>
  ayarınızın doğru olduğundan emin olun. PHP 4.3.5'den önceki sürümlerde,
  dahil edilen dosyadaki okuma hatası bir uyarıya sebep oluyor ama betiğin
  çalışmasını durdurmuyordu. Bu sürümden itibaren, betiğin çalışması
  durdurulmaktadır.
 </simpara>
 <simpara>
  Betiğe dahil edilecek dosyalar için öncelikle bulunulan dizine göreli
  olarak <literal>include_path</literal> yönergesinde belirtilmiş dosya
  yollarına sonra da içinde bulunulan dizine bakılır. Örneğin,
  <literal>include_path</literal> yönergesinde <literal>belgeler</literal>
  bulunuyor olsun; içinde bulunduğunuz dizin de /siteler/ olsun;
  <filename>altbetikler/a.php</filename> dosyasını dahil ediyorsanız ve bu
  dosyada da <literal>include "b.php"</literal> varsa,
  <filename>b.php</filename> dosyası için önce <filename
  class="directory">/siteler/belgeler/</filename> dizinine sonra da
  <filename class="directory">/siteler/altbetikler/</filename> dizinine
  bakılacaktır. Dosya ismi <literal>./</literal> ile ya da
  <literal>../</literal> ile başlıyorsa, dosya yalnızca içinde bulunulan
  dizine göre aranır.
 </simpara>
 <simpara>
  Bir dosya bir betiğe dahil edildiğinde, bu dosyanın içerdiği kod,
  dosyanın dahil edildiği satır itibariyle ana betikte geçerli olan <link
  linkend="language.variables.scope">değişken uzayını</link> miras alır.
  Yani, dosyanın dahil edildiği satıra kadar mevcut değişkenlerin hepsi
  dahil edilen dosyanın içinde kullanılabilir olacaktır. Bunun yanında,
  dahil edilen dosyada tanımlanmış işlevlerin ve sınıfların tamamı ana
  betiğin genelinde tanımlanmış sayılır.
 </simpara>
 <para>
   <example>
    <title>- Basit bir <function>include</function> örneği</title>
    <programlisting role="php">
<![CDATA[
vars.php
<?php

$renk = 'yeşil';
$meyve = 'elma';

?>

dnm.php
<?php

echo "Bir $renk $meyve"; // -> Bir

include 'vars.php';

echo "Bir $renk $meyve"; // -> Bir yeşil elma

?>
]]>
    </programlisting>
   </example>
 </para>
 <simpara>
  <literal>include</literal> deyimi, bir işlevin içinde kullanılırsa dahil
  edilmek istenen dosyanın içindeki tüm kodlar sanki o işlev içinde
  tanımlanmış gibi çalıştırılacaktır. Bu durumda dahil edilen dosyadaki
  kodlar, işlevin, dosyanın dahil edildiği noktadaki değişken uzayını
  miras alacaktır. Bu kuralın istisnası dosya dahil edilmeden önce
  çözümleyici tarafından işleme sokulan  <link
  linkend="language.constants.predefined">sihirli sabitler</link>dir.
 </simpara>
 <para>
   <example>
   <title>- İşlev içi <code>include</code> kullanımı</title>
    <programlisting role="php">
<![CDATA[
<?php

function foo()
{
    global $renk;

    include 'vars.php';

    echo 'Bir $renk $meyve';
}

/* vars.php, foo() işlevinin etki alanındadır
 * dolayısıyla $meyve bu alanın dışında
 * kullanılamamaktadır. $renk ise global olarak
 * tanımlandığından kullanılabilir
 */
foo();                      // Bir yeşil elma
echo 'Bir $renk $meyve';    // Bir yeşil

?>
]]>
   </programlisting>
  </example>
 </para>
 <simpara>
  Bir dosya bir betiğe dahil edildiğinde, çözümleme işlemi PHP kipinden
  çıkıp hedef dosyanın başlangıcında HTML kipine geçer ve dosyanın sonuna
  kadar HTML kipinde kalır. Bu sebeple, hedef dosyanın içindeki kodlardan
  PHP kodları olarak çalıştırılacaklar <link
  linkend="language.basic-syntax.phpmode">PHP başlangıç ve bitiş
  etiketleri</link> arasına alınmalıdır.
 </simpara>
 <simpara>
  "<link linkend="ini.allow-url-fopen">URL fopen sarmalayıcıları</link>"
  PHP'de etkinleştirilmiş ise (öntanımlı yapılandırmada etkindirler),
  <literal>include</literal> deyiminde yerel dosya yolu belirtmek yerine
  (HTTP ya da desteklenen başka bir sarmalayıcı üzerinden - <xref
  linkend="wrappers"/> bölümününe bakınız) bir URL kullanabilirsiniz.
  Hedef sunucu, hedef dosyayı PHP kodu olarak çalıştırabiliyorsa, ana
  betikteki değişkenler dahil edilen dosyaya  bir URL istek dizgesi olarak
  HTTP GET ile aktarılabilir. Bu durum dahil edilen dosyaya ana dosyanın
  değişken uzayını miras olarak bırakmaktan biraz farklı bir şeydir; betik
  aslında uzak sunucuda çalıştırılıp yerel betiğe sonuçlar dahil
  edilmektedir.
 </simpara>
 &warn.no-win32-fopen-wrapper;
 <para>
  <example>
   <title>- HTTP üzerinden <code>include</code></title>
   <programlisting role="php">
<![CDATA[
<?php

/* Bu örnekte  mesela.dom sitesinin .php uzantılı dosyaları
 * çalıştırabildiği ama .txt uzantılıları çalıştırmadığı
 * varsayılmıştır. Ayrıca, buradaki 'Çalışır'ın manası
 * $foo ve $bar değişkenlerinin dahil edilen dosyada kullanılabilir
 * olduğudur. */

// Çalışmaz; dosya.txt dosyası mesela.dom sitesinde çalıştırılmaz
include 'http://mesela.dom/dosya.txt?foo=1&bar=2';

// Çalışmaz; yerel dosya sisteminde 'dosya.php?foo=1&bar=2'
// adında bir dosya olarak aranır.
include 'dosya.php?foo=1&bar=2';

// Çalışır.
include 'http://mesela.dom/dosya.php?foo=1&bar=2';

$foo = 1;
$bar = 2;
include 'dosya.txt';  // Çalışır.
include 'dosya.php';  // Çalışır.

?>
]]>
   </programlisting>
  </example>
 </para>
 <warning>
  <title>Güvenlik uyarısı</title>
  <para>
    Uzaktaki dosya uzaktaki sunucu tarafından işlenebilir (dosyanın
    uzantısına ve uzaktaki sunucunun PHP çalıştırıp çalıştırmadığına bağlı
    olarak). Ancak, elde edilecek çıktı yerel sunucuda çalıştırılacağından
    bu işlemin sonucu mutlaka geçerli bir PHP betiği üretmek olmalıdır.
    Dosyanın uzaktaki sunucuda işlenip sadece sonucun çıktılanmasını
    istiyorsanız <function>readfile</function> işlevi daha iyi bir seçim
    olacaktır. Aksi takdirde, uzakta çalıştırılan betiğin geçerli ve istenen
    kodu üretebilmesini güvence altına alabilmek için özel bir çaba harcamak
    gerekir.
  </para>
 </warning>
 <para>
  Ayrıca, bu konuyla ilgili olarak <link linkend="features.remote-files"
  >Uzaktaki dosyaların kullanımı</link> belgesiyle
  <function>fopen</function> ve <function>file</function> işlevlerine de
  bakınız.
 </para>
 <simpara>
  <literal>return</literal> kullanımı: Dahil edilen dosyanın içersinde, bu
  dosyanın işlenmesi durdurmak ve dahil eden betiğe geri dönmek için
  <function>return</function> kullanılabilir. Ayrıca, dahil edilen
  dosyalardan değer döndürmek de mümkündür. Normal bir işlevde olduğu
  gibi, <literal>include</literal> çağrısından elde edilen değeri bir
  değişkene atayabilirsiniz. Ancak bu durum, uzaktaki dosyalar için,
  sadece uzaktaki dosyanın çıktısı <link
  linkend="language.basic-syntax.phpmode">geçerli PHP başlangıç ve bitiş
  etiketlerine</link> sahipse (herhangi yerel bir dosyada olduğu gibi),
  kullanılabilir. Gerekli değişkenler bu etiketlerin arasında
  tanımlandığında dosyanın dahil edildiği noktadan itibaren kullanılabilir
  olacaklardır.
 </simpara>
 <para>
  <literal>include</literal> özel bir dil oluşumu olduğundan,
  değiştirgesinin parantez içine alınması gerekmez. Dönüş değerini
  karşılaştırırken buna dikkat edin.
  <example>
   <title>- <code>include</code> dönüş değerinin karşılaştırılması</title>
   <programlisting role="php">
<![CDATA[
<?php
// çalışmaz, include(('vars.php') == 'TAMAM') olarak değerlendirilir,
// sonuç include('') olur
if (include('vars.php') == 'TAMAM') {
    echo 'TAMAM';
}

// çalışır
if ((include 'vars.php') == 'TAMAM') {
    echo 'TAMAM';
}
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  <example>
   <title>- <code>include</code> ve <code>return</code> deyimleri</title>
    <programlisting role="php">
<![CDATA[
return.php
<?php

$var = 'PHP';

return $var;

?>

noreturn.php
<?php

$var = 'PHP';

?>

testreturns.php
<?php

$foo = include 'return.php';

echo $foo; // 'PHP' basar

$bar = include 'noreturn.php';

echo $bar; // 1 basar

?>
]]>
    </programlisting>
  </example>
 </para>
 <simpara>
  <literal>include</literal> işlemi başarılı olduğundan
  <literal>$bar</literal>, <literal>1</literal> değerine sahiptir.
  Yukarıdaki örnekler arasındaki farklara dikkat edin. Birincisi
  <function>return</function> deyimini dahil edilen dosyada kullanırken
  ikincisi kullanmıyor. Dosya dahil edilemediği durumda, &false;
  döndürülüyor ve bir <code>E_WARNING</code> üretiliyor.
 </simpara>
 <para>
  Dahil edilen dosyanın içinde tanımlanmış işlevler varsa,
  <function>return</function> deyiminden önce ya da sonra olduğundan
  bağımsız olarak ana betik içersinde kullanılabilirler. Dosya iki defa
  dahil edilmişse, PHP 5 ölümcül hata verir çünkü bildirilmiş işlevler
  tekrar bildirilmeye calışılmış olur. PHP 4 ise
  <function>return</function>'den sonra tanımlanmış işlevler için
  şikayetçi olmayacaktır. Dosyanın halihazırda dahil edilip edilmediğini
  kendiniz tespit edip koşula bağlı <function>return</function>
  çalıştırmak yerine, <function>include_once</function> kullanmanız
  önerilir.
 </para>
 <simpara>
  Bir PHP dosyasını bir değişkene "dahil" etmenin diğer bir yolu, çıktıyı
  <link linkend="ref.outcontrol">Çıktı Denetim İşlevleri</link>ni
  <function>include</function> ile birlikte kullanarak yakalamaktır. Örnek:
 </simpara>
 <para>
  <example>
   <title>- Bir PHP dosyasını bir dizgeye dahil etmek için tampon
     kullanımı</title>
    <programlisting role="php">
<![CDATA[
<?php
$string = get_include_contents('somefile.php');

function get_include_contents($filename) {
    if (is_file($filename)) {
        ob_start();
        include $filename;
        $contents = ob_get_contents();
        ob_end_clean();
        return $contents;
    }
    return false;
}

?>
]]>
    </programlisting>
  </example>
 </para>
 <para>
  Betiğinize dosyaları özdevinimli olarak dahil etmek için, &php.ini;
  içersindeki <link linkend="ini.auto-prepend-file"
  >auto_prepend_file</link> ve <link linkend="ini.auto-append-file"
  >auto_append_file</link> yapılandırma seçeneklerini inceleyebilirsiniz.
 </para>

 &note.language-construct;

 <simpara>
  Ayrıca, <function>require</function>,
  <function>require_once</function>, <function>include_once</function>,
  <function>readfile</function>, <function>virtual</function> ve
  <link linkend="ini.include-path">include_path</link>'a da bakınız.
 </simpara>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
