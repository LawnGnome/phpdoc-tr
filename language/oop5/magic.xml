<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.3 $ -->
<!-- $Header: /home/svn/phpsvn_tmp/cvsrepo/phpdoc/tr/language/oop5/magic.xml,v 1.3 2008-01-11 08:53:45 sezer Exp $ -->
 <sect1 xml:id="language.oop5.magic" xmlns="http://docbook.org/ns/docbook">
  <title>Sihirli (Magic) Metodlar</title>
  <para>
   <literal>__construct</literal>,
   <literal>__destruct</literal>
   (bakiniz <link linkend="language.oop5.decon">Ilklendiriciler ve Sonlandiricilar</link>),
   <literal>__call</literal>,
   <literal>__get</literal>,
   <literal>__set</literal>,
   <literal>__isset</literal>,
   <literal>__unset</literal>
   (bakiniz <link linkend="language.oop5.overloading">Overloading</link>),
   <literal>__sleep</literal>,
   <literal>__wakeup</literal>,
   <literal>__toString</literal>,
   <literal>__set_state</literal>,
   <link linkend="language.oop5.cloning">__clone</link> ve
   <link linkend="language.oop5.autoload">__autoload</link>
   fonksiyonlari, PHP siniflari içerisinde sihirli fonksiyonlar olarak bilinir.
   Bir sinif içerisinde, yukaridaki fonksiyon isimlerini ancak bu fonksiyonlarin
   sihirli özelliklerinden faydalanmak istediginizde kullanabilirsiniz.
  </para>

  <caution>
   <simpara>
   PHP __ ile baslayan tüm fonksiyon isimlerini sihirli olarak ayirmistir.
   Bu sebeple __ ile baslayan fonksiyon isimleri kullanmamanizi öneririz.
   </simpara>
  </caution>
 
  <sect2 xml:id="language.oop5.magic.sleep">
   <title><literal>__sleep</literal> ve <literal>__wakeup</literal></title>
   <para>
    <function>serialize</function> fonksiyonu, sinifiniza dahil bir
    sihirli <literal>__sleep</literal> fonksiyonu olup olmadigini kontrol eder.
    Bu fonksiyon mevcutsa, serialization isleminden önce bu fonksiyon çalistirilir.
    Bu fonksiyon ile nesne üzerinde temizlik yapabilir ve serialize edilmesi
    gereken nesneye ait tüm degiskenleri içeren bir dizinin döndürülmesini
    saglayabilirsiniz.
   </para>
   <para>
   <literal>__sleep</literal> fonksiyonunun alisilageldik kullaniminda
   tüm veritabani baglantilari kapatilir, beklemede olan veri islemlerinin
   onaylanmasi ve benzeri temizleme islemleri de buna dahildir.
   Tümüyle kaydedilmesi gerekmeyen büyük veri parçalari sözkonusu oldugunda
   yine bu fonksiyondan faydalanabilirsiniz.
   </para>
   <para>
   <function>unserialize</function> fonksiyonu tersine bir islem yaparak
   <literal>__wakeup</literal> sihirli fonksiyonunun varligini arastirir.
   Bu fonksiyon mevcutsa, nesnenin sahip oldugu tüm kaynaklar yeniden
   olusturulmaya çalisilir.
   </para>
   <para>
   <literal>__wakeup</literal> fonksiyonunun alisilageldik kullanimi,
   serialization islemi sirasinda kaybolan veritabani baglantilarinin yeniden kurulmasidir.
   Ayrica nesne ile ilgili diger baslangiç islemleri de gerçeklestirilebilir.
   </para>
   <example>
    <title>Sleep ve wakeup</title>
    <programlisting role="php">
<![CDATA[
<?php
class Connection {
    protected $link;
    private $server, $username, $password, $db;
    
    public function __construct($server, $username, $password, $db)
    {
        $this->server = $server;
        $this->username = $username;
        $this->password = $password;
        $this->db = $db;
        $this->connect();
    }
    
    private function connect()
    {
        $this->link = mysql_connect($this->server, $this->username, $this->password);
        mysql_select_db($this->db, $this->link);
    }
    
    public function __sleep()
    {
        mysql_close($this->link);
    }
    
    public function __wakeup()
    {
        $this->connect();
    }
}
?>
]]>
    </programlisting>
   </example>
  </sect2>

  <sect2 xml:id="language.oop5.magic.tostring">
   <title><literal>__toString</literal></title>
   <para>
    <literal>__toString</literal> metodu, sinif bir karakter dizisine çevrildiginde
    nasil davranilacagini belirler.
   </para>
   <example>
    <title>Basit bir örnek</title>
    <programlisting role="php">
<![CDATA[
<?php
// Basit bir sinif tanimi
class TestClass
{
    public $foo;

    public function __construct($foo) {
        $this->foo = $foo;
    }

    public function __toString() {
        return $this->foo;
    }
}

$class = new TestClass('Merhaba');
echo $class;
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Merhaba
]]>
    </screen>
   </example>
   <para>
   <literal>__toString</literal> metodu, <function>echo</function> ya da
   <function>print</function> fonksiyonlari ile birlikte kullanilmadigi
   sürece kendi basina bir deger tasimaz.
   </para>
   <example>
    <title><literal>__toString</literal> kullanildigi durumlar</title>
    <programlisting role="php">
<![CDATA[
<?php
// __toString çagrilir
echo $class;

// __toString çagrilir (echo için normal bir parametre)
echo 'metin', $class;

// __toString çagrilmaz (önce birlestirme operatörü kullanilmis)
echo 'metin' . $class;

// __toString çagrilmaz (önce karakter dizisine çevrilmis)
echo (string) $class;

// __toString çagrilmaz (önce karakter dizisine çevrilmis)
echo "metin $class";
?>
]]>
    </programlisting>
   </example>
  </sect2>

  <sect2 xml:id="language.oop5.magic.set-state">
   <title><literal>__set_state</literal></title>
   <para>
    Bu <link linkend="language.oop5.static">static</link> metod, <function>var_export</function>
    tarafindan disa aktarilmis siniflar için PHP 5.1.0 sürümünden beri kullanilmaktadir.
   </para>
   <para>
   Bu metod için tek parametre, <literal>array('property' => value, ...)</literal> formunda
   disa aktarilmis özellikleri içeren bir dizidir.
   </para>
  </sect2>
 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
