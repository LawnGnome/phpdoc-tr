<?xml version="1.0" encoding="iso-8859-9"?>
<!-- $Revision: 1.1 $ -->
<sect1 id="language.oop5.patterns">
 <title>Modeller (Patterns)</title>
 <para>
  Modeller, en iyi uygulamalarý ve doðru tasarýmlarý betimleme yöntemidir.
  Modeller ile genel programlama sorunlarýna esnek çözümler aranmaktadýr.
 </para>

 <sect2 id="language.oop5.patterns.factory">
  <title>Factory</title>
  <para>
  Factory modeli, çalýþma zamanýnda (runtime) nesnelerin yaratýlmasýný saðlar.
  Factory modeli olarak adlandýrýlmasýnýn sebebi, nesnenin "üretiminden" sorumlu
  olmasýdýr. Parametrelendirilmiþ Factory, sýnýfýn ismini argüman olarak alarak
  nesneyi oluþturur.
  </para>
  <example>
   <title>Parametrelendirilmiþ Factory Metodu</title>
   <programlisting role="php">
<![CDATA[
<?php
class Example
{
    // Parametrelendirilmiþ factory metodu
    public static function factory($type)
    {
        if (include_once 'Drivers/' . $type . '.php') {
            $classname = 'Driver_' . $type;
            return new $classname;
        } else {
            throw new Exception ('Sürücü bulunamadý');
        }
    }
}
?>
]]>
   </programlisting>
   <para>
   Bir sýnýf içerisinde bu metod tanýmlanarak, sürücülerin çalýþma esnasýnda
   yüklenmesi saðlanýr. <literal>Example</literal> sýnýfý bir veritabaný soyutlama
   sýnýfý (database abstraction class) olsaydý, <literal>MySQL</literal> ve
   <literal>SQLite</literal> sürücülerinin yüklenmesi iþlemi aþaðýdaki biçimde
   yapýlabilirdi:
   </para>
   <programlisting role="php">
<![CDATA[
<?php
// MySQL sürücüsünü yükle
$mysql = Example::factory('MySQL');

// SQLite sürücüsünü yükle
$sqlite = Example::factory('SQLite');
?>
]]>
   </programlisting>
  </example>
 </sect2>

 <sect2 id="language.oop5.patterns.singleton">
  <title>Singleton</title>
  <para>
  Singleton modeli, bir sýnýfýn tek bir örneðine ihtiyaç duyulduðu durumlarda
  uygulanýr. Bu duruma en genel örnek, veritabaný baðlantýsýdýr. Bu model kullanýlarak,
  tek bir örneðin baþka birçok nesne tarafýndan eriþilebilir olmasý saðlanabilir.
  </para>
  <example>
   <title>Singleton Fonksiyonu</title>
   <programlisting role="php">
<![CDATA[
<?php
class Example
{
    // Sýnýfýn bir örneðini taþýr
    private static $instance;
    
    // Private olarak tanýmlanmýþ bir ilklendirici, nesnenin direk olarak yaratýlmasýný engeller
    private function __construct() 
    {
        echo 'Ýlklendirildim';
    }

    // Singleton metodu
    public static function singleton() 
    {
        if (!isset(self::$instance)) {
            $c = __CLASS__;
            self::$instance = new $c;
        }

        return self::$instance;
    }
    
    // Örnek method
    public function bark()
    {
        echo 'Woof!';
    }

    // Kullanýcýlarýn örneði klonlamasýný engelle
    public function __clone()
    {
        trigger_error('Klon yaratýlmasýna izin verilmez.', E_USER_ERROR);
    }

}

?>
]]>
   </programlisting>
   <para>
   Aþaðýdaki örnek <literal>Example</literal> sýnýfý için tek bir örnek
   alýnmasýný saðlar.
   </para>
   <programlisting role="php">
<![CDATA[
<?php
// Bu iþlem baþarýsýz olur çünkü ilklendirici private olarak tanýmlandý
$test = new Example;

// Bu iþlem her zaman sýnýfa ait tek bir örnek verir
$test = Example::singleton();
$test->bark();

// Bu bir E_USER_ERROR mesajý oluþturur.
$test_clone = clone($test);

?>
]]>
   </programlisting>
  </example>
 </sect2>

</sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
