<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 288721 Maintainer: nilgun Status: ready -->
<!-- CREDITS: tpug, sezer -->
<sect1 xml:id="language.oop5.patterns" xmlns="http://docbook.org/ns/docbook">
 <title>Hazır Yöntemler</title>
 <para>
  Hazır yöntemler, en iyi uygulamaları ve doğru tasarımları açıklamanın bir
  yoludur. Hazır yöntemler genel programlama sorunlarına esnek bir çözüm
  getirir.
 </para>

 <sect2 xml:id="language.oop5.patterns.factory">
  <title>Üreteç Yöntemi</title>
  <para>
    Üreteç yöntemi, nesnelerin çalışma anında örneklenmesini sağlar. Böyle
    adlandırılmasının sebebi, nesnenin "üretiminden" sorumlu olmasıdır.
    Üreteç yöntemi değiştirge olarak sınıf ismini alır ve onunla nesneyi
    oluşturur.
  </para>
  <example>
   <title>Değiştirgeli Üreteç Yöntemi</title>
   <programlisting role="php">
<![CDATA[
<?php
class Örnek
{
    // Değiştirgeli üreteç yöntemi
    public static function üret($tür)
    {
        if (include_once 'Drivers/' . $tür . '.php') {
            $sınıfadı = 'Driver_' . $tür;
            return new $sınıfadı;
        } else {
            throw new Exception ('Sürücü bulunamadı');
        }
    }
}
?>
]]>
   </programlisting>
   <para>
    Bu yöntemi bir sınıf içinde tanımlarsanız sürücülerin çalışma anında
    yüklenmesini sağlayabilirsiniz. <literal>Örnek</literal> sınıfı bir
    veritabanı soyutlama sınıfı olsaydı, <literal>MySQL</literal> ve
    <literal>SQLite</literal> sürücülerinin yüklenmesi işlemi aşağıdaki gibi
    yapılabilirdi:
   </para>
   <programlisting role="php">
<![CDATA[
<?php
// MySQL sürücüsünü yükle
$mysql = Örnek::üret('MySQL');

// SQLite sürücüsünü yükle
$sqlite = Örnek::üret('SQLite');
?>
]]>
   </programlisting>
  </example>
 </sect2>

 <sect2 xml:id="language.oop5.patterns.singleton">
  <title>Tek Örnek Yöntemi</title>
  <para>
    Tek örnek yöntemi, bir sınıfın tek bir örneğine ihtiyaç duyuldugu
    durumlarda tanımlanır. Bu duruma en genel örnek, veritabanı
    bağlantısıdır. Tek örnek yöntemi gerçeklenerek, tek bir nesne örneğinin
    başka birçok nesne tarafından erişilebilir olması sağlanabilir.
  </para>
  <example>
   <title>- Tek Örnek İşlevi</title>
   <programlisting role="php">
<![CDATA[
<?php
class Örnek
{
    // Sınıf örneğini bu değişkende saklayacağız
    private static $nesneÖrneği;

    // Private tanımlı bir kurucu,
    // nesnenin doğrudan oluşturulmasını engeller
    private function __construct()
    {
        echo 'Ben hazırım, ';
    }

    // Tek örnek yöntemi
    public static function tekÖrnek()
    {
        if (!isset(self::$nesneÖrneği)) {
            $c = __CLASS__;
            self::$nesneÖrneği = new $c;
        }

        return self::$nesneÖrneği;
    }

    // Başka bir yöntem
    public function bak()
    {
        echo 'bak!';
    }

    // Kullanıcıların örneği kopyalamasını engelle
    public function __clone()
    {
        trigger_error('Nesnenin kopyalanmasına izin verilmez.', E_USER_ERROR);
    }

}

?>
]]>
   </programlisting>
   <para>
    Yukarıdaki örnek <literal>Örnek</literal> sınıfının sadece tek bir
    örneğinin alınmasına izin verir.
   </para>
   <programlisting role="php">
<![CDATA[
<?php
// Bu işlem başarısız olur çünkü kurucu private tanımlı
$deneme = new Örnek;

// Bununla sınıfın daima tek örneği alınabilir
$deneme = Örnek::tekÖrnek();
$deneme->bak();

// Bu bir E_USER_ERROR iletisi oluşturur.
$deneme_kopyası = clone($deneme);

?>
]]>
   </programlisting>
  </example>
 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
