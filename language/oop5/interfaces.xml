<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 283798 Maintainer: nilgun Status: ready -->
<!-- CREDITS: tpug, sezer -->
 <sect1 xml:id="language.oop5.interfaces" xmlns="http://docbook.org/ns/docbook">
  <title>Nesne Arayüzleri</title>
  <para>
    Nesne arayüzleri, bir sınıfın gerçeklemesi gereken yöntemlerin
    belirtildiği kodu, bu yöntemlerin nasıl yönetileceğini tanımlamaksızın
    oluşturmanıza imkan sağlar.
  </para>
  <para>
    Arayüzler, standart sınıflardan farklı olarak hiçbir yöntemin içeriği
    tanımlanmaksızın <literal>interface</literal> anahtar sözcüğü kullanılarak
    tanımlanırlar.
  </para>
  <para>
    Bir arayüzdeki tüm yöntemler, arayüzün doğası gereği <code>public</code>
    olarak bildirilmelidir.
  </para>
  <sect2 xml:id="language.oop5.interfaces.implements">
   <title><code>implements</code> işleci</title>
   <para>
    Bir arayüzü gerçeklemek için, <literal>implements</literal> işleci
    kullanılır. Arayüzdeki tüm yöntemler bir sınıf içersinde
    gerçeklenmelidir; aksi takdirde bir ölümcül hata alırsınız. Bir sınıfın,
    birden fazla arayüz tanımlaması arayüzler virgülle ayrılarak sağlanabilir.
   </para>
   <note>
    <para>
    Belirsizliğe yol açacağından, bir sınıf aynı işlev isimlerine sahip iki
    arayüz gerçekleyemez.
    </para>
   </note>
   <note>
    <para>
     Arayüzler, sınıflar gibi <literal>extend</literal> işleciyle
     genişletilebilir.
    </para>
   </note>
  </sect2>
  <sect2 xml:id="language.oop5.interfaces.constants">
   <title>Sabitler<literal></literal></title>
   <para>
    Arayüzlerin sabitlerinin olması mümkündür. Arayüz sabitleri tıpkı <link
    linkend="language.oop5.constants">sınıf sabitleri</link> gibi çalışırlar.
    Kendilerini miras alan sınıflar veya arayüzler tarafından geçersiz
    kılınamazlar.
   </para>
  </sect2>
  <sect2 xml:id="language.oop5.interfaces.examples">
   &reftitle.examples;
   <example xml:id="language.oop5.interfaces.examples.ex1">
    <title>- Arayüz örneği</title>
     <programlisting role="php">
<![CDATA[
<?php
// 'iTemplate' arayüzünü tanımlayalım
interface iTemplate
{
    public function setVariable($name, $var);
    public function getHtml($template);
}

// Arayüzü gerçekleyelim
// Bu çalışacaktır
class Template implements iTemplate
{
    private $vars = array();

    public function setVariable($name, $var)
    {
        $this->vars[$name] = $var;
    }

    public function getHtml($template)
    {
        foreach($this->vars as $name => $value) {
            $template = str_replace('{' . $name . '}', $value, $template);
        }

        return $template;
    }
}

// Bu çalışmayacaktır
// Ölümcül hata: BadTemplate sınıfı 1 soyut yöntem içermektedir
// dolayısıyla soyut olarak tanımlanması gerekir (iTemplate::getHtml)
class BadTemplate implements iTemplate
{
    private $vars = array();

    public function setVariable($name, $var)
    {
        $this->vars[$name] = $var;
    }
}

?>
]]>
    </programlisting>
   </example>
   <example xml:id="language.oop5.interfaces.examples.ex2">
    <title>- Genişletilebilir Arayüzler</title>
     <programlisting role="php">
<![CDATA[
<?php
interface a
{
    public function foo();
}

interface b extends a
{
    public function baz(Baz $baz);
}

// Bu çalışır
class c implements b
{
    public function foo()
    {
    }

    public function baz(Baz $baz)
    {
    }
}

// Bu çalışmaz, ölümcül hatayla sonuçlanır
class d implements b
{
    public function foo()
    {
    }

    public function baz(Foo $foo)
    {
    }
}
?>
]]>
     </programlisting>
   </example>
   <example xml:id="language.oop5.interfaces.examples.ex3">
    <title>- Çok sayıda anayüz oluşturma</title>
     <programlisting role="php">
<![CDATA[
<?php
interface a
{
    public function foo();
}

interface b
{
    public function bar();
}

interface c extends a, b
{
    public function baz();
}

class d implements c
{
    public function foo()
    {
    }

    public function bar()
    {
    }

    public function baz()
    {
    }
}
?>
]]>
     </programlisting>
   </example>
   <example xml:id="language.oop5.interfaces.examples.ex4">
    <title>- Arayüzler ve sabitleri</title>
     <programlisting role="php">
<![CDATA[
<?php
interface a
{
    const b = 'Arayüz sabiti';
}

// Şunu basar: Arayüz sabiti
echo a::b;


// Sabitler geçersiz kılınamayacağından bu çalışmaz.
// Sınıf sabitleri için de bu böyledir.
class b implements a
{
    const b = 'Sınıf sabiti';
}
?>
]]>
     </programlisting>
   </example>
   <simpara>
   Ayrıca bakınız: <link linkend="language.operators.type">instanceof</link> işleci.
   </simpara>
  </sect2>

 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
