<?xml version="1.0" encoding="iso-8859-9"?>
<!-- $Revision: 1.1 $ -->
 <sect1 id="language.oop5.overloading">
  <title>Overloading</title>

  <para>
  Tüm metod çaðrýmlarý ve üye eriþimleri __call, __get ve __set
  metodlarý kullanýlarak overload edilebilir. Bu metodlar yalnýzca
  nesneniz ya da miras alýnan nesneniz eriþim saðlamak istediðiniz
  üyeyi ya da metodu içermiyorsa kullanýlabilir. Hiçbir overloading
  metodu <link linkend="language.oop5.static">static</link> olarak
  tanýmlanmamalýdýr. PHP 5.0.x sürümünde, tüm overloading metodlarý
  <link linkend="language.oop5.visibility">public</link> olarak
  tanýmlanmalýdýr.
  </para>
  <para>
  PHP 5.1.0 sürümünden itibaren, <function>isset</function> ve <function>unset</function>
  fonksiyonlarýnýn da __isset ve __unset metodlarý kullanýlarak overload edilebilmesi
  mümkün hale getirilmiþtir.
  </para>

  <sect2 id="language.oop5.overloading.members">
   <title>Üye overloading</title>

   <methodsynopsis>
    <type>void</type><methodname>__set</methodname>
    <methodparam><type>string</type><parameter>isim</parameter></methodparam>
    <methodparam><type>mixed</type><parameter>deðer</parameter></methodparam>
   </methodsynopsis>
   <methodsynopsis>
    <type>mixed</type><methodname>__get</methodname>
    <methodparam><type>string</type><parameter>isim</parameter></methodparam>
   </methodsynopsis>
   <methodsynopsis>
    <type>bool</type><methodname>__isset</methodname>
    <methodparam><type>string</type><parameter>isim</parameter></methodparam>
   </methodsynopsis>
   <methodsynopsis>
    <type>void</type><methodname>__unset</methodname>
    <methodparam><type>string</type><parameter>isim</parameter></methodparam>
   </methodsynopsis>

   <para>
   Sýnýf üyeleri, sýnýfýnýz dahilinde tanýmlayacak bu özel isimli metodlar
   kullanýlarak overload edilebilir. <varname>$isim</varname> parametresi
   kullanýlarak deðeri deðiþtirilmek istenen ya da deðeri alýnmak istenen
   deðiþken seçilebilir. __set() metodu ile kullanýlan <varname>$value</varname>
   parametresi, <varname>$isim</varname> için yeni atanacak deðeri belirler.
   </para>

   <example>
    <title>__get, __set, __isset ve __unset ile overloading örneði</title>
    <programlisting role="php">
<![CDATA[
<?php
class Setter
{
    public $n;
    private $x = array("a" => 1, "b" => 2, "c" => 3);

    private function __get($nm)
    {
        echo "Alýnan [$nm]\n";

        if (isset($this->x[$nm])) {
            $r = $this->x[$nm];
            print "Döndürülen: $r\n";
            return $r;
        } else {
            echo "Hiçbir þey!\n";
        }
    }

    private function __set($nm, $val)
    {
        echo "[$nm] deðerinin atandýðý: $val\n";

        if (isset($this->x[$nm])) {
            $this->x[$nm] = $val;
            echo "OK!\n";
        } else {
            echo "OK deðil!\n";
        }
    }

    private function __isset($nm)
    {
        echo "$nm deðiþtirilmiþ mi kontrol ediliyor\n";

        return isset($this->x[$nm]);
    }

    private function __unset($nm)
    {
        echo "$nm temizleniyor\n";

        unset($this->x[$nm]);
    }
}

$foo = new Setter();
$foo->n = 1;
$foo->a = 100;
$foo->a++;
$foo->z++;

var_dump(isset($foo->a)); //doðru
unset($foo->a);
var_dump(isset($foo->a)); //yanlýþ

// bu direk olarak __isset() metodundan geçmez
// çünkü 'n' public bir özellik
var_dump(isset($foo->n));

var_dump($foo);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
<![CDATA[
Setting [a] to 100
OK!
Getting [a]
Returning: 100
Setting [a] to 101
OK!
Getting [z]
Nothing!
Setting [z] to 1
Not OK!

Checking if a is set
bool(true)
Unsetting a
Checking if a is set
bool(false)
bool(true)

object(Setter)#1 (2) {
  ["n"]=>
  int(1)
  ["x:private"]=>
  array(2) {
    ["b"]=>
    int(2)
    ["c"]=>
    int(3)
  }
}
]]>
    </screen>

   </example>
  </sect2>

  <sect2 id="language.oop5.overloading.methods">
   <title>Metod overloading</title>

   <methodsynopsis>
    <type>mixed</type><methodname>__call</methodname>
    <methodparam><type>string</type><parameter>isim</parameter></methodparam>
    <methodparam><type>array</type><parameter>argümanlar</parameter></methodparam>
   </methodsynopsis>

   <para>
   Sýnýf metodlarý, istenen metoda özel bir isim tanýmlanmasýný saðlayacak özel
   bir kod yazýlarak overload edilebilir. Kullanýlan <varname>$name</varname> parametresi,
   kullanýmý istenen fonksiyon ismini taþýr. Fonksiyona geçirilen argümanlar,
   <varname>$arguments</varname> parametresi içinde bir dizi olarak tanýmlanacaktýr.
   __call() metodundan dönen deðerler, çaðrýyý yapan metoda geri döndürülecektir.
   </para>

   <example>
    <title>__call ile overload örneði</title>
    <programlisting role="php">
  <![CDATA[
<?php
class Caller
{
    private $x = array(1, 2, 3);

    private function __call($m, $a)
    {
        print "$m metodu çaðrýldý:\n";
        var_dump($a);
        return $this->x;
    }
}

$foo = new Caller();
$a = $foo->test(1, "2", 3.4, true);
var_dump($a);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
<![CDATA[

test metodu çaðrýldý:
array(4) {
    [0]=>
    int(1)
    [1]=>
    string(1) "2"
    [2]=>
    float(3.4)
    [3]=>
    bool(true)
}
array(3) {
    [0]=>
    int(1)
    [1]=>
    int(2)
    [2]=>
    int(3)
}
]]>
    </screen>
   </example>

  </sect2>

 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
