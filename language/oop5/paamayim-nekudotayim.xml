<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.4 $ -->
<!-- $Header: /home/svn/phpsvn_tmp/cvsrepo/phpdoc/tr/language/oop5/paamayim-nekudotayim.xml,v 1.4 2008-01-11 08:53:45 sezer Exp $ -->
 <sect1 xml:id="language.oop5.paamayim-nekudotayim" xmlns="http://docbook.org/ns/docbook">
  <title>Kapsam Çözünürlük Operatörü (Scope Resolution Operator (::))</title>

  <para>
  Kapsam Çözünürlük Operatörü (aynı zamanda Paamayim Nekudotayim olarak bilinir)
  ya da daha basit terimlerle iki nokta üst üste,
  <link linkend="language.oop5.static">static</link>,
  <link linkend="language.oop5.constants">constant</link> ve
  bir sınıfın iptal edilmiş öğelerine ya da metodlarına erişilebilmesini
  sağlayan bir simgedir.
  </para>

  <para>
  Bu öğelere sınıf tanımlamasının dışında bir yerden referans vermek istediğinizde,
  sınıfın ismini kullanın.
  </para>

  <para>
  Paamayim Nekudotayim ilk bakışta iki nokta üst üste için garip bir adlandırma
  gibi gözükebilir. Ancak, Zend Engine 0.5 (php 3'ün kalbidir) yazıldığı esnada
  Zend ekibinin kullanmak istediği terim bu oldu. Esasında bu iki sözcük de
  iki nokta üst üste anlamına gelmektedir - İbranice'de!
  </para>

  <example>
   <title>:: sınıf tanımlamasının dışında</title>
   <programlisting role="php">
<![CDATA[
<?php
class MyClass {
    const CONST_VALUE = 'Bir değişmez değeri';
}

echo MyClass::CONST_VALUE;
?>
]]>
   </programlisting>
  </example>

  <para>
  İki özel anahtar sözcük <varname>self</varname> ve <varname>parent</varname>
  bir sınıfın öğelerine ya da metodlarına sınıfın içinden erişilmek istendiğinde
  kullanılır.
  </para>

  <example>
   <title>:: sınıf tanımlamasının içinde</title>
   <programlisting role="php">
<![CDATA[
<?php
class OtherClass extends MyClass
{
    public static $my_static = 'static var';

    public static function doubleColon() {
        echo parent::CONST_VALUE . "\n";
        echo self::$my_static . "\n";
    }
}

OtherClass::doubleColon();
?>
]]>
   </programlisting>
  </example>

  <para>
  Bir sınıf genişletildiğinde (extending) alt metodlar ana metodların üzerine
  yazılır. Bu durumda, PHP ana sınıfa ait metodu çağırmaz. Ana sınıfa ait metodun
  çalıştırılıp çalıştırılmayacağı, genişletilmiş sınıfın insiyatifindedir.
  Bu durum aynı zamanda <link
   linkend="language.oop5.decon">İlklendiriciler ve Sonlandırıcılar</link>, <link
   linkend="language.oop5.overloading">Overloading</link>, ve <link
   linkend="language.oop5.magic">Magic</link> matod tanımlamaları için de
   geçerlidir.
  </para>

  <example>
   <title>Ana sınıfa ait metodu çağırmak</title>
   <programlisting role="php">
<![CDATA[
<?php
class MyClass
{
    protected function myFunc() {
        echo "MyClass::myFunc()\n";
    }
}

class OtherClass extends MyClass
{
    // Ana sınıfın tanımlaması ezilir
    public function myFunc()
    {
        // Ama hala ana fonksiyonu çağırabilir
        parent::myFunc();
        echo "OtherClass::myFunc()\n";
    }
}

$class = new OtherClass();
$class->myFunc();
?>
]]>
   </programlisting>
  </example>

 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

