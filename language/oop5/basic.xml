<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 289308 Maintainer: nilgun Status: ready-->
 <sect1 xml:id="language.oop5.basic" xmlns="http://docbook.org/ns/docbook">
  <title>Temel Kavramlar</title>

  <sect2 xml:id="language.oop5.basic.class">
   <title><code>class</code> Anahtar Sözcüğü</title>
   <para>
    Her sınıf tanımı <literal>class</literal> anahtar sözcüğü ile başlar sınıf
    isminin ardından gelen bir çift kaşlı ayracın arasında sınıf özelliklerinin
    ve yöntemlerinin tanımları bulunur.
   </para>
   <para>
    Sınıf ismi olarak herhangi bir geçerli yafta kullanılabilir ancak bu PHP
    için <link linkend="reserved">ayrılmış sözcüklerden biri</link>
    olmamalıdır. Geçerli bir sınıf ısmı bir harf veya alt çizgi ile başlar,
    sayılar, harfler veya alt çizgiler içerebilir. Bir düzenli ifade olarak
    şöyle bir şablonla eşleşmelidir:
    <literal>[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*</literal>.
   </para>
   <para>
    Bir sınıfın kendi <link linkend="language.oop5.constants">sabitleri</link>,
    <link linkend="language.oop5.properties">değişkenleri</link>
    (bunlara "özellik" de denir) ve işlevleri (bunlara "yöntem" de denir)
    olabilir.
   </para>
   <example>
    <title>- Basit bir sınıf tanımı</title>
    <programlisting role="php">
<![CDATA[
<?php
class BasitSınıf
{
    // özellik bildirimi
    public $öntanımlı = 'öntanımlı bir değer';

    // yöntem tanımı
    public function ÖntanımlıyıGöster() {
        echo $this->öntanımlı;
    }
}
?>
]]>
    </programlisting>
   </example>
   <para>
    Bir nesne bağlamı içinden bir yöntem çağırmak için <varname>$this</varname>
    diye bir sözde değişken kullanılır. <varname>$this</varname> çağrılan
    nesneye bir gönderimdir (normalde yöntemin ait olduğu nesnedir, ancak eğer
    nesne diğer nesnenin bağlamından <link linkend="language.oop5.static">duruk
    olarak</link> çağrılıyorsa, bu başka bir nesne de olabilir).
   </para>
   <example>
    <title>- <varname>$this</varname> sözde değişkeninin kullanımı</title>
    <programlisting role="php">
<![CDATA[
<?php
class A
{
    function foo()
    {
        if (isset($this)) {
            echo '$this tanımlı (';
            echo get_class($this);
            echo ")\n";
        } else {
            echo "\$this tanımsız.\n";
        }
    }
}

class B
{
    function bar()
    {
        // Dikkat: E_STRICT etkinse bu satır bir uyarı
        // çıktılanmasına sebep olur.
        A::foo();
    }
}

$a = new A();
$a->foo();

// Dikkat: E_STRICT etkinse bu satır bir uyarı çıktılanmasına sebep olur.
A::foo();
$b = new B();
$b->bar();

// Dikkat: E_STRICT etkinse bu satır bir uyarı çıktılanmasına sebep olur.
B::bar();
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
$this tanımlı (A)
$this tanımsız.
$this tanımlı (B)
$this tanımsız.
]]>
     </screen>
    </example>
  </sect2>

  <sect2 xml:id="language.oop5.basic.new">
   <title><code>new</code> Anahtar Sözcüğü</title>
   <para>
    Bir sınıfın örneğini oluşturmak için yeni bir nesne oluşturulup bir
    değişkene atanmalıdır. Nesnenin hata durumunda daima yeni bir değişkene
    atanarak oluşturulması için <link linkend="language.oop5.decon"
    >kurucu</link>sunun bir <link linkend="language.exceptions"
    >istisna</link> oluşturmaması gerekir. Sınıflar, örnekleme öncesi
    tanımlanmış olmalıdır (ve bu, bazı durumlarda bir gereksinimdir).
   </para>
   <example>
    <title>- Bir sınıf örneğinin oluşturulması</title>
    <programlisting role="php">
<![CDATA[
<?php
$örnek = new BasitSınıf();

// Bu bir değişkenle de yapılabilir:
$sınıf = 'BasitSınıf';
$örnek = new $sınıf(); // BasitSınıf()
?>
]]>
    </programlisting>
   </example>
   <para>
    Sınıf bağlamında yeni bir nesneyi <literal>new self</literal> veya
    <literal>new parent</literal> kullanarak oluşturmak mümkündür.
   </para>
   <para>
    Oluşturulmuş bir sınıf örneğinin yeni bir değişkene atanması sırasında,
    yeni değişken, atanan nesneyle aynı örneğe erişecektir. Bu davranışın
    örneklerin bir işleve aktarılmasından bir farkı yoktur. <link
    linkend="language.oop5.cloning">Kopyalamak</link> suretiyle oluşturulmuş
    bir nesnenin daima bir kopyası yapılabilir.
   </para>
   <example>
    <title>- Nesne Atama</title>
    <programlisting role="php">
<![CDATA[
<?php
$atama     =  $örnek;
$gönderim  =& $örnek;

$örnek->var = '$atama bu değere sahip olacak';

$örnek = null; // $örnek ve $gönderim null olur

var_dump($örnek);
var_dump($gönderim);
var_dump($atama);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
NULL
NULL
object(BasitSınıf)#1 (1) {
  ["var"]=>
  string(30) "$atama bu değere sahip olacak"
}
]]>
    </screen>
   </example>
  </sect2>

  <sect2 xml:id="language.oop5.basic.extends">
   <title><code>extends</code> Anahtar Sözcüğü</title>
   <para>
    Bir sınıfın bildiriminde <code>extends</code> anahtar sözcüğü
    kullanılarak başka bir sınıfın yöntemleri ve özellikleri miras alınabilir.
    Çok sayıda sınıfı miras alarak genişlemek mümkün değildir, bir sınıf
    sadece bir ana sınıfı miras alabilir.
   </para>
   <para>
    Miras alınan yöntemler ve özelliklerler, ebeveyn sınıfta tanımlı
    isimleriyle yeniden bildirilerek geçersiz kılınabilir; bu sadece ebeveyn
    sınıfın <link linkend="language.oop5.final">final</link> tanımlı yöntemleri
    için yapılamaz. Geçersiz kılınmış yöntemlere ve duruk özelliklere <link
    linkend="language.oop5.paamayim-nekudotayim">parent::</link> öneki ile
    atıfta bulunarak erişilebilir.
   </para>
   <example>
    <title>- Basit bir sınıfın miras alınması</title>
    <programlisting role="php">
<![CDATA[
<?php
class EkSınıf extends BasitSınıf
{
    // ebeveyn yöntemi yeniden bildirelim
    function değerGöster()
    {
        echo "Sınıf genişletiliyor\n";
        parent::değerGöster();
    }
}

$ek = new EkSınıf();
$ek->değerGöster();
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Sınıf genişletiliyor
bir öntanımlı değer
]]>
    </screen>
   </example>
  </sect2>

 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
