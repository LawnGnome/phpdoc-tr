<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.6 $ -->
<!-- EN-Revision: 1.15 Maintainer: nilgun Status: ready -->
<!-- CREDITS: tpug, sezer -->
 <sect1 xml:id="language.oop5.visibility" xmlns="http://docbook.org/ns/docbook">
  <title>Görünürlük</title>
  <para>
    Bir özelliğin ya da bir yöntemin görünürlüğü, bildirim sırasında önüne şu
    anahtar sözcüklerden biri getirilerek belirlenebilir:
    <code>public</code>, <code>protected</code> ya da <code>private</code>.
    <command>public</command> olarak bildirilmiş öğereler her yerden
    erişilebilir. <command>protected</command> bildirimli öğelere sadece
    miras alınmış ve ebeveyn sınıflardan (ve öğenin tanımlandığı nesneden)
    erişilebilir. <command>private</command> bildirimli öğelere ise sadece
    öğenin tanımlandığı sınıfın içinden erişilebilir.
  </para>
  <sect2 xml:id="language.oop5.visiblity-members">
   <title>Üyelerin Görünürlüğü</title>
   <para>
    Sınıf üyeleri <code>public</code>, <code>protected</code> ya da
    <code>private</code> olarak tanımlanmalıdır.
   </para>
   <para>
    <example>
     <title>- Üye bildirimi</title>
     <programlisting role="php">
<![CDATA[
<?php
/**
 * Sınıfım tanımı
 */
class Sınıfım
{
    public $genel = 'Genel';
    protected $korumalı = 'Korumalı';
    private $özel = 'Özel';

    function selamVer()
    {
        echo $this->genel;
        echo $this->korumalı;
        echo $this->özel;
    }
}

$nesne = new Sınıfım();
echo $nesne->genel;    // Çalışır
echo $nesne->korumalı; // Ölümcül Hata
echo $nesne->özel;     // Ölümcül Hata
$nesne->selamVer();    // Genel, Korumalı ve Özel görüntüler


/**
 * ÖbürSınıfım tanımı
 */
class ÖbürSınıfım extends Sınıfım
{
    // public ve protected yöntemleri yeniden tanımlayabiliriz,
    // ancak private olanlar tanımlanamaz
    protected $korumalı = 'Öbür korumalı';

    function selamVer()
    {
        echo $this->genel;
        echo $this->korumalı;
        echo $this->özel;
    }
}

$nesne2 = new ÖbürSınıfım();
echo $nesne2->genel;    // Çalışır
echo $nesne2->özel;     // Tanımsız
echo $nesne2->korumalı; // Ölümcül Hata
$nesne2->selamVer();    // Genel, Öbür korumalı ve Undefined görüntülenir

?>
]]>
     </programlisting>
    </example>
   </para>
   <note>
    <simpara>
      PHP 4'te bir değişken bildiriminde (<code>public</code> yerine)
      kullanılan <emphasis>var</emphasis> anahtar sözcüğü uyumluluk adına
      hala desteklenmektedir. PHP 5'in 5.1.3 sürümünden önceki sürümlerinde
      <emphasis>var</emphasis> kullanımı bir <constant>E_STRICT</constant>
      uyarısına sebep olurdu.
    </simpara>
   </note>
  </sect2>
  <sect2 xml:id="language.oop5.visiblity-methods">
   <title>Yöntem Görünürlüğü</title>
   <para>
    Sınıf yöntemleri <code>public</code>, <code>protected</code> ya da
    <code>private</code> olarak tanımlanmalıdır. Herhangi bir görünürlük
    bildirimi yapılmamış yöntemlerin <code>public</code> olarak tanımlandığı
    varsayılır.
   </para>
   <para>
    <example>
     <title>- Yöntem bildirimi</title>
     <programlisting role="php">
<![CDATA[
<?php
/**
 * Sınıfım tanımı
 */
class Sınıfım
{
    // public kurucu bildirimi
    public function __construct() { }

    // public yöntem bildirimi
    public function Genel() { }

    // protected yöntem bildirimi
    protected function Korumalı() { }

    // private yöntem bildirimi
    private function Özel() { }

    // Bu da public bir yöntem
    function Falanca()
    {
        $this->Genel();
        $this->Korumalı();
        $this->Özel();
    }
}

$sınıfım = new Sınıfım;
$sınıfım->Genel();    // Çalışır
$sınıfım->Korumalı(); // Ölümcül Hata
$sınıfım->Özel();     // Ölümcül Hata
$sınıfım->Falanca();  // Public, Protected ve Private çalisir


/**
 * ÖbürSınıfım tanımı
 */
class ÖbürSınıfım extends Sınıfım
{
    // Bu public bir yöntemdir
    function Filanca()
    {
        $this->Genel();
        $this->Korumalı();
        $this->Özel();  // Ölümcül Hata
    }
}

$öbürSınıfım = new Sınıfım;
$öbürSınıfım->Genel();   // Çalışır
$öbürSınıfım->Filanca(); // Genel ve Korumalı çalışır, Özel çalışmaz

class Bar
{
    public function dnm() {
        $this->dnmÖzel();
        $this->dnmGenel();
    }

    public function dnmGenel() {
        echo "Bar::dnmGenel\n";
    }

    private function dnmÖzel() {
        echo "Bar::dnmÖzel\n";
    }
}

class Foo extends Bar
{
    public function dnmGenel() {
        echo "Foo::dnmGenel\n";
    }

    private function dnmÖzel() {
        echo "Foo::dnmÖzel\n";
    }
}

$fo = new Foo();
$fo->dnm();  // Bar::dnmÖzel
             // Foo::dnmGenel

?>
]]>
     </programlisting>
    </example>
   </para>
  </sect2>
 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
