<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.3 $ -->
<!-- $Header: /home/svn/phpsvn_tmp/cvsrepo/phpdoc/tr/language/oop5/cloning.xml,v 1.3 2008-01-11 08:53:45 sezer Exp $ -->
 <sect1 xml:id="language.oop5.cloning" xmlns="http://docbook.org/ns/docbook">
  <title>Nesne klonlama</title>
  
  <para>
  Bir nesnenin tüm özelliklerinin aynen kopyalanarak çoğaltılması her zaman
  istenilen durum değildir. İlklendirici fonksiyonların kopyalanması iyi bir örnektir,
  bir GTK penceresini temsil eden bir nesneniz varsa ve bu nesne GTK penceresine
  ait kaynağı tutuyorsa, bu nesnenin kopyasını yarattığınızda, yeni nesnenin
  önceki pencere ile aynı özelliklere sahip yeni bir pencereye sahip olmasını
  ve önceki nesne ile aynı şekilde pencereye ait kaynağı tutuyor olmasını
  isteyebilirsiniz. Bir diğer örnek, nesneniz başka bir nesneye ait bir referans
  tutuyorsa, ana nesne üzerinde bir işlem yapıldığında diğer nesnenin yeni bir
  örneğinin yaratılmasını isteyebilirsiniz, böylece yapılan işlem sonucunun kendine
  ait bir kopyaya sahip olmasını sağlayabilirsiniz.
  </para>

  <para>
  Clone anahtar sözcüğü kullanılarak bir nesneye ait kopya yaratılabilir
  (mümkünse nesnenin __close() metodu çağrılır). Bir nesnenin __clone()
  metodu direk olarak çağrılamaz.
  </para>

  <informalexample>
   <programlisting>
<![CDATA[
$copy_of_object = clone $object;
]]>
   </programlisting>
  </informalexample>

  <para>
  Bir nesne klonlandığında, PHP 5 nesnenin tüm özelliklerinin yüzeysel bir
  kopyasını çıkartacaktır. Başka değişkenlere ait referans tutan tüm özellikler,
  referans olarak kalacaktır. Bir __clone() metodu tanımlanmışsa, 
  yeni yaratılan nesneye ait __clone() metodu çağrılacak, böylece olası
  değişiklik gerektiren tüm özellikler güncellenecektir.
  </para>

  <example>
   <title>Bir nesnenin klonlanması</title>
   <programlisting role="php">
<![CDATA[
<?php
class SubObject
{
    static $instances = 0;
    public $instance;

    public function __construct() {
        $this->instance = ++self::$instances;
    }

    public function __clone() {
        $this->instance = ++self::$instances;
    }
}

class MyCloneable
{
    public $object1;
    public $object2;

    function __clone()
    {
        // Force a copy of this->object, otherwise
        // it will point to same object.
        $this->object1 = clone($this->object1);
    }
}

$obj = new MyCloneable();

$obj->object1 = new SubObject();
$obj->object2 = new SubObject();

$obj2 = clone $obj;


print("Original Object:\n");
print_r($obj);

print("Cloned Object:\n");
print_r($obj2);

?> 
]]>
   </programlisting>
   &example.outputs;
   <screen role="php">
<![CDATA[
Original Object:
MyCloneable Object
(
    [object1] => SubObject Object
        (
            [instance] => 1
        )

    [object2] => SubObject Object
        (
            [instance] => 2
        )

)
Cloned Object:
MyCloneable Object
(
    [object1] => SubObject Object
        (
            [instance] => 3
        )

    [object2] => SubObject Object
        (
            [instance] => 2
        )

)
]]>

   </screen>

  </example>

 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
