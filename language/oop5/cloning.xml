<?xml version="1.0" encoding="iso-8859-9"?>
<!-- $Revision: 1.2 $ -->
 <sect1 xml:id="language.oop5.cloning" xmlns="http://docbook.org/ns/docbook">
  <title>Nesne klonlama</title>
  
  <para>
  Bir nesnenin tüm özelliklerinin aynen kopyalanarak çoðaltýlmasý her zaman
  istenilen durum deðildir. Ýlklendirici fonksiyonlarýn kopyalanmasý iyi bir örnektir,
  bir GTK penceresini temsil eden bir nesneniz varsa ve bu nesne GTK penceresine
  ait kaynaðý tutuyorsa, bu nesnenin kopyasýný yarattýðýnýzda, yeni nesnenin
  önceki pencere ile ayný özelliklere sahip yeni bir pencereye sahip olmasýný
  ve önceki nesne ile ayný þekilde pencereye ait kaynaðý tutuyor olmasýný
  isteyebilirsiniz. Bir diðer örnek, nesneniz baþka bir nesneye ait bir referans
  tutuyorsa, ana nesne üzerinde bir iþlem yapýldýðýnda diðer nesnenin yeni bir
  örneðinin yaratýlmasýný isteyebilirsiniz, böylece yapýlan iþlem sonucunun kendine
  ait bir kopyaya sahip olmasýný saðlayabilirsiniz.
  </para>

  <para>
  Clone anahtar sözcüðü kullanýlarak bir nesneye ait kopya yaratýlabilir
  (mümkünse nesnenin __close() metodu çaðrýlýr). Bir nesnenin __clone()
  metodu direk olarak çaðrýlamaz.
  </para>

  <informalexample>
   <programlisting>
<![CDATA[
$copy_of_object = clone $object;
]]>
   </programlisting>
  </informalexample>

  <para>
  Bir nesne klonlandýðýnda, PHP 5 nesnenin tüm özelliklerinin yüzeysel bir
  kopyasýný çýkartacaktýr. Baþka deðiþkenlere ait referans tutan tüm özellikler,
  referans olarak kalacaktýr. Bir __clone() metodu tanýmlanmýþsa, 
  yeni yaratýlan nesneye ait __clone() metodu çaðrýlacak, böylece olasý
  deðiþiklik gerektiren tüm özellikler güncellenecektir.
  </para>

  <example>
   <title>Bir nesnenin klonlanmasý</title>
   <programlisting role="php">
<![CDATA[
<?php
class SubObject
{
    static $instances = 0;
    public $instance;

    public function __construct() {
        $this->instance = ++self::$instances;
    }

    public function __clone() {
        $this->instance = ++self::$instances;
    }
}

class MyCloneable
{
    public $object1;
    public $object2;

    function __clone()
    {
        // Force a copy of this->object, otherwise
        // it will point to same object.
        $this->object1 = clone($this->object1);
    }
}

$obj = new MyCloneable();

$obj->object1 = new SubObject();
$obj->object2 = new SubObject();

$obj2 = clone $obj;


print("Original Object:\n");
print_r($obj);

print("Cloned Object:\n");
print_r($obj2);

?> 
]]>
   </programlisting>
   &example.outputs;
   <screen role="php">
<![CDATA[
Original Object:
MyCloneable Object
(
    [object1] => SubObject Object
        (
            [instance] => 1
        )

    [object2] => SubObject Object
        (
            [instance] => 2
        )

)
Cloned Object:
MyCloneable Object
(
    [object1] => SubObject Object
        (
            [instance] => 3
        )

    [object2] => SubObject Object
        (
            [instance] => 2
        )

)
]]>

   </screen>

  </example>

 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
