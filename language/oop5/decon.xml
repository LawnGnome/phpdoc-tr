<?xml version="1.0" encoding="iso-8859-9"?>
<!-- $Revision: 1.2 $ -->
 <sect1 id="language.oop5.decon">
  <title>Ýlklendiriciler ve Sonlandýrýcýlar (Constructors and Destructors)</title>

  <sect2 id="language.oop5.decon.constructor">
   <title>Ýlklendirici (Constructor)</title>
   <methodsynopsis>
    <type>void</type><methodname>__construct</methodname>
    <methodparam choice="opt"><type>mixed</type><parameter>args</parameter></methodparam>
    <methodparam choice="opt"><parameter>...</parameter></methodparam>
   </methodsynopsis>
   <para>
   PHP 5 geliþtiricilere sýnýflar için ilklendirici fonksiyon tanýmlama
   imkaný sunar. Ýlgili sýnýf kullanýlarak her yeni nesne yaratýmýnda
   ilk önce ilklendirici olarak adlandýrýlan bu fonksiyon çalýþtýrýlýr.
   Kullaným þekli sebebiyle nesnenin her türlü kullanýmýndan önce çalýþtýrýlmasý
   uygundur.
   </para>
   <note>
    <simpara>
    Alt (child) sýnýf tarafýndan tanýmlý bir ilklendirici fonksiyon bulunuyorsa
    ana sýnýfa ait ilklendirici otomatik olarak çalýþtýrýlmaz. Ana ilklendirici
    fonksiyonun çalýþtýrýlabilmesi için, alt ilklendirici içerisinde
     <function>parent::__construct</function> fonksiyonunun çaðrýlmasý
     gereklidir.
    </simpara>
   </note>
   <example>
    <title>yeni birleþtirilmiþ ilklendiricilerin kullanýlmasý</title>
    <programlisting role="php">
<![CDATA[
<?php
class BaseClass {
   function __construct() {
       print "BaseClass ilklendiricisi içerisindeyim\n";
   }
}

class SubClass extends BaseClass {
   function __construct() {
       parent::__construct();
       print "SubClass ilklendiricisi içerisindeyim\n";
   }
}

$obj = new BaseClass();
$obj = new SubClass();
?> 
]]>
    </programlisting>
   </example>
   <para>
   Geriye dönük uyumluluk için, PHP 5 ilgili sýnýfa ait bir
    <function>__construct</function> fonksiyonu bulamazsa,
    sýnýfýn isminin kullanýldýðý eski tip ilklendirici fonksiyon olup olmadýðýna
    bakacaktýr. Dolayýsýyla, uyumluluk problemi yaþayacaðýnýz tek durum sýnýf
    dahilinde <function>__construct</function> isimli bir fonksiyonun ilklendirici
    amacý dýþýnda kullanýlmasý ile oluþabilir.
   </para>
  </sect2>

  <sect2 id="language.oop5.decon.destructor">
   <title>Sonlandýrýcý (Destructor)</title>
   <methodsynopsis>
    <type>void</type><methodname>__destruct</methodname>
    <void />
   </methodsynopsis>
   <para>
   PHP 5, C++ gibi nesne-yönelimli dillerdekine benzer bir sonlandýrýcý
   konsepti sunar. Sonlandýrýcý metod belirli bir nesneye yönelik tüm referanslar
   kaldýrýldýðýnda ya da nesne tamamen yok edildiðinde çalýþtýrýlacaktýr.
   </para>
   <example>
    <title>Sonlandýrýcý Örneði</title>
    <programlisting role="php">
<![CDATA[
<?php
class MyDestructableClass {
   function __construct() {
       print "Ýlklendirici içinde\n";
       $this->name = "MyDestructableClass";
   }

   function __destruct() {
       print "" . $this->name . " yok ediliyor\n";
   }
}

$obj = new MyDestructableClass();
?> 
]]>
    </programlisting>
   </example>
   <para>
   Ýlklendiricilerde olduðu gibi, ana sonlandýrýcý uygulama tarafýndan otomatik
   olarak çaðrýlmayacaktýr. Ana sonlandýrýcýnýn çalýþmasý için, birisi tarafýndan
   <function>parent::__destruct</function> fonksiyonunun çalýþtýrýlmasý gerekir.
   </para>
   <note>
    <para>
    Sonlandýrýcýlar betik sonlanýrken çalýþtýrýlýr, böylece baþlýk (header) bölümünün
    her zaman halihazýrda gönderilmiþ olmasý saðlanýr.
    </para>
   </note>
   <note>
    <para>
    Bir sonlandýrýcý içerisinden istisna oluþturmaya çalýþmak ölümcül hata ile
    sonuçlanýr.
    </para>
   </note>
  </sect2>

 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
