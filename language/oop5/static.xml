<?xml version="1.0" encoding="iso-8859-9"?>
<!-- $Revision: 1.1 $ -->
 <sect1 id="language.oop5.static">
  <title>Static Anahtar Sözcüðü</title>

  <para>
  Sýnýf üyelerinin ya da metodlarýnýn static olarak tanýmlanmasý, bu sýnýflarýn
  ilklendirme (instantiation) yapýlmadan eriþilebilir olmasýný saðlar. Bir üye
  static olarak tanýmlandýysa, o üyeye o sýnýftan üretilmiþ bir nesne aracýlýðýyla
  eriþemezsiniz. O üyeye ancak static bir metod ile eriþim saðlayabilirsiniz.
  </para>

  <para>
  Static tanýmlamasý, görünüm tanýmlamasýndan sonra olmalýdýr.
  PHP 4 ile uyumluluðun saðlanabilmesi için, <link
   linkend="language.oop5.visibility">görünüm</link> tanýmlamasý
   yapýlmamýþ ise, ilgili üye ya da metodun <literal>public</literal>
   olarak tanýmlanmýþ olduðu kabul edilecektir.
  </para>

  <para>
  Static metodlarýn, nesneden bir örnek (instance) yaratýlmadan çalýþtýrabilmesi
  sebebiyle, sözde (pseudo) deðiþken <varname>$this</varname> static olarak
  tanýmlanmýþ bir metodun içinde kullanýlamaz.
  </para>
  
  <para>
  Özünde, <literal>static</literal> metod çaðrýlarý derleme esnasýnda çözümlenir.
  Kesin (explicit) bir sýnýf ismi kullanýldýðýnda, metod önceden tanýmlanmýþ
  olduðundan kalýtsal (inheritance) kurallar uygulanmaz. Çaðrý <literal>self</literal> tarafýndan
  yapýlmýþ ise, <literal>self</literal> kodun ait olduðu mevcut sýnýfa dönüþtürülür.
  Bu durumda da kalýtsal kurallar uygulanmaz.
  </para>
  
  <para>
  Static özelliklere, ok operatörü -&gt; kullanýlarak eriþilemez.
  </para>

  <para>
  Static olmayan metodlarýn static olarak çaðrýlmasý E_STRICT seviyesinde uyarý oluþturur.
  </para>

  <example>
   <title>Static üye örneði</title>
   <programlisting role="php">
<![CDATA[
<?php
class Foo
{
    public static $my_static = 'foo';

    public function staticValue() {
        return self::$my_static;
    }
}

class Bar extends Foo
{
    public function fooStatic() {
        return parent::$my_static;
    }
}


print Foo::$my_static . "\n";

$foo = new Foo();
print $foo->staticValue() . "\n";
print $foo->my_static . "\n";      // Tanýmsýz "Özellik" my_static 

// $foo::my_static kullanýmý mümkün deðildir

print Bar::$my_static . "\n";
$bar = new Bar();
print $bar->fooStatic() . "\n";
?>
]]>
   </programlisting>
  </example>

  <example>
   <title>Static metod örneði</title>
    <programlisting role="php">
<![CDATA[
<?php
class Foo {
    public static function aStaticMethod() {
        // ...
    }
}

Foo::aStaticMethod();
?> 
]]>
    </programlisting>
  </example>

 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
