<?xml version="1.0" encoding="iso-8859-9"?>
<!-- $Revision: 1.2 $ -->
 <chapter xml:id="language.exceptions" xmlns="http://docbook.org/ns/docbook">
  <title>Ýstisnalar (Exceptions)</title>

  <para>
  PHP 5 diðer programlama dillerindekine benzer bir istisna modeline sahiptir.
  Bir istisna <literal>oluþabilir (Ýngilizce eþdeðeri:thrown)</literal>, ve yakalanabilir
  ("<literal>catched</literal>"). Potansiyel istisnalarýn yakalanabilmesi için,
  kod bir <literal>try</literal> bloðu ile çevrilebilir.
  Her bir <literal>try</literal> bloðu ile iliþkili en az bir <literal>catch</literal>
  bloðu bulunmalýdýr. Farklý sýnýfa ait istisnalarý yakalamak için birden fazla
  <literal>catch</literal> bloðu kullanýlabilir. En son sýrada tanýmlanmýþ catch
  bloðundan sonra normal çalýþma (<literal>try</literal> bloðu içerisinde istisna
  oluþmadýðý ya da oluþan istisna ile uyuþan bir <literal>catch</literal> bulunmadýðý
  durum) devam eder. Ýstisnalar bir <literal>catch</literal> bloðu içerisinde 
  <literal>oluþabilir (thrown)</literal> (ya da tekrar oluþabilir - rethrown).
  </para>
  <para>
  Bir istisna oluþtuðunda, takip eden kodlar çalýþtýrýlmaz ve PHP oluþan istisna ile
  uyuþan ilk <literal>catch</literal> bloðunu bulmaya çalýþýr. Uyuþan bir tanýmlama yok
  ise, PHP bir Ölümcül Hata (Fatal Error) oluþturur ve "<literal>Uncaught Exception ...</literal>"
  mesajýný verir. <function>set_exception_handler</function> fonksiyonu ile bir iþleyici (handler)
  tanýmlanarak bu hatanýn oluþmasý önlenebilir.
  </para>
   <example>
    <title>Bir Ýstisna Oluþturmak</title>
    <programlisting role="php">
<![CDATA[
<?php
try {
    $error = 'Her zaman bu hatayý oluþtur';
    throw new Exception($error);

    // Ýstisnadan sonra gelen kod çalýþtýrýlmaz.
    echo 'Asla çalýþtýrýlmaz';

} catch (Exception $e) {
    echo 'Yakalanan istisna: ',  $e->getMessage(), "\n";
}

// Çalýþmaya devam eder
echo 'Merhaba Dünya';
?>
]]>
    </programlisting>
   </example>

  <sect1 xml:id="language.exceptions.extending">
   <title>Ýstisnalarý Geniþletmek</title>
   <para>
   Yerleþik Ýstisna sýnýfý, kullanýcý tanýmlý bir istisna sýnýfý tanýmlanarak geniþletilebilir.
   Aþaðýdaki üyeler ve özellikler, yerleþik istisna sýnýfýndan türetilen alt sýnýf içerisinde
   nelerin eriþilebilir olduðunu göstermektedir.
   </para>
   <example>
    <title>Yerleþik Ýstisna sýnýfý</title>
    <programlisting role="php">
<![CDATA[
<?php
class Exception
{
    protected $message = 'Bilinmeyen istisna';  // istisna mesajý
    protected $code = 0;                        // kullanýcý tanýmlý istisna kodu
    protected $file;                            // istisnanýn kaynak dosyasý
    protected $line;                            // istisnanýn kaynak dosyasýndaki satýrý

    function __construct($message = null, $code = 0);

    final function getMessage();                // istisnanýn mesajý
    final function getCode();                   // istisnanýn kodu
    final function getFile();                   // kaynak dosya
    final function getLine();                   // kaynak dosya satýrý
    final function getTrace();                  // backtrace() dizisi
    final function getTraceAsString();          // trace için formatlý karakter dizisi

    /* Ezilebilir */
    function __toString();                       // görüntüleme için formatlý karakter dizisi
}
?>
]]>
    </programlisting>
   </example>
   <para>
   Bir sýnýf yerleþik Ýstisna sýnýfýný geniþletiyor ve <link
    linkend="language.oop5.decon">ilklendiriciyi</link> yeniden tanýmlýyorsa,
    tüm mevcut verinin düzgün biçimde atandýðýndan emin olmak için <link
    linkend="language.oop5.paamayim-nekudotayim">parent::__construct()</link>
    fonksiyonunun da çaðrýlmasý þiddetle önerilir. Nesne bir karakter dizisi
    olaran sunulduðunda özelleþtirilmiþ bir çýktý saðlayabilmek için <link
    linkend="language.oop5.magic">__toString()</link> metodu ezilebilir.
   </para>
   <example>
    <title>Ýstisna sýnýfýnýn geniþletilmesi</title>
    <programlisting role="php">
<![CDATA[
<?php
/**
 * Özelleþtirilmiþ bir istisna sýnýfý tanýmlama
 */
class MyException extends Exception
{
    // Ýstisnayý yeniden tanýmla böylece mesaj opsiyonel olmaktan çýkar
    public function __construct($message, $code = 0) {
        // biraz kod
    
        // her þeyin düzgün atandýðýndan emin olalým
        parent::__construct($message, $code);
    }

    // nesne için özelleþtirilmiþ karakter dizini sunumu
    public function __toString() {
        return __CLASS__ . ": [{$this->code}]: {$this->message}\n";
    }

    public function customFunction() {
        echo "Bu türdeki istisnalar için özelleþtirilmiþ fonksiyon\n";
    }
}


/**
 * Ýstisnanýn testi için sýnýf yaratma
 */
class TestException
{
    public $var;

    const THROW_NONE    = 0;
    const THROW_CUSTOM  = 1;
    const THROW_DEFAULT = 2;

    function __construct($avalue = self::THROW_NONE) {

        switch ($avalue) {
            case self::THROW_CUSTOM:
                // özelleþtirilmiþ istisna oluþtur
                throw new MyException('1 geçersiz bir parametredir', 5);
                break;

            case self::THROW_DEFAULT:
                // öntanýmlý olarak bir oluþturulur.
                throw new Exception('2 parametre olarak kabul edilmez', 6);
                break;

            default: 
                // Ýstisna yok, nesne yaratýlýr.
                $this->var = $avalue;
                break;
        }
    }
}


// Örnek 1
try {
    $o = new TestException(TestException::THROW_CUSTOM);
} catch (MyException $e) {      // Yakalanacaktýr
    echo "Benim istisnam yakalandý\n", $e;
    $e->customFunction();
} catch (Exception $e) {        // Skipped
    echo "Öntanýmlý istisna yakalandý\n", $e;
}

// Çalýþmaya devam et
var_dump($o);
echo "\n\n";


// Örnek 2
try {
    $o = new TestException(TestException::THROW_DEFAULT);
} catch (MyException $e) {      // Bu tür ile uyuþmuyor
    echo "Benim istisnam yakalandý\n", $e;
    $e->customFunction();
} catch (Exception $e) {        // Will be caught
    echo "Öntanýmlý istisna yakalandý\n", $e;
}

// Çalýþmaya devam et
var_dump($o);
echo "\n\n";


// Örnek 3
try {
    $o = new TestException(TestException::THROW_CUSTOM);
} catch (Exception $e) {        // Yakalanacaktýr
    echo "Öntanýmlý Ýstisna yakalandý\n", $e;
}

// Çalýþmaya devam et
var_dump($o);
echo "\n\n";


// Örnek 4
try {
    $o = new TestException();
} catch (Exception $e) {        // Atlandý, istisna yok
    echo "Öntanýmlý Ýstisna yakalandý\n", $e;
}

// Çalýþmaya devam et
var_dump($o);
echo "\n\n";
?>
]]>
    </programlisting>
   </example>
  </sect1>

 </chapter>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
