<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.3 $ -->
<!-- $Header: /home/svn/phpsvn_tmp/cvsrepo/phpdoc/tr/language/exceptions.xml,v 1.3 2008-01-11 08:02:21 sezer Exp $ -->
 <chapter xml:id="language.exceptions" xmlns="http://docbook.org/ns/docbook">
  <title>ıstisnalar (Exceptions)</title>

  <para>
  PHP 5 diğer programlama dillerindekine benzer bir istisna modeline sahiptir.
  Bir istisna <literal>oluşabilir (İngilizce eşdeğeri:thrown)</literal>, ve yakalanabilir
  ("<literal>catched</literal>"). Potansiyel istisnaların yakalanabilmesi için,
  kod bir <literal>try</literal> bloğu ile çevrilebilir.
  Her bir <literal>try</literal> bloğu ile ilişkili en az bir <literal>catch</literal>
  bloğu bulunmalıdır. Farklı sınıfa ait istisnaları yakalamak için birden fazla
  <literal>catch</literal> bloğu kullanılabilir. En son sırada tanımlanmış catch
  bloğundan sonra normal çalışma (<literal>try</literal> bloğu içerisinde istisna
  oluşmadığı ya da oluşan istisna ile uyuşan bir <literal>catch</literal> bulunmadığı
  durum) devam eder. İstisnalar bir <literal>catch</literal> bloğu içerisinde 
  <literal>oluşabilir (thrown)</literal> (ya da tekrar oluşabilir - rethrown).
  </para>
  <para>
  Bir istisna oluştuğunda, takip eden kodlar çalıştırılmaz ve PHP oluşan istisna ile
  uyuşan ilk <literal>catch</literal> bloğunu bulmaya çalışır. Uyuşan bir tanımlama yok
  ise, PHP bir Ölümcül Hata (Fatal Error) oluşturur ve "<literal>Uncaught Exception ...</literal>"
  mesajını verir. <function>set_exception_handler</function> fonksiyonu ile bir işleyici (handler)
  tanımlanarak bu hatanın oluşması önlenebilir.
  </para>
   <example>
    <title>Bir İstisna Oluşturmak</title>
    <programlisting role="php">
<![CDATA[
<?php
try {
    $error = 'Her zaman bu hatayı oluştur';
    throw new Exception($error);

    // İstisnadan sonra gelen kod çalıştırılmaz.
    echo 'Asla çalıştırılmaz';

} catch (Exception $e) {
    echo 'Yakalanan istisna: ',  $e->getMessage(), "\n";
}

// Çalışmaya devam eder
echo 'Merhaba Dünya';
?>
]]>
    </programlisting>
   </example>

  <sect1 xml:id="language.exceptions.extending">
   <title>ıstisnaları Genişletmek</title>
   <para>
   Yerleşik İstisna sınıfı, kullanıcı tanımlı bir istisna sınıfı tanımlanarak genişletilebilir.
   Aşağıdaki üyeler ve özellikler, yerleşik istisna sınıfından türetilen alt sınıf içerisinde
   nelerin erişilebilir olduğunu göstermektedir.
   </para>
   <example>
    <title>Yerleşik İstisna sınıfı</title>
    <programlisting role="php">
<![CDATA[
<?php
class Exception
{
    protected $message = 'Bilinmeyen istisna';  // istisna mesajı
    protected $code = 0;                        // kullanıcı tanımlı istisna kodu
    protected $file;                            // istisnanın kaynak dosyası
    protected $line;                            // istisnanın kaynak dosyasındaki satırı

    function __construct($message = null, $code = 0);

    final function getMessage();                // istisnanın mesajı
    final function getCode();                   // istisnanın kodu
    final function getFile();                   // kaynak dosya
    final function getLine();                   // kaynak dosya satırı
    final function getTrace();                  // backtrace() dizisi
    final function getTraceAsString();          // trace için formatlı karakter dizisi

    /* Ezilebilir */
    function __toString();                       // görüntüleme için formatlı karakter dizisi
}
?>
]]>
    </programlisting>
   </example>
   <para>
   Bir sınıf yerleşik İstisna sınıfını genişletiyor ve <link
    linkend="language.oop5.decon">ilklendiriciyi</link> yeniden tanımlıyorsa,
    tüm mevcut verinin düzgün biçimde atandığından emin olmak için <link
    linkend="language.oop5.paamayim-nekudotayim">parent::__construct()</link>
    fonksiyonunun da çağrılması şiddetle önerilir. Nesne bir karakter dizisi
    olaran sunulduğunda özelleştirilmiş bir çıktı sağlayabilmek için <link
    linkend="language.oop5.magic">__toString()</link> metodu ezilebilir.
   </para>
   <example>
    <title>ıstisna sınıfının genişletilmesi</title>
    <programlisting role="php">
<![CDATA[
<?php
/**
 * Özelleştirilmiş bir istisna sınıfı tanımlama
 */
class MyException extends Exception
{
    // İstisnayı yeniden tanımla böylece mesaj opsiyonel olmaktan çıkar
    public function __construct($message, $code = 0) {
        // biraz kod
    
        // her şeyin düzgün atandığından emin olalım
        parent::__construct($message, $code);
    }

    // nesne için özelleştirilmiş karakter dizini sunumu
    public function __toString() {
        return __CLASS__ . ": [{$this->code}]: {$this->message}\n";
    }

    public function customFunction() {
        echo "Bu türdeki istisnalar için özelleştirilmiş fonksiyon\n";
    }
}


/**
 * İstisnanın testi için sınıf yaratma
 */
class TestException
{
    public $var;

    const THROW_NONE    = 0;
    const THROW_CUSTOM  = 1;
    const THROW_DEFAULT = 2;

    function __construct($avalue = self::THROW_NONE) {

        switch ($avalue) {
            case self::THROW_CUSTOM:
                // özelleştirilmiş istisna oluştur
                throw new MyException('1 geçersiz bir parametredir', 5);
                break;

            case self::THROW_DEFAULT:
                // öntanımlı olarak bir oluşturulur.
                throw new Exception('2 parametre olarak kabul edilmez', 6);
                break;

            default: 
                // İstisna yok, nesne yaratılır.
                $this->var = $avalue;
                break;
        }
    }
}


// Örnek 1
try {
    $o = new TestException(TestException::THROW_CUSTOM);
} catch (MyException $e) {      // Yakalanacaktır
    echo "Benim istisnam yakalandı\n", $e;
    $e->customFunction();
} catch (Exception $e) {        // Skipped
    echo "Öntanımlı istisna yakalandı\n", $e;
}

// Çalışmaya devam et
var_dump($o);
echo "\n\n";


// Örnek 2
try {
    $o = new TestException(TestException::THROW_DEFAULT);
} catch (MyException $e) {      // Bu tür ile uyuşmuyor
    echo "Benim istisnam yakalandı\n", $e;
    $e->customFunction();
} catch (Exception $e) {        // Will be caught
    echo "Öntanımlı istisna yakalandı\n", $e;
}

// Çalışmaya devam et
var_dump($o);
echo "\n\n";


// Örnek 3
try {
    $o = new TestException(TestException::THROW_CUSTOM);
} catch (Exception $e) {        // Yakalanacaktır
    echo "Öntanımlı İstisna yakalandı\n", $e;
}

// Çalışmaya devam et
var_dump($o);
echo "\n\n";


// Örnek 4
try {
    $o = new TestException();
} catch (Exception $e) {        // Atlandı, istisna yok
    echo "Öntanımlı İstisna yakalandı\n", $e;
}

// Çalışmaya devam et
var_dump($o);
echo "\n\n";
?>
]]>
    </programlisting>
   </example>
  </sect1>

 </chapter>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
