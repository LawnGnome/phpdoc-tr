<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.2 $ -->
 <chapter id="features.error-handling">
  <title>Hata Ýþlemleri</title>
 
  <para>
   PHP'de pek çok uyarý çeþidi vardýr. Bunlar:

   <table>
    <title>PHP uyarý çeþitleri</title>
    <tgroup cols="4">
     <thead>
      <row>
       <entry>Deðer</entry>
       <entry>Sabit</entry>
       <entry>Taným</entry>
       <entry>Not</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>1</entry>
       <entry>E_ERROR</entry>
       <entry>hayati çalýþma hatalarý</entry>
       <entry></entry>
      </row>
      <row>
       <entry>2</entry>
       <entry>E_WARNING</entry>
       <entry>çalýþma uyarýlarý (hayati olmayan hatalar)</entry>
       <entry></entry>
      </row>
      <row>
       <entry>4</entry>
       <entry>E_PARSE</entry>
       <entry>derleme sýrasýnda ayrýþtýrma hatalarý</entry>
       <entry></entry>
      </row>
      <row>
       <entry>8</entry>
       <entry>E_NOTICE  </entry>
       <entry>
        çalýþma sýrasýndaki bildirimler (uyarýlardan daha az önemli)
       </entry>
       <entry></entry>
      </row>
      <row>
       <entry>16</entry>
       <entry>E_CORE_ERROR</entry>
       <entry>PHP'nin iç yapýsýyla ilgili, baþlatýlmasýný engelleyen hayati hatalar</entry>
       <entry>sadece PHP 4</entry>
      </row>
      <row>
       <entry>32</entry>
       <entry>E_CORE_WARNING</entry>
       <entry>
        PHP'nin iç yapýsýyla ilgili, baþlatýlmasý ile ilgili uyarýlar (hayati olmayan
        hatalar)
       </entry> 
       <entry>sadece PHP 4</entry>
      </row>
      <row>
       <entry>64</entry>
       <entry>E_COMPILE_ERROR</entry>
       <entry>hayati derleme hatalarý</entry>
       <entry>Sadece PHP 4</entry>
      </row>
      <row>
       <entry>128</entry>
       <entry>E_COMPILE_WARNING</entry>
       <entry>derleme sýrasýndaki uyarýlar (hayati olmayan hatalar)</entry>
       <entry>sadece PHP 4</entry>
      </row>
      <row>
       <entry>256</entry>
       <entry>E_USER_ERROR</entry>
       <entry>kullanýcýnýn yarattýðý hata mesajý</entry>
       <entry>sadece PHP 4</entry>
      </row>
      <row>
       <entry>512</entry>
       <entry>E_USER_WARNING</entry>
       <entry>kullanýcýnýn yarattýðý uyarý mesajý</entry>
       <entry>sadece PHP 4</entry>
      </row>
      <row>
       <entry>1024</entry>
       <entry>E_USER_NOTICE </entry>
       <entry>kullanýcýnýn yarattýðý bildiri mesajý</entry>
       <entry>sadece PHP 4</entry>
      </row>
      <row>
       <entry></entry>
       <entry>E_ALL</entry>
       <entry>desteklendikleri sürece, yukarýdakilerin hepsi</entry>
       <entry></entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </para>

  <para>
   Yukarýdaki deðerler (sayýsal veya sembolik) hangi hatalarýn bildirileceðini
   belirleyen bit maskesini oluþtururken kullanýlýr. Bu deðerleri
   birleþtirmeyi veya bazýlarýný maskelemeyi
   <link linkend="language.operators.bitwise">bit-tabanlý iþlemler</link> ile
   yapabilirsiniz. <filename>php.ini</filename> içinde sadece '|', '~', '!' ve
   '&amp;' iþlemlerinin anlaþýlacaðýna, ve <filename>php3.ini</filename>
   içinde hiçbirinin anlaþýlmayacaðýna dikkat edin.
  </para>
  <para>
   PHP 4'te öntanýmlý <link
    linkend="ini.error-reporting">error_reporting</link> deðeri <literal>E_ALL
    &amp; ~E_NOTICE</literal>'dir ve anlamý E-NOTICE-seviyesi dýþýndaki tüm
   hatalarýn ve uyarýlarýn bildirilmesidir. PHP 3'de öntanýmlý ayar
   <literal>(E_ERROR | E_WARNING | E_PARSE)</literal>'dýr ve anlamý öncekiyle
   aynýdýr. Fakat dikkat edin ki, PHP 3'ün <filename>php3.ini</filename>
   dosyasýnda sabitler desteklenmediðinden <link
    linkend="ini.error-reporting">error_reporting</link> ayarý sayýsal olmak
   durumundadýr; az önce belirtilen deðer de <literal>7</literal>'ye denk
   gelir.
  </para>

  <para>
   Baþlangýç deðeri ini dosyasýnda <link
    linkend="ini.error-reporting">error_reporting</link> direktifiyle,
   Apache'nizin <filename>httpd.conf</filename> dosyasýnda php_error_reporting
   (PHP 3 için php3_error_reporting) direktifiyle, ve son olarak çalýþma
   esnasýnda betik içinden <function>error_reporting</function> fonksiyonuyla
   belirlenebilir.
  </para>
  
  <warning>
   <para>
    Sunucularýnýzý veya kodlarýnýzý PHP 3'ten PHP 4'e güncellerken bu ayarlarý
    ve <function>error_reporting</function> fonksiyonu çaðrýmlarýný kontrol
    etmelisiniz, yoksa istemeyerek yeni hata çeþitlerinin bildirimlerini
    kapatabilirsiniz, özellikle E_COMPILE_ERROR'u. Bu, hatanýn ne ve nerede
    olduðuna dair hiç bir bilgi býrakmadan betiklerinizin tamamiyle boþ
    sayfalar üretmesine yolaçabilir.
   </para>
  </warning>
    
  <para>
   Tüm <link linkend="language.expressions">PHP ifadeleri</link> @ ön-ekiyle
   çaðrýlabilir. Bu ön-ek, o ifade için hata bildirimini kapatacaktýr. Eðer
   böyle bir ifade sýrasýnda hata oluþursa, ve <link
    linkend="ini.track-errors">track_errors</link> özelliði aktifse, hata
   mesajýný <literal>$php_errormsg</literal> genel deðiþkeninde
   bulabilirsiniz.
  </para>

  <note>
   <para>
    <link linkend="language.operators.errorcontrol">@ hata-kontrol
     iþlemi</link> ön-eki, ayrýþtýrma hatalarýný kapatmayacaktýr.
   </para>
  </note>

  <warning>
   <para>
    Þu an için <link linkend="language.operators.errorcontrol">@
     hata-kontrol iþlemi</link> ön-eki betik sonlandýrýlmasýna yol açacak
    kritik hatalarýn bile gösterilmesini engelleyecektir. Diðer þeylerin
    dýþýnda, bu demektir ki <link
     linkend="language.operators.errorcontrol">@</link> ön-ekini belli
    fonksiyonlardan gelecek hatalarý bastýrmak için kullanýrsanýz, ve bu
    fonksiyonlar tanýmlý deðilse, betik nedeni belirtilmeden
    sonlandýrýlacaktýr.
   </para>
  </warning>

  <para>
   Aþaðýda PHP'deki hata kontrolü iþlemlerinin kullanýmýna iliþkin bir örnek
   bulacaksýnýz. Burada bilgileri XML formatýnda bir günlükte saklayan ve
   programcýya kritik hatalarda e-mail yollayan bir hata iþleme fonksiyonu tanýmlýyoruz. 
   <example>
    <title>Betik için hata iþlemenin kullanýmý</title>
    <programlisting role="php">
<![CDATA[
<?php
// kendi bildirimimizi kendimiz yapacaðýz
error_reporting(0);

// kullanýcý tarafýndan belirlenen hata iþleme fonksiyonu
function userErrorHandler ($errno, $errmsg, $filename, $linenum, $vars) {
    // girilen hata için zaman deðeri
    $dt = date("Y-m-d H:i:s (T)");

    // hata dizgileri için bir iliþkili dizi tanýmla
    // gerçekte ilgilenmemiz gereken deðerler sadece
    // 2, 8, 256, 512, ve 1024
    $errortype = array (
                1   =>  "Hata",
                2   =>  "Uyarý",
                4   =>  "Ayrýþtýrma Hatasý",
                8   =>  "Bildirim",
                16  =>  "Çekirdek Hatasý",
                32  =>  "Çekirdek Uyarýsý",
                64  =>  "Derleme Hatasý",
                128 =>  "Derleme Uyarýsý",
                256 =>  "Kullanýcý Hatasý",
                512 =>  "Kullanýcý Uyarýsý",
                1024=>  "Kullanýcý Bildirimi"
                );
    // deðiþken izi kaydedilecek hatalar
    $user_errors = array(E_USER_ERROR, E_USER_WARNING, E_USER_NOTICE);
    
    $err = "<errorentry>\n";
    $err .= "\t<datetime>".$dt."</datetime>\n";
    $err .= "\t<errornum>".$errno."</errnumber>\n";
    $err .= "\t<errortype>".$errortype[$errno]."</errortype>\n";
    $err .= "\t<errormsg>".$errmsg."</errormsg>\n";
    $err .= "\t<scriptname>".$filename."</scriptname>\n";
    $err .= "\t<scriptlinenum>".$linenum."</scriptlinenum>\n";

    if (in_array($errno, $user_errors))
        $err .= "\t<vartrace>".wddx_serialize_value($vars,"Variables")."</vartrace>\n";
    $err .= "</errorentry>\n\n";
    
    // deneme için
    // echo $err;

    // hata günlüðünü kaydet, ve kritik kullanýcý hatalarýnda bana mail yolla
    error_log($err, 3, "/usr/local/php4/error.log");
    if ($errno == E_USER_ERROR)
        mail("phpdev@mydomain.com","Kritik Kullanýcý Hatasý",$err);
}


function distance ($vect1, $vect2) {
    if (!is_array($vect1) || !is_array($vect2)) {
        trigger_error("Bozuk parametreler, dizi bekleniyordu", E_USER_ERROR);
        return NULL;
    }

    if (count($vect1) != count($vect2)) {
        trigger_error("Vektörlerin ayný boyutta olmasý gerekiyor", E_USER_ERROR);
        return NULL;
    }

    for ($i=0; $i<count($vect1); $i++) {
        $c1 = $vect1[$i]; $c2 = $vect2[$i];
        $d = 0.0;
        if (!is_numeric($c1)) {
            trigger_error("Vektör 1'in $i koordinatý sayý deðil, 0 olarak alýndý", 
                            E_USER_WARNING);
            $c1 = 0.0;
        }
        if (!is_numeric($c2)) {
            trigger_error("Vektör 2'in $i koordinatý sayý deðil, 0 olarak alýndý", 
                            E_USER_WARNING);
            $c2 = 0.0;
        }
        $d += $c2*$c2 - $c1*$c1;
    }
    return sqrt($d);
}

$old_error_handler = set_error_handler("userErrorHandler");

// tanýmlanmamýþ sabit, uyarý oluþturur
$t = I_AM_NOT_DEFINED;

// bazý "vektörler" tanýmla
$a = array(2,3,"foo");
$b = array(5.5, 4.3, -1.6);
$c = array (1,-3);

// kullanýcý hatasý oluþturur
$t1 = distance($c,$b)."\n";

// baþka bir kullanýcý hatasý oluþturur
$t2 = distance($b,"i am not an array")."\n";

// uyarý oluþturur
$t3 = distance($a,$b)."\n";

?>
]]>
    </programlisting>
   </example>
   Bu <link linkend="ref.errorfunc">Hata Ýþleme ve Günlük fonksiyonlarý</link>
   hakkýnda basit bir örnek.
  </para>

  <para>
   Ayrýca bkz. <function>error_reporting</function>,
   <function>error_log</function>,
   <function>set_error_handler</function>,
   <function>restore_error_handler</function>, 
   <function>trigger_error</function>,
   <function>user_error</function>
  </para>

 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
