<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.4 $ -->
 <chapter id="features.error-handling">
  <title>Hata &Idot;&scedil;lemleri</title>
 
  <para>
   PHP'de pek çok uyar&inodot; çe&scedil;idi vard&inodot;r. Bunlar:

   <table>
    <title>PHP uyar&inodot; çe&scedil;itleri</title>
    <tgroup cols="4">
     <thead>
      <row>
       <entry>De&gbreve;er</entry>
       <entry>Sabit</entry>
       <entry>Tan&inodot;m</entry>
       <entry>Not</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>1</entry>
       <entry>E_ERROR</entry>
       <entry>hayati çal&inodot;&scedil;ma hatalar&inodot;</entry>
       <entry></entry>
      </row>
      <row>
       <entry>2</entry>
       <entry>E_WARNING</entry>
       <entry>çal&inodot;&scedil;ma uyar&inodot;lar&inodot; (hayati olmayan hatalar)</entry>
       <entry></entry>
      </row>
      <row>
       <entry>4</entry>
       <entry>E_PARSE</entry>
       <entry>derleme s&inodot;ras&inodot;nda ayr&inodot;&scedil;t&inodot;rma hatalar&inodot;</entry>
       <entry></entry>
      </row>
      <row>
       <entry>8</entry>
       <entry>E_NOTICE  </entry>
       <entry>
        çal&inodot;&scedil;ma s&inodot;ras&inodot;ndaki bildirimler (uyar&inodot;lardan daha az önemli)
       </entry>
       <entry></entry>
      </row>
      <row>
       <entry>16</entry>
       <entry>E_CORE_ERROR</entry>
       <entry>PHP'nin iç yap&inodot;s&inodot;yla ilgili, ba&scedil;lat&inodot;lmas&inodot;n&inodot; engelleyen hayati hatalar</entry>
       <entry>sadece PHP 4</entry>
      </row>
      <row>
       <entry>32</entry>
       <entry>E_CORE_WARNING</entry>
       <entry>
        PHP'nin iç yap&inodot;s&inodot;yla ilgili, ba&scedil;lat&inodot;lmas&inodot; ile ilgili uyar&inodot;lar (hayati olmayan
        hatalar)
       </entry> 
       <entry>sadece PHP 4</entry>
      </row>
      <row>
       <entry>64</entry>
       <entry>E_COMPILE_ERROR</entry>
       <entry>hayati derleme hatalar&inodot;</entry>
       <entry>Sadece PHP 4</entry>
      </row>
      <row>
       <entry>128</entry>
       <entry>E_COMPILE_WARNING</entry>
       <entry>derleme s&inodot;ras&inodot;ndaki uyar&inodot;lar (hayati olmayan hatalar)</entry>
       <entry>sadece PHP 4</entry>
      </row>
      <row>
       <entry>256</entry>
       <entry>E_USER_ERROR</entry>
       <entry>kullan&inodot;c&inodot;n&inodot;n yaratt&inodot;&gbreve;&inodot; hata mesaj&inodot;</entry>
       <entry>sadece PHP 4</entry>
      </row>
      <row>
       <entry>512</entry>
       <entry>E_USER_WARNING</entry>
       <entry>kullan&inodot;c&inodot;n&inodot;n yaratt&inodot;&gbreve;&inodot; uyar&inodot; mesaj&inodot;</entry>
       <entry>sadece PHP 4</entry>
      </row>
      <row>
       <entry>1024</entry>
       <entry>E_USER_NOTICE </entry>
       <entry>kullan&inodot;c&inodot;n&inodot;n yaratt&inodot;&gbreve;&inodot; bildiri mesaj&inodot;</entry>
       <entry>sadece PHP 4</entry>
      </row>
      <row>
       <entry></entry>
       <entry>E_ALL</entry>
       <entry>desteklendikleri sürece, yukar&inodot;dakilerin hepsi</entry>
       <entry></entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </para>

  <para>
   Yukar&inodot;daki de&gbreve;erler (say&inodot;sal veya sembolik) hangi hatalar&inodot;n bildirilece&gbreve;ini
   belirleyen bit maskesini olu&scedil;tururken kullan&inodot;l&inodot;r. Bu de&gbreve;erleri
   birle&scedil;tirmeyi veya baz&inodot;lar&inodot;n&inodot; maskelemeyi
   <link linkend="language.operators.bitwise">bit-tabanl&inodot; i&scedil;lemler</link> ile
   yapabilirsiniz. <filename>php.ini</filename> içinde sadece '|', '~', '!' ve
   '&amp;' i&scedil;lemlerinin anla&scedil;&inodot;laca&gbreve;&inodot;na, ve <filename>php3.ini</filename>
   içinde hiçbirinin anla&scedil;&inodot;lmayaca&gbreve;&inodot;na dikkat edin.
  </para>
  <para>
   PHP 4'te öntan&inodot;ml&inodot; <link
    linkend="ini.error-reporting">error_reporting</link> de&gbreve;eri <literal>E_ALL
    &amp; ~E_NOTICE</literal>'dir ve anlam&inodot; E-NOTICE-seviyesi d&inodot;&scedil;&inodot;ndaki tüm
   hatalar&inodot;n ve uyar&inodot;lar&inodot;n bildirilmesidir. PHP 3'de öntan&inodot;ml&inodot; ayar
   <literal>(E_ERROR | E_WARNING | E_PARSE)</literal>'d&inodot;r ve anlam&inodot; öncekiyle
   ayn&inodot;d&inodot;r. Fakat dikkat edin ki, PHP 3'ün <filename>php3.ini</filename>
   dosyas&inodot;nda sabitler desteklenmedi&gbreve;inden <link
    linkend="ini.error-reporting">error_reporting</link> ayar&inodot; say&inodot;sal olmak
   durumundad&inodot;r; az önce belirtilen de&gbreve;er de <literal>7</literal>'ye denk
   gelir.
  </para>

  <para>
   Ba&scedil;lang&inodot;ç de&gbreve;eri ini dosyas&inodot;nda <link
    linkend="ini.error-reporting">error_reporting</link> direktifiyle,
   Apache'nizin <filename>httpd.conf</filename> dosyas&inodot;nda php_error_reporting
   (PHP 3 için php3_error_reporting) direktifiyle, ve son olarak çal&inodot;&scedil;ma
   esnas&inodot;nda betik içinden <function>error_reporting</function> fonksiyonuyla
   belirlenebilir.
  </para>
  
  <warning>
   <para>
    Sunucular&inodot;n&inodot;z&inodot; veya kodlar&inodot;n&inodot;z&inodot; PHP 3'ten PHP 4'e güncellerken bu ayarlar&inodot;
    ve <function>error_reporting</function> fonksiyonu ça&gbreve;r&inodot;mlar&inodot;n&inodot; kontrol
    etmelisiniz, yoksa istemeyerek yeni hata çe&scedil;itlerinin bildirimlerini
    kapatabilirsiniz, özellikle E_COMPILE_ERROR'u. Bu, hatan&inodot;n ne ve nerede
    oldu&gbreve;una dair hiç bir bilgi b&inodot;rakmadan betiklerinizin tamamiyle bo&scedil;
    sayfalar üretmesine yolaçabilir.
   </para>
  </warning>
    
  <para>
   Tüm <link linkend="language.expressions">PHP ifadeleri</link> @ ön-ekiyle
   ça&gbreve;r&inodot;labilir. Bu ön-ek, o ifade için hata bildirimini kapatacakt&inodot;r. E&gbreve;er
   böyle bir ifade s&inodot;ras&inodot;nda hata olu&scedil;ursa, ve <link
    linkend="ini.track-errors">track_errors</link> özelli&gbreve;i aktifse, hata
   mesaj&inodot;n&inodot; <literal>$php_errormsg</literal> genel de&gbreve;i&scedil;keninde
   bulabilirsiniz.
  </para>

  <note>
   <para>
    <link linkend="language.operators.errorcontrol">@ hata-kontrol
     i&scedil;lemi</link> ön-eki, ayr&inodot;&scedil;t&inodot;rma hatalar&inodot;n&inodot; kapatmayacakt&inodot;r.
   </para>
  </note>

  <warning>
   <para>
    &Scedil;u an için <link linkend="language.operators.errorcontrol">@
     hata-kontrol i&scedil;lemi</link> ön-eki betik sonland&inodot;r&inodot;lmas&inodot;na yol açacak
    kritik hatalar&inodot;n bile gösterilmesini engelleyecektir. Di&gbreve;er &scedil;eylerin
    d&inodot;&scedil;&inodot;nda, bu demektir ki <link
     linkend="language.operators.errorcontrol">@</link> ön-ekini belli
    fonksiyonlardan gelecek hatalar&inodot; bast&inodot;rmak için kullan&inodot;rsan&inodot;z, ve bu
    fonksiyonlar tan&inodot;ml&inodot; de&gbreve;ilse, betik nedeni belirtilmeden
    sonland&inodot;r&inodot;lacakt&inodot;r.
   </para>
  </warning>

  <para>
   A&scedil;a&gbreve;&inodot;da PHP'deki hata kontrolü i&scedil;lemlerinin kullan&inodot;m&inodot;na ili&scedil;kin bir örnek
   bulacaks&inodot;n&inodot;z. Burada bilgileri XML format&inodot;nda bir günlükte saklayan ve
   programc&inodot;ya kritik hatalarda e-mail yollayan bir hata i&scedil;leme fonksiyonu tan&inodot;ml&inodot;yoruz. 
   <example>
    <title>Betik için hata i&scedil;lemenin kullan&inodot;m&inodot;</title>
    <programlisting role="php">
<![CDATA[
<?php
// kendi bildirimimizi kendimiz yapacaðýz
error_reporting(0);

// kullanýcý tarafýndan belirlenen hata iþleme fonksiyonu
function userErrorHandler ($errno, $errmsg, $filename, $linenum, $vars) {
    // girilen hata için zaman deðeri
    $dt = date("Y-m-d H:i:s (T)");

    // hata dizgileri için bir iliþkili dizi tanýmla
    // gerçekte ilgilenmemiz gereken deðerler sadece
    // 2, 8, 256, 512, ve 1024
    $errortype = array (
                1   =>  "Hata",
                2   =>  "Uyarý",
                4   =>  "Ayrýþtýrma Hatasý",
                8   =>  "Bildirim",
                16  =>  "Çekirdek Hatasý",
                32  =>  "Çekirdek Uyarýsý",
                64  =>  "Derleme Hatasý",
                128 =>  "Derleme Uyarýsý",
                256 =>  "Kullanýcý Hatasý",
                512 =>  "Kullanýcý Uyarýsý",
                1024=>  "Kullanýcý Bildirimi"
                );
    // deðiþken izi kaydedilecek hatalar
    $user_errors = array(E_USER_ERROR, E_USER_WARNING, E_USER_NOTICE);
    
    $err = "<errorentry>\n";
    $err .= "\t<datetime>".$dt."</datetime>\n";
    $err .= "\t<errornum>".$errno."</errnumber>\n";
    $err .= "\t<errortype>".$errortype[$errno]."</errortype>\n";
    $err .= "\t<errormsg>".$errmsg."</errormsg>\n";
    $err .= "\t<scriptname>".$filename."</scriptname>\n";
    $err .= "\t<scriptlinenum>".$linenum."</scriptlinenum>\n";

    if (in_array($errno, $user_errors))
        $err .= "\t<vartrace>".wddx_serialize_value($vars,"Variables")."</vartrace>\n";
    $err .= "</errorentry>\n\n";
    
    // deneme için
    // echo $err;

    // hata günlüðünü kaydet, ve kritik kullanýcý hatalarýnda bana mail yolla
    error_log($err, 3, "/usr/local/php4/error.log");
    if ($errno == E_USER_ERROR)
        mail("phpdev@mydomain.com","Kritik Kullanýcý Hatasý",$err);
}


function distance ($vect1, $vect2) {
    if (!is_array($vect1) || !is_array($vect2)) {
        trigger_error("Bozuk parametreler, dizi bekleniyordu", E_USER_ERROR);
        return NULL;
    }

    if (count($vect1) != count($vect2)) {
        trigger_error("Vektörlerin ayný boyutta olmasý gerekiyor", E_USER_ERROR);
        return NULL;
    }

    for ($i=0; $i<count($vect1); $i++) {
        $c1 = $vect1[$i]; $c2 = $vect2[$i];
        $d = 0.0;
        if (!is_numeric($c1)) {
            trigger_error("Vektör 1'in $i koordinatý sayý deðil, 0 olarak alýndý", 
                            E_USER_WARNING);
            $c1 = 0.0;
        }
        if (!is_numeric($c2)) {
            trigger_error("Vektör 2'in $i koordinatý sayý deðil, 0 olarak alýndý", 
                            E_USER_WARNING);
            $c2 = 0.0;
        }
        $d += $c2*$c2 - $c1*$c1;
    }
    return sqrt($d);
}

$old_error_handler = set_error_handler("userErrorHandler");

// tanýmlanmamýþ sabit, uyarý oluþturur
$t = I_AM_NOT_DEFINED;

// bazý "vektörler" tanýmla
$a = array(2,3,"foo");
$b = array(5.5, 4.3, -1.6);
$c = array (1,-3);

// kullanýcý hatasý oluþturur
$t1 = distance($c,$b)."\n";

// baþka bir kullanýcý hatasý oluþturur
$t2 = distance($b,"i am not an array")."\n";

// uyarý oluþturur
$t3 = distance($a,$b)."\n";

?>
]]>
    </programlisting>
   </example>
   Bu <link linkend="ref.errorfunc">Hata &Idot;&scedil;leme ve Günlük fonksiyonlar&inodot;</link>
   hakk&inodot;nda basit bir örnek.
  </para>

  <para>
   Ayr&inodot;ca bkz. <function>error_reporting</function>,
   <function>error_log</function>,
   <function>set_error_handler</function>,
   <function>restore_error_handler</function>, 
   <function>trigger_error</function>,
   <function>user_error</function>
  </para>

 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
